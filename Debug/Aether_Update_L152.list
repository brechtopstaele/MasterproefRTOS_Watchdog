
Aether_Update_L152.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005928  08005928  00006928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a88  08005a88  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a88  08005a88  00006a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a90  08005a90  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a90  08005a90  00006a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a94  08005a94  00006a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005a98  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001240  2000006c  08005b04  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012ac  08005b04  000072ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c40  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e85  00000000  00000000  00019cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  0001cb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c67  00000000  00000000  0001db90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019018  00000000  00000000  0001e7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d96  00000000  00000000  0003780f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096695  00000000  00000000  0004a5a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0c3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a94  00000000  00000000  000e0c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000e5714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000006c 	.word	0x2000006c
 800015c:	00000000 	.word	0x00000000
 8000160:	08005910 	.word	0x08005910

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000070 	.word	0x20000070
 800017c:	08005910 	.word	0x08005910

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b968 	b.w	8000468 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9d08      	ldr	r5, [sp, #32]
 80001b6:	460c      	mov	r4, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14e      	bne.n	800025a <__udivmoddi4+0xaa>
 80001bc:	4694      	mov	ip, r2
 80001be:	458c      	cmp	ip, r1
 80001c0:	4686      	mov	lr, r0
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	d962      	bls.n	800028e <__udivmoddi4+0xde>
 80001c8:	b14a      	cbz	r2, 80001de <__udivmoddi4+0x2e>
 80001ca:	f1c2 0320 	rsb	r3, r2, #32
 80001ce:	4091      	lsls	r1, r2
 80001d0:	fa20 f303 	lsr.w	r3, r0, r3
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	4319      	orrs	r1, r3
 80001da:	fa00 fe02 	lsl.w	lr, r0, r2
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e6:	fb07 1114 	mls	r1, r7, r4, r1
 80001ea:	fa1f f68c 	uxth.w	r6, ip
 80001ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f6:	fb04 f106 	mul.w	r1, r4, r6
 80001fa:	4299      	cmp	r1, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x64>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f104 30ff 	add.w	r0, r4, #4294967295
 8000206:	f080 8110 	bcs.w	800042a <__udivmoddi4+0x27a>
 800020a:	4299      	cmp	r1, r3
 800020c:	f240 810d 	bls.w	800042a <__udivmoddi4+0x27a>
 8000210:	3c02      	subs	r4, #2
 8000212:	4463      	add	r3, ip
 8000214:	1a59      	subs	r1, r3, r1
 8000216:	fbb1 f0f7 	udiv	r0, r1, r7
 800021a:	fb07 1110 	mls	r1, r7, r0, r1
 800021e:	fb00 f606 	mul.w	r6, r0, r6
 8000222:	fa1f f38e 	uxth.w	r3, lr
 8000226:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800022a:	429e      	cmp	r6, r3
 800022c:	d90a      	bls.n	8000244 <__udivmoddi4+0x94>
 800022e:	eb1c 0303 	adds.w	r3, ip, r3
 8000232:	f100 31ff 	add.w	r1, r0, #4294967295
 8000236:	f080 80fa 	bcs.w	800042e <__udivmoddi4+0x27e>
 800023a:	429e      	cmp	r6, r3
 800023c:	f240 80f7 	bls.w	800042e <__udivmoddi4+0x27e>
 8000240:	4463      	add	r3, ip
 8000242:	3802      	subs	r0, #2
 8000244:	2100      	movs	r1, #0
 8000246:	1b9b      	subs	r3, r3, r6
 8000248:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800024c:	b11d      	cbz	r5, 8000256 <__udivmoddi4+0xa6>
 800024e:	40d3      	lsrs	r3, r2
 8000250:	2200      	movs	r2, #0
 8000252:	e9c5 3200 	strd	r3, r2, [r5]
 8000256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025a:	428b      	cmp	r3, r1
 800025c:	d905      	bls.n	800026a <__udivmoddi4+0xba>
 800025e:	b10d      	cbz	r5, 8000264 <__udivmoddi4+0xb4>
 8000260:	e9c5 0100 	strd	r0, r1, [r5]
 8000264:	2100      	movs	r1, #0
 8000266:	4608      	mov	r0, r1
 8000268:	e7f5      	b.n	8000256 <__udivmoddi4+0xa6>
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d146      	bne.n	8000300 <__udivmoddi4+0x150>
 8000272:	42a3      	cmp	r3, r4
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xcc>
 8000276:	4290      	cmp	r0, r2
 8000278:	f0c0 80ee 	bcc.w	8000458 <__udivmoddi4+0x2a8>
 800027c:	1a86      	subs	r6, r0, r2
 800027e:	eb64 0303 	sbc.w	r3, r4, r3
 8000282:	2001      	movs	r0, #1
 8000284:	2d00      	cmp	r5, #0
 8000286:	d0e6      	beq.n	8000256 <__udivmoddi4+0xa6>
 8000288:	e9c5 6300 	strd	r6, r3, [r5]
 800028c:	e7e3      	b.n	8000256 <__udivmoddi4+0xa6>
 800028e:	2a00      	cmp	r2, #0
 8000290:	f040 808f 	bne.w	80003b2 <__udivmoddi4+0x202>
 8000294:	eba1 040c 	sub.w	r4, r1, ip
 8000298:	2101      	movs	r1, #1
 800029a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029e:	fa1f f78c 	uxth.w	r7, ip
 80002a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a6:	fb08 4416 	mls	r4, r8, r6, r4
 80002aa:	fb07 f006 	mul.w	r0, r7, r6
 80002ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b6:	4298      	cmp	r0, r3
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0x11c>
 80002ba:	eb1c 0303 	adds.w	r3, ip, r3
 80002be:	f106 34ff 	add.w	r4, r6, #4294967295
 80002c2:	d202      	bcs.n	80002ca <__udivmoddi4+0x11a>
 80002c4:	4298      	cmp	r0, r3
 80002c6:	f200 80cb 	bhi.w	8000460 <__udivmoddi4+0x2b0>
 80002ca:	4626      	mov	r6, r4
 80002cc:	1a1c      	subs	r4, r3, r0
 80002ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80002d2:	fb08 4410 	mls	r4, r8, r0, r4
 80002d6:	fb00 f707 	mul.w	r7, r0, r7
 80002da:	fa1f f38e 	uxth.w	r3, lr
 80002de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002e2:	429f      	cmp	r7, r3
 80002e4:	d908      	bls.n	80002f8 <__udivmoddi4+0x148>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0x146>
 80002f0:	429f      	cmp	r7, r3
 80002f2:	f200 80ae 	bhi.w	8000452 <__udivmoddi4+0x2a2>
 80002f6:	4620      	mov	r0, r4
 80002f8:	1bdb      	subs	r3, r3, r7
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	e7a5      	b.n	800024c <__udivmoddi4+0x9c>
 8000300:	f1c1 0720 	rsb	r7, r1, #32
 8000304:	408b      	lsls	r3, r1
 8000306:	fa22 fc07 	lsr.w	ip, r2, r7
 800030a:	ea4c 0c03 	orr.w	ip, ip, r3
 800030e:	fa24 f607 	lsr.w	r6, r4, r7
 8000312:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000316:	fbb6 f8f9 	udiv	r8, r6, r9
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	fb09 6618 	mls	r6, r9, r8, r6
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	408c      	lsls	r4, r1
 8000328:	fa00 fa01 	lsl.w	sl, r0, r1
 800032c:	fb08 f00e 	mul.w	r0, r8, lr
 8000330:	431c      	orrs	r4, r3
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000338:	4298      	cmp	r0, r3
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	d90a      	bls.n	8000356 <__udivmoddi4+0x1a6>
 8000340:	eb1c 0303 	adds.w	r3, ip, r3
 8000344:	f108 36ff 	add.w	r6, r8, #4294967295
 8000348:	f080 8081 	bcs.w	800044e <__udivmoddi4+0x29e>
 800034c:	4298      	cmp	r0, r3
 800034e:	d97e      	bls.n	800044e <__udivmoddi4+0x29e>
 8000350:	f1a8 0802 	sub.w	r8, r8, #2
 8000354:	4463      	add	r3, ip
 8000356:	1a1e      	subs	r6, r3, r0
 8000358:	fbb6 f3f9 	udiv	r3, r6, r9
 800035c:	fb09 6613 	mls	r6, r9, r3, r6
 8000360:	fb03 fe0e 	mul.w	lr, r3, lr
 8000364:	b2a4      	uxth	r4, r4
 8000366:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800036a:	45a6      	cmp	lr, r4
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x1d0>
 800036e:	eb1c 0404 	adds.w	r4, ip, r4
 8000372:	f103 30ff 	add.w	r0, r3, #4294967295
 8000376:	d266      	bcs.n	8000446 <__udivmoddi4+0x296>
 8000378:	45a6      	cmp	lr, r4
 800037a:	d964      	bls.n	8000446 <__udivmoddi4+0x296>
 800037c:	3b02      	subs	r3, #2
 800037e:	4464      	add	r4, ip
 8000380:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000384:	fba0 8302 	umull	r8, r3, r0, r2
 8000388:	eba4 040e 	sub.w	r4, r4, lr
 800038c:	429c      	cmp	r4, r3
 800038e:	46c6      	mov	lr, r8
 8000390:	461e      	mov	r6, r3
 8000392:	d350      	bcc.n	8000436 <__udivmoddi4+0x286>
 8000394:	d04d      	beq.n	8000432 <__udivmoddi4+0x282>
 8000396:	b155      	cbz	r5, 80003ae <__udivmoddi4+0x1fe>
 8000398:	ebba 030e 	subs.w	r3, sl, lr
 800039c:	eb64 0406 	sbc.w	r4, r4, r6
 80003a0:	fa04 f707 	lsl.w	r7, r4, r7
 80003a4:	40cb      	lsrs	r3, r1
 80003a6:	431f      	orrs	r7, r3
 80003a8:	40cc      	lsrs	r4, r1
 80003aa:	e9c5 7400 	strd	r7, r4, [r5]
 80003ae:	2100      	movs	r1, #0
 80003b0:	e751      	b.n	8000256 <__udivmoddi4+0xa6>
 80003b2:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b6:	f1c2 0320 	rsb	r3, r2, #32
 80003ba:	40d9      	lsrs	r1, r3
 80003bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c0:	fa20 f303 	lsr.w	r3, r0, r3
 80003c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80003c8:	fbb1 f0f8 	udiv	r0, r1, r8
 80003cc:	fb08 1110 	mls	r1, r8, r0, r1
 80003d0:	4094      	lsls	r4, r2
 80003d2:	431c      	orrs	r4, r3
 80003d4:	fa1f f78c 	uxth.w	r7, ip
 80003d8:	0c23      	lsrs	r3, r4, #16
 80003da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003de:	fb00 f107 	mul.w	r1, r0, r7
 80003e2:	4299      	cmp	r1, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x248>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ee:	d22c      	bcs.n	800044a <__udivmoddi4+0x29a>
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d92a      	bls.n	800044a <__udivmoddi4+0x29a>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4463      	add	r3, ip
 80003f8:	1a5b      	subs	r3, r3, r1
 80003fa:	fbb3 f1f8 	udiv	r1, r3, r8
 80003fe:	fb08 3311 	mls	r3, r8, r1, r3
 8000402:	b2a4      	uxth	r4, r4
 8000404:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000408:	fb01 f307 	mul.w	r3, r1, r7
 800040c:	42a3      	cmp	r3, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x272>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f101 36ff 	add.w	r6, r1, #4294967295
 8000418:	d213      	bcs.n	8000442 <__udivmoddi4+0x292>
 800041a:	42a3      	cmp	r3, r4
 800041c:	d911      	bls.n	8000442 <__udivmoddi4+0x292>
 800041e:	3902      	subs	r1, #2
 8000420:	4464      	add	r4, ip
 8000422:	1ae4      	subs	r4, r4, r3
 8000424:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000428:	e73b      	b.n	80002a2 <__udivmoddi4+0xf2>
 800042a:	4604      	mov	r4, r0
 800042c:	e6f2      	b.n	8000214 <__udivmoddi4+0x64>
 800042e:	4608      	mov	r0, r1
 8000430:	e708      	b.n	8000244 <__udivmoddi4+0x94>
 8000432:	45c2      	cmp	sl, r8
 8000434:	d2af      	bcs.n	8000396 <__udivmoddi4+0x1e6>
 8000436:	ebb8 0e02 	subs.w	lr, r8, r2
 800043a:	eb63 060c 	sbc.w	r6, r3, ip
 800043e:	3801      	subs	r0, #1
 8000440:	e7a9      	b.n	8000396 <__udivmoddi4+0x1e6>
 8000442:	4631      	mov	r1, r6
 8000444:	e7ed      	b.n	8000422 <__udivmoddi4+0x272>
 8000446:	4603      	mov	r3, r0
 8000448:	e79a      	b.n	8000380 <__udivmoddi4+0x1d0>
 800044a:	4630      	mov	r0, r6
 800044c:	e7d4      	b.n	80003f8 <__udivmoddi4+0x248>
 800044e:	46b0      	mov	r8, r6
 8000450:	e781      	b.n	8000356 <__udivmoddi4+0x1a6>
 8000452:	4463      	add	r3, ip
 8000454:	3802      	subs	r0, #2
 8000456:	e74f      	b.n	80002f8 <__udivmoddi4+0x148>
 8000458:	4606      	mov	r6, r0
 800045a:	4623      	mov	r3, r4
 800045c:	4608      	mov	r0, r1
 800045e:	e711      	b.n	8000284 <__udivmoddi4+0xd4>
 8000460:	3e02      	subs	r6, #2
 8000462:	4463      	add	r3, ip
 8000464:	e732      	b.n	80002cc <__udivmoddi4+0x11c>
 8000466:	bf00      	nop

08000468 <__aeabi_idiv0>:
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	4a06      	ldr	r2, [pc, #24]	@ (8000494 <vApplicationGetIdleTaskMemory+0x28>)
 800047c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	4a05      	ldr	r2, [pc, #20]	@ (8000498 <vApplicationGetIdleTaskMemory+0x2c>)
 8000482:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2280      	movs	r2, #128	@ 0x80
 8000488:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	20000088 	.word	0x20000088
 8000498:	20000128 	.word	0x20000128

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b5b0      	push	{r4, r5, r7, lr}
 800049e:	b08e      	sub	sp, #56	@ 0x38
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f000 fcb2 	bl	8000e0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f843 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004aa:	f000 f8f7 	bl	800069c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ae:	f000 f8cb 	bl	8000648 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80004b2:	f000 f88b 	bl	80005cc <MX_CRC_Init>
  MX_USART1_UART_Init();
 80004b6:	f000 f89d 	bl	80005f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80004ba:	4817      	ldr	r0, [pc, #92]	@ (8000518 <main+0x7c>)
 80004bc:	f000 fa00 	bl	80008c0 <RetargetInit>
  printf("L152: Starting up.....\n");
 80004c0:	4816      	ldr	r0, [pc, #88]	@ (800051c <main+0x80>)
 80004c2:	f004 faa5 	bl	8004a10 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80004c6:	4b16      	ldr	r3, [pc, #88]	@ (8000520 <main+0x84>)
 80004c8:	f107 041c 	add.w	r4, r7, #28
 80004cc:	461d      	mov	r5, r3
 80004ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80004da:	f107 031c 	add.w	r3, r7, #28
 80004de:	2100      	movs	r1, #0
 80004e0:	4618      	mov	r0, r3
 80004e2:	f002 ff75 	bl	80033d0 <osThreadCreate>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000524 <main+0x88>)
 80004ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of checkUpdateTask */
  osThreadDef(checkUpdateTask, StartCheckUpdateTask, osPriorityNormal, 0, 128);
 80004ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000528 <main+0x8c>)
 80004ee:	463c      	mov	r4, r7
 80004f0:	461d      	mov	r5, r3
 80004f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  checkUpdateTaskHandle = osThreadCreate(osThread(checkUpdateTask), NULL);
 80004fe:	463b      	mov	r3, r7
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f002 ff64 	bl	80033d0 <osThreadCreate>
 8000508:	4603      	mov	r3, r0
 800050a:	4a08      	ldr	r2, [pc, #32]	@ (800052c <main+0x90>)
 800050c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800050e:	f002 ff58 	bl	80033c2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000512:	bf00      	nop
 8000514:	e7fd      	b.n	8000512 <main+0x76>
 8000516:	bf00      	nop
 8000518:	20000378 	.word	0x20000378
 800051c:	08005928 	.word	0x08005928
 8000520:	0800594c 	.word	0x0800594c
 8000524:	200003c0 	.word	0x200003c0
 8000528:	08005978 	.word	0x08005978
 800052c:	200003c4 	.word	0x200003c4

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b092      	sub	sp, #72	@ 0x48
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2234      	movs	r2, #52	@ 0x34
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 fbfa 	bl	8004d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <SystemClock_Config+0x98>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800055a:	4a1b      	ldr	r2, [pc, #108]	@ (80005c8 <SystemClock_Config+0x98>)
 800055c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000560:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000562:	2302      	movs	r3, #2
 8000564:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000566:	2301      	movs	r3, #1
 8000568:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	2310      	movs	r3, #16
 800056c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000572:	2300      	movs	r3, #0
 8000574:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000576:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800057a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800057c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000580:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4618      	mov	r0, r3
 8000588:	f000 ffc8 	bl	800151c <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000592:	f000 f98f 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2303      	movs	r3, #3
 800059c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005aa:	463b      	mov	r3, r7
 80005ac:	2101      	movs	r1, #1
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fae4 	bl	8001b7c <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ba:	f000 f97b 	bl	80008b4 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3748      	adds	r7, #72	@ 0x48
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <MX_CRC_Init+0x20>)
 80005d2:	4a07      	ldr	r2, [pc, #28]	@ (80005f0 <MX_CRC_Init+0x24>)
 80005d4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005d6:	4805      	ldr	r0, [pc, #20]	@ (80005ec <MX_CRC_Init+0x20>)
 80005d8:	f000 fd2b 	bl	8001032 <HAL_CRC_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005e2:	f000 f967 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000328 	.word	0x20000328
 80005f0:	40023000 	.word	0x40023000

080005f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <MX_USART1_UART_Init+0x50>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005fe:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 8000600:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000604:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 800062c:	f001 ffa6 	bl	800257c <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000636:	f000 f93d 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000330 	.word	0x20000330
 8000644:	40013800 	.word	0x40013800

08000648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800064c:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 800064e:	4a12      	ldr	r2, [pc, #72]	@ (8000698 <MX_USART2_UART_Init+0x50>)
 8000650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000652:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 8000680:	f001 ff7c 	bl	800257c <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800068a:	f000 f913 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000378 	.word	0x20000378
 8000698:	40004400 	.word	0x40004400

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	@ 0x28
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	4b2e      	ldr	r3, [pc, #184]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a2d      	ldr	r2, [pc, #180]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	61d3      	str	r3, [r2, #28]
 80006be:	4b2b      	ldr	r3, [pc, #172]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ca:	4b28      	ldr	r3, [pc, #160]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	4a27      	ldr	r2, [pc, #156]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006d0:	f043 0320 	orr.w	r3, r3, #32
 80006d4:	61d3      	str	r3, [r2, #28]
 80006d6:	4b25      	ldr	r3, [pc, #148]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	f003 0320 	and.w	r3, r3, #32
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b22      	ldr	r3, [pc, #136]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a21      	ldr	r2, [pc, #132]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	4a1b      	ldr	r2, [pc, #108]	@ (800076c <MX_GPIO_Init+0xd0>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	61d3      	str	r3, [r2, #28]
 8000706:	4b19      	ldr	r3, [pc, #100]	@ (800076c <MX_GPIO_Init+0xd0>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	4816      	ldr	r0, [pc, #88]	@ (8000770 <MX_GPIO_Init+0xd4>)
 8000718:	f000 feb6 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800071c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000722:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	4810      	ldr	r0, [pc, #64]	@ (8000774 <MX_GPIO_Init+0xd8>)
 8000734:	f000 fd18 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000738:	2320      	movs	r3, #32
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4808      	ldr	r0, [pc, #32]	@ (8000770 <MX_GPIO_Init+0xd4>)
 8000750:	f000 fd0a 	bl	8001168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2105      	movs	r1, #5
 8000758:	2028      	movs	r0, #40	@ 0x28
 800075a:	f000 fc40 	bl	8000fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800075e:	2028      	movs	r0, #40	@ 0x28
 8000760:	f000 fc59 	bl	8001016 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	@ 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40020000 	.word	0x40020000
 8000774:	40020800 	.word	0x40020800

08000778 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000788:	d107      	bne.n	800079a <HAL_GPIO_EXTI_Callback+0x22>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800078a:	2120      	movs	r1, #32
 800078c:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <HAL_GPIO_EXTI_Callback+0x2c>)
 800078e:	f000 fe93 	bl	80014b8 <HAL_GPIO_TogglePin>
	  printf("L152: Woop woop woop \r\n");
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <HAL_GPIO_EXTI_Callback+0x30>)
 8000794:	f004 f93c 	bl	8004a10 <puts>
  } else {
      __NOP();
  }
}
 8000798:	e000      	b.n	800079c <HAL_GPIO_EXTI_Callback+0x24>
      __NOP();
 800079a:	bf00      	nop
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40020000 	.word	0x40020000
 80007a8:	08005994 	.word	0x08005994

080007ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007b4:	2120      	movs	r1, #32
 80007b6:	4804      	ldr	r0, [pc, #16]	@ (80007c8 <StartDefaultTask+0x1c>)
 80007b8:	f000 fe7e 	bl	80014b8 <HAL_GPIO_TogglePin>
	  osDelay(200);
 80007bc:	20c8      	movs	r0, #200	@ 0xc8
 80007be:	f002 fe53 	bl	8003468 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007c2:	bf00      	nop
 80007c4:	e7f6      	b.n	80007b4 <StartDefaultTask+0x8>
 80007c6:	bf00      	nop
 80007c8:	40020000 	.word	0x40020000

080007cc <StartCheckUpdateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCheckUpdateTask */
void StartCheckUpdateTask(void const * argument)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCheckUpdateTask */
  /* Infinite loop */
  for(;;){
	printf("L152: Starting check of update \r\n");
 80007d4:	4827      	ldr	r0, [pc, #156]	@ (8000874 <StartCheckUpdateTask+0xa8>)
 80007d6:	f004 f91b 	bl	8004a10 <puts>
	uint8_t rxBuff[6];
	if(HAL_UART_Receive(&huart1, rxBuff, 6, 1000)==HAL_OK) //if transfer is successful
 80007da:	f107 010c 	add.w	r1, r7, #12
 80007de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007e2:	2206      	movs	r2, #6
 80007e4:	4824      	ldr	r0, [pc, #144]	@ (8000878 <StartCheckUpdateTask+0xac>)
 80007e6:	f001 ff9c 	bl	8002722 <HAL_UART_Receive>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d139      	bne.n	8000864 <StartCheckUpdateTask+0x98>
	  {
	    printf("Received: \r\n");
 80007f0:	4822      	ldr	r0, [pc, #136]	@ (800087c <StartCheckUpdateTask+0xb0>)
 80007f2:	f004 f90d 	bl	8004a10 <puts>
	    uint8_t sum = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	75fb      	strb	r3, [r7, #23]
	    for(uint8_t i = 0; i<5; i++){
 80007fa:	2300      	movs	r3, #0
 80007fc:	75bb      	strb	r3, [r7, #22]
 80007fe:	e00a      	b.n	8000816 <StartCheckUpdateTask+0x4a>
	    	sum += rxBuff[i];
 8000800:	7dbb      	ldrb	r3, [r7, #22]
 8000802:	3318      	adds	r3, #24
 8000804:	443b      	add	r3, r7
 8000806:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800080a:	7dfb      	ldrb	r3, [r7, #23]
 800080c:	4413      	add	r3, r2
 800080e:	75fb      	strb	r3, [r7, #23]
	    for(uint8_t i = 0; i<5; i++){
 8000810:	7dbb      	ldrb	r3, [r7, #22]
 8000812:	3301      	adds	r3, #1
 8000814:	75bb      	strb	r3, [r7, #22]
 8000816:	7dbb      	ldrb	r3, [r7, #22]
 8000818:	2b04      	cmp	r3, #4
 800081a:	d9f1      	bls.n	8000800 <StartCheckUpdateTask+0x34>
	    }
	    // Debug info
	    for(uint8_t i = 0; i<6; i++){
 800081c:	2300      	movs	r3, #0
 800081e:	757b      	strb	r3, [r7, #21]
 8000820:	e00b      	b.n	800083a <StartCheckUpdateTask+0x6e>
	    	printf("%d", rxBuff[i]);
 8000822:	7d7b      	ldrb	r3, [r7, #21]
 8000824:	3318      	adds	r3, #24
 8000826:	443b      	add	r3, r7
 8000828:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800082c:	4619      	mov	r1, r3
 800082e:	4814      	ldr	r0, [pc, #80]	@ (8000880 <StartCheckUpdateTask+0xb4>)
 8000830:	f004 f886 	bl	8004940 <iprintf>
	    for(uint8_t i = 0; i<6; i++){
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	3301      	adds	r3, #1
 8000838:	757b      	strb	r3, [r7, #21]
 800083a:	7d7b      	ldrb	r3, [r7, #21]
 800083c:	2b05      	cmp	r3, #5
 800083e:	d9f0      	bls.n	8000822 <StartCheckUpdateTask+0x56>
	    	//sscanf(input[i], "%d", data[i]);
	    }
	    printf("\r\n");
 8000840:	4810      	ldr	r0, [pc, #64]	@ (8000884 <StartCheckUpdateTask+0xb8>)
 8000842:	f004 f8e5 	bl	8004a10 <puts>

	    // Simple checksum
	    if(sum = rxBuff[5]) {
 8000846:	7c7b      	ldrb	r3, [r7, #17]
 8000848:	75fb      	strb	r3, [r7, #23]
 800084a:	7dfb      	ldrb	r3, [r7, #23]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d004      	beq.n	800085a <StartCheckUpdateTask+0x8e>
	    	printf("Other processor status is good. Version: %d \r\n", rxBuff[4]);
 8000850:	7c3b      	ldrb	r3, [r7, #16]
 8000852:	4619      	mov	r1, r3
 8000854:	480c      	ldr	r0, [pc, #48]	@ (8000888 <StartCheckUpdateTask+0xbc>)
 8000856:	f004 f873 	bl	8004940 <iprintf>
	    }
	    osDelay(10000);
 800085a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800085e:	f002 fe03 	bl	8003468 <osDelay>
 8000862:	e002      	b.n	800086a <StartCheckUpdateTask+0x9e>
	  } else {
	    printf("Nothing received \r\n");
 8000864:	4809      	ldr	r0, [pc, #36]	@ (800088c <StartCheckUpdateTask+0xc0>)
 8000866:	f004 f8d3 	bl	8004a10 <puts>
	  }
    osDelay(1);
 800086a:	2001      	movs	r0, #1
 800086c:	f002 fdfc 	bl	8003468 <osDelay>
  for(;;){
 8000870:	e7b0      	b.n	80007d4 <StartCheckUpdateTask+0x8>
 8000872:	bf00      	nop
 8000874:	080059ac 	.word	0x080059ac
 8000878:	20000330 	.word	0x20000330
 800087c:	080059d0 	.word	0x080059d0
 8000880:	080059dc 	.word	0x080059dc
 8000884:	080059e0 	.word	0x080059e0
 8000888:	080059e4 	.word	0x080059e4
 800088c:	08005a14 	.word	0x08005a14

08000890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a04      	ldr	r2, [pc, #16]	@ (80008b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d101      	bne.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a2:	f000 facb 	bl	8000e3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40000c00 	.word	0x40000c00

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <Error_Handler+0x8>

080008c0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80008c8:	4a07      	ldr	r2, [pc, #28]	@ (80008e8 <RetargetInit+0x28>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80008ce:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <RetargetInit+0x2c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	6898      	ldr	r0, [r3, #8]
 80008d4:	2300      	movs	r3, #0
 80008d6:	2202      	movs	r2, #2
 80008d8:	2100      	movs	r1, #0
 80008da:	f004 f8a1 	bl	8004a20 <setvbuf>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200003c8 	.word	0x200003c8
 80008ec:	2000001c 	.word	0x2000001c

080008f0 <_isatty>:

int _isatty(int fd) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	db04      	blt.n	8000908 <_isatty+0x18>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b02      	cmp	r3, #2
 8000902:	dc01      	bgt.n	8000908 <_isatty+0x18>
    return 1;
 8000904:	2301      	movs	r3, #1
 8000906:	e005      	b.n	8000914 <_isatty+0x24>

  errno = EBADF;
 8000908:	f004 faba 	bl	8004e80 <__errno>
 800090c:	4603      	mov	r3, r0
 800090e:	2209      	movs	r2, #9
 8000910:	601a      	str	r2, [r3, #0]
  return 0;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <_write>:

int _write(int fd, char* ptr, int len) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d002      	beq.n	8000934 <_write+0x18>
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b02      	cmp	r3, #2
 8000932:	d111      	bne.n	8000958 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000934:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <_write+0x54>)
 8000936:	6818      	ldr	r0, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	b29a      	uxth	r2, r3
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	f001 fe6b 	bl	800261c <HAL_UART_Transmit>
 8000946:	4603      	mov	r3, r0
 8000948:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800094a:	7dfb      	ldrb	r3, [r7, #23]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d101      	bne.n	8000954 <_write+0x38>
      return len;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	e008      	b.n	8000966 <_write+0x4a>
    else
      return EIO;
 8000954:	2305      	movs	r3, #5
 8000956:	e006      	b.n	8000966 <_write+0x4a>
  }
  errno = EBADF;
 8000958:	f004 fa92 	bl	8004e80 <__errno>
 800095c:	4603      	mov	r3, r0
 800095e:	2209      	movs	r2, #9
 8000960:	601a      	str	r2, [r3, #0]
  return -1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000966:	4618      	mov	r0, r3
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200003c8 	.word	0x200003c8

08000974 <_close>:

int _close(int fd) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	db04      	blt.n	800098c <_close+0x18>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b02      	cmp	r3, #2
 8000986:	dc01      	bgt.n	800098c <_close+0x18>
    return 0;
 8000988:	2300      	movs	r3, #0
 800098a:	e006      	b.n	800099a <_close+0x26>

  errno = EBADF;
 800098c:	f004 fa78 	bl	8004e80 <__errno>
 8000990:	4603      	mov	r3, r0
 8000992:	2209      	movs	r2, #9
 8000994:	601a      	str	r2, [r3, #0]
  return -1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b084      	sub	sp, #16
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80009ae:	f004 fa67 	bl	8004e80 <__errno>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2209      	movs	r2, #9
 80009b6:	601a      	str	r2, [r3, #0]
  return -1;
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <_read>:

int _read(int fd, char* ptr, int len) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d110      	bne.n	80009f8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <_read+0x4c>)
 80009d8:	6818      	ldr	r0, [r3, #0]
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	2201      	movs	r2, #1
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	f001 fe9e 	bl	8002722 <HAL_UART_Receive>
 80009e6:	4603      	mov	r3, r0
 80009e8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80009ea:	7dfb      	ldrb	r3, [r7, #23]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d101      	bne.n	80009f4 <_read+0x30>
      return 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	e008      	b.n	8000a06 <_read+0x42>
    else
      return EIO;
 80009f4:	2305      	movs	r3, #5
 80009f6:	e006      	b.n	8000a06 <_read+0x42>
  }
  errno = EBADF;
 80009f8:	f004 fa42 	bl	8004e80 <__errno>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2209      	movs	r2, #9
 8000a00:	601a      	str	r2, [r3, #0]
  return -1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200003c8 	.word	0x200003c8

08000a14 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db08      	blt.n	8000a36 <_fstat+0x22>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	dc05      	bgt.n	8000a36 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a30:	605a      	str	r2, [r3, #4]
    return 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e005      	b.n	8000a42 <_fstat+0x2e>
  }

  errno = EBADF;
 8000a36:	f004 fa23 	bl	8004e80 <__errno>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2209      	movs	r2, #9
 8000a3e:	601a      	str	r2, [r3, #0]
  return 0;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000a52:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <HAL_MspInit+0x64>)
 8000a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a56:	4a16      	ldr	r2, [pc, #88]	@ (8000ab0 <HAL_MspInit+0x64>)
 8000a58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5c:	6253      	str	r3, [r2, #36]	@ 0x24
 8000a5e:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <HAL_MspInit+0x64>)
 8000a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <HAL_MspInit+0x64>)
 8000a6c:	6a1b      	ldr	r3, [r3, #32]
 8000a6e:	4a10      	ldr	r2, [pc, #64]	@ (8000ab0 <HAL_MspInit+0x64>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6213      	str	r3, [r2, #32]
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <HAL_MspInit+0x64>)
 8000a78:	6a1b      	ldr	r3, [r3, #32]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <HAL_MspInit+0x64>)
 8000a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a86:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <HAL_MspInit+0x64>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8c:	6253      	str	r3, [r2, #36]	@ 0x24
 8000a8e:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <HAL_MspInit+0x64>)
 8000a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	f06f 0001 	mvn.w	r0, #1
 8000aa2:	f000 fa9c 	bl	8000fde <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a09      	ldr	r2, [pc, #36]	@ (8000ae8 <HAL_CRC_MspInit+0x34>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d10b      	bne.n	8000ade <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_CRC_MspInit+0x38>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	4a08      	ldr	r2, [pc, #32]	@ (8000aec <HAL_CRC_MspInit+0x38>)
 8000acc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ad0:	61d3      	str	r3, [r2, #28]
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_CRC_MspInit+0x38>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	40023000 	.word	0x40023000
 8000aec:	40023800 	.word	0x40023800

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	@ 0x30
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a32      	ldr	r2, [pc, #200]	@ (8000bd8 <HAL_UART_MspInit+0xe8>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d131      	bne.n	8000b76 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b12:	4b32      	ldr	r3, [pc, #200]	@ (8000bdc <HAL_UART_MspInit+0xec>)
 8000b14:	6a1b      	ldr	r3, [r3, #32]
 8000b16:	4a31      	ldr	r2, [pc, #196]	@ (8000bdc <HAL_UART_MspInit+0xec>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b1c:	6213      	str	r3, [r2, #32]
 8000b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000bdc <HAL_UART_MspInit+0xec>)
 8000b20:	6a1b      	ldr	r3, [r3, #32]
 8000b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b26:	61bb      	str	r3, [r7, #24]
 8000b28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bdc <HAL_UART_MspInit+0xec>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a2b      	ldr	r2, [pc, #172]	@ (8000bdc <HAL_UART_MspInit+0xec>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	4b29      	ldr	r3, [pc, #164]	@ (8000bdc <HAL_UART_MspInit+0xec>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b42:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b50:	2301      	movs	r3, #1
 8000b52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b54:	2307      	movs	r3, #7
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4820      	ldr	r0, [pc, #128]	@ (8000be0 <HAL_UART_MspInit+0xf0>)
 8000b60:	f000 fb02 	bl	8001168 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2105      	movs	r1, #5
 8000b68:	2025      	movs	r0, #37	@ 0x25
 8000b6a:	f000 fa38 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b6e:	2025      	movs	r0, #37	@ 0x25
 8000b70:	f000 fa51 	bl	8001016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b74:	e02c      	b.n	8000bd0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8000be4 <HAL_UART_MspInit+0xf4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d127      	bne.n	8000bd0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <HAL_UART_MspInit+0xec>)
 8000b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b84:	4a15      	ldr	r2, [pc, #84]	@ (8000bdc <HAL_UART_MspInit+0xec>)
 8000b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8a:	6253      	str	r3, [r2, #36]	@ 0x24
 8000b8c:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <HAL_UART_MspInit+0xec>)
 8000b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <HAL_UART_MspInit+0xec>)
 8000b9a:	69db      	ldr	r3, [r3, #28]
 8000b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8000bdc <HAL_UART_MspInit+0xec>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	61d3      	str	r3, [r2, #28]
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <HAL_UART_MspInit+0xec>)
 8000ba6:	69db      	ldr	r3, [r3, #28]
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <HAL_UART_MspInit+0xf0>)
 8000bcc:	f000 facc 	bl	8001168 <HAL_GPIO_Init>
}
 8000bd0:	bf00      	nop
 8000bd2:	3730      	adds	r7, #48	@ 0x30
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40013800 	.word	0x40013800
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40004400 	.word	0x40004400

08000be8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	@ 0x38
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000bfe:	4b32      	ldr	r3, [pc, #200]	@ (8000cc8 <HAL_InitTick+0xe0>)
 8000c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c02:	4a31      	ldr	r2, [pc, #196]	@ (8000cc8 <HAL_InitTick+0xe0>)
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	6253      	str	r3, [r2, #36]	@ 0x24
 8000c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc8 <HAL_InitTick+0xe0>)
 8000c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c16:	f107 0210 	add.w	r2, r7, #16
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fa11 	bl	8002048 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d103      	bne.n	8000c38 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c30:	f001 f9e2 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8000c34:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c36:	e004      	b.n	8000c42 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c38:	f001 f9de 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c44:	4a21      	ldr	r2, [pc, #132]	@ (8000ccc <HAL_InitTick+0xe4>)
 8000c46:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4a:	0c9b      	lsrs	r3, r3, #18
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <HAL_InitTick+0xe8>)
 8000c52:	4a20      	ldr	r2, [pc, #128]	@ (8000cd4 <HAL_InitTick+0xec>)
 8000c54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <HAL_InitTick+0xe8>)
 8000c58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c5c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd0 <HAL_InitTick+0xe8>)
 8000c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c62:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <HAL_InitTick+0xe8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <HAL_InitTick+0xe8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim5);
 8000c70:	4817      	ldr	r0, [pc, #92]	@ (8000cd0 <HAL_InitTick+0xe8>)
 8000c72:	f001 fa79 	bl	8002168 <HAL_TIM_Base_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d11b      	bne.n	8000cbc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000c84:	4812      	ldr	r0, [pc, #72]	@ (8000cd0 <HAL_InitTick+0xe8>)
 8000c86:	f001 fab7 	bl	80021f8 <HAL_TIM_Base_Start_IT>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d111      	bne.n	8000cbc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000c98:	202e      	movs	r0, #46	@ 0x2e
 8000c9a:	f000 f9bc 	bl	8001016 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d808      	bhi.n	8000cb6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	202e      	movs	r0, #46	@ 0x2e
 8000caa:	f000 f998 	bl	8000fde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <HAL_InitTick+0xf0>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	e002      	b.n	8000cbc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3738      	adds	r7, #56	@ 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	431bde83 	.word	0x431bde83
 8000cd0:	200003cc 	.word	0x200003cc
 8000cd4:	40000c00 	.word	0x40000c00
 8000cd8:	20000004 	.word	0x20000004

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d14:	4802      	ldr	r0, [pc, #8]	@ (8000d20 <USART1_IRQHandler+0x10>)
 8000d16:	f001 fd97 	bl	8002848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000330 	.word	0x20000330

08000d24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d28:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d2c:	f000 fbde 	bl	80014ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <TIM5_IRQHandler+0x10>)
 8000d3a:	f001 faaf 	bl	800229c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200003cc 	.word	0x200003cc

08000d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d50:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <_sbrk+0x5c>)
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <_sbrk+0x60>)
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d64:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <_sbrk+0x64>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	@ (8000db0 <_sbrk+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d207      	bcs.n	8000d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d78:	f004 f882 	bl	8004e80 <__errno>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	220c      	movs	r2, #12
 8000d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	e009      	b.n	8000d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a05      	ldr	r2, [pc, #20]	@ (8000dac <_sbrk+0x64>)
 8000d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20014000 	.word	0x20014000
 8000da8:	00000400 	.word	0x00000400
 8000dac:	2000040c 	.word	0x2000040c
 8000db0:	200012b0 	.word	0x200012b0

08000db4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc0:	f7ff fff8 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480b      	ldr	r0, [pc, #44]	@ (8000df4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dc6:	490c      	ldr	r1, [pc, #48]	@ (8000df8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000dfc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a09      	ldr	r2, [pc, #36]	@ (8000e00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ddc:	4c09      	ldr	r4, [pc, #36]	@ (8000e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dea:	f004 f84f 	bl	8004e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dee:	f7ff fb55 	bl	800049c <main>
  bx lr
 8000df2:	4770      	bx	lr
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000dfc:	08005a98 	.word	0x08005a98
  ldr r2, =_sbss
 8000e00:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e04:	200012ac 	.word	0x200012ac

08000e08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC1_IRQHandler>

08000e0a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f8d7 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1a:	200f      	movs	r0, #15
 8000e1c:	f7ff fee4 	bl	8000be8 <HAL_InitTick>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d002      	beq.n	8000e2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	e001      	b.n	8000e30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e2c:	f7ff fe0e 	bl	8000a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e30:	79fb      	ldrb	r3, [r7, #7]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <HAL_IncTick+0x1c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_IncTick+0x20>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a03      	ldr	r2, [pc, #12]	@ (8000e58 <HAL_IncTick+0x1c>)
 8000e4c:	6013      	str	r3, [r2, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000410 	.word	0x20000410
 8000e5c:	20000008 	.word	0x20000008

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b02      	ldr	r3, [pc, #8]	@ (8000e70 <HAL_GetTick+0x10>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	20000410 	.word	0x20000410

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4906      	ldr	r1, [pc, #24]	@ (8000f0c <__NVIC_EnableIRQ+0x34>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	@ (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	@ (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	@ 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
         );
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff4f 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff64 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ffb2 	bl	8000f64 <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff81 	bl	8000f10 <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff57 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d101      	bne.n	8001044 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e00e      	b.n	8001062 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	795b      	ldrb	r3, [r3, #5]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d105      	bne.n	800105a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff fd2d 	bl	8000ab4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800106a:	b480      	push	{r7}
 800106c:	b085      	sub	sp, #20
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d008      	beq.n	8001094 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2204      	movs	r2, #4
 8001086:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e022      	b.n	80010da <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 020e 	bic.w	r2, r2, #14
 80010a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0201 	bic.w	r2, r2, #1
 80010b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b8:	f003 021c 	and.w	r2, r3, #28
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010c0:	2101      	movs	r1, #1
 80010c2:	fa01 f202 	lsl.w	r2, r1, r2
 80010c6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d005      	beq.n	8001108 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2204      	movs	r2, #4
 8001100:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e029      	b.n	800115c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 020e 	bic.w	r2, r2, #14
 8001116:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0201 	bic.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	f003 021c 	and.w	r2, r3, #28
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001134:	2101      	movs	r1, #1
 8001136:	fa01 f202 	lsl.w	r2, r1, r2
 800113a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	4798      	blx	r3
    }
  }
  return status;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800117e:	e160      	b.n	8001442 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	2101      	movs	r1, #1
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	4013      	ands	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 8152 	beq.w	800143c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d005      	beq.n	80011b0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d130      	bne.n	8001212 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80011e6:	2201      	movs	r2, #1
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	f003 0201 	and.w	r2, r3, #1
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b03      	cmp	r3, #3
 800121c:	d017      	beq.n	800124e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	2203      	movs	r2, #3
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d123      	bne.n	80012a2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001266:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	220f      	movs	r2, #15
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	691a      	ldr	r2, [r3, #16]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	08da      	lsrs	r2, r3, #3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	6939      	ldr	r1, [r7, #16]
 800129e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	2203      	movs	r2, #3
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0203 	and.w	r2, r3, #3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 80ac 	beq.w	800143c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001460 <HAL_GPIO_Init+0x2f8>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4a5d      	ldr	r2, [pc, #372]	@ (8001460 <HAL_GPIO_Init+0x2f8>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6213      	str	r3, [r2, #32]
 80012f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001460 <HAL_GPIO_Init+0x2f8>)
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80012fc:	4a59      	ldr	r2, [pc, #356]	@ (8001464 <HAL_GPIO_Init+0x2fc>)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001308:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	220f      	movs	r2, #15
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a51      	ldr	r2, [pc, #324]	@ (8001468 <HAL_GPIO_Init+0x300>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d025      	beq.n	8001374 <HAL_GPIO_Init+0x20c>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a50      	ldr	r2, [pc, #320]	@ (800146c <HAL_GPIO_Init+0x304>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d01f      	beq.n	8001370 <HAL_GPIO_Init+0x208>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a4f      	ldr	r2, [pc, #316]	@ (8001470 <HAL_GPIO_Init+0x308>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d019      	beq.n	800136c <HAL_GPIO_Init+0x204>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a4e      	ldr	r2, [pc, #312]	@ (8001474 <HAL_GPIO_Init+0x30c>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d013      	beq.n	8001368 <HAL_GPIO_Init+0x200>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a4d      	ldr	r2, [pc, #308]	@ (8001478 <HAL_GPIO_Init+0x310>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d00d      	beq.n	8001364 <HAL_GPIO_Init+0x1fc>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a4c      	ldr	r2, [pc, #304]	@ (800147c <HAL_GPIO_Init+0x314>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d007      	beq.n	8001360 <HAL_GPIO_Init+0x1f8>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a4b      	ldr	r2, [pc, #300]	@ (8001480 <HAL_GPIO_Init+0x318>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d101      	bne.n	800135c <HAL_GPIO_Init+0x1f4>
 8001358:	2306      	movs	r3, #6
 800135a:	e00c      	b.n	8001376 <HAL_GPIO_Init+0x20e>
 800135c:	2307      	movs	r3, #7
 800135e:	e00a      	b.n	8001376 <HAL_GPIO_Init+0x20e>
 8001360:	2305      	movs	r3, #5
 8001362:	e008      	b.n	8001376 <HAL_GPIO_Init+0x20e>
 8001364:	2304      	movs	r3, #4
 8001366:	e006      	b.n	8001376 <HAL_GPIO_Init+0x20e>
 8001368:	2303      	movs	r3, #3
 800136a:	e004      	b.n	8001376 <HAL_GPIO_Init+0x20e>
 800136c:	2302      	movs	r3, #2
 800136e:	e002      	b.n	8001376 <HAL_GPIO_Init+0x20e>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <HAL_GPIO_Init+0x20e>
 8001374:	2300      	movs	r3, #0
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	f002 0203 	and.w	r2, r2, #3
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	4093      	lsls	r3, r2
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001386:	4937      	ldr	r1, [pc, #220]	@ (8001464 <HAL_GPIO_Init+0x2fc>)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001394:	4b3b      	ldr	r3, [pc, #236]	@ (8001484 <HAL_GPIO_Init+0x31c>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013b8:	4a32      	ldr	r2, [pc, #200]	@ (8001484 <HAL_GPIO_Init+0x31c>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013be:	4b31      	ldr	r3, [pc, #196]	@ (8001484 <HAL_GPIO_Init+0x31c>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013e2:	4a28      	ldr	r2, [pc, #160]	@ (8001484 <HAL_GPIO_Init+0x31c>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013e8:	4b26      	ldr	r3, [pc, #152]	@ (8001484 <HAL_GPIO_Init+0x31c>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800140c:	4a1d      	ldr	r2, [pc, #116]	@ (8001484 <HAL_GPIO_Init+0x31c>)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001412:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <HAL_GPIO_Init+0x31c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001436:	4a13      	ldr	r2, [pc, #76]	@ (8001484 <HAL_GPIO_Init+0x31c>)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3301      	adds	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	f47f ae97 	bne.w	8001180 <HAL_GPIO_Init+0x18>
  }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40010000 	.word	0x40010000
 8001468:	40020000 	.word	0x40020000
 800146c:	40020400 	.word	0x40020400
 8001470:	40020800 	.word	0x40020800
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021000 	.word	0x40021000
 800147c:	40021400 	.word	0x40021400
 8001480:	40021800 	.word	0x40021800
 8001484:	40010400 	.word	0x40010400

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80014a4:	e003      	b.n	80014ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	619a      	str	r2, [r3, #24]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014ca:	887a      	ldrh	r2, [r7, #2]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4013      	ands	r3, r2
 80014d0:	041a      	lsls	r2, r3, #16
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	43d9      	mvns	r1, r3
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	400b      	ands	r3, r1
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	619a      	str	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
	...

080014ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014f6:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d006      	beq.n	8001510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001502:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f934 	bl	8000778 <HAL_GPIO_EXTI_Callback>
  }
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40010400 	.word	0x40010400

0800151c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e31d      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800152e:	4b94      	ldr	r3, [pc, #592]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001538:	4b91      	ldr	r3, [pc, #580]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001540:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d07b      	beq.n	8001646 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b08      	cmp	r3, #8
 8001552:	d006      	beq.n	8001562 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	2b0c      	cmp	r3, #12
 8001558:	d10f      	bne.n	800157a <HAL_RCC_OscConfig+0x5e>
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001560:	d10b      	bne.n	800157a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001562:	4b87      	ldr	r3, [pc, #540]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d06a      	beq.n	8001644 <HAL_RCC_OscConfig+0x128>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d166      	bne.n	8001644 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e2f7      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x74>
 8001582:	4b7f      	ldr	r3, [pc, #508]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a7e      	ldr	r2, [pc, #504]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e02d      	b.n	80015ec <HAL_RCC_OscConfig+0xd0>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10c      	bne.n	80015b2 <HAL_RCC_OscConfig+0x96>
 8001598:	4b79      	ldr	r3, [pc, #484]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a78      	ldr	r2, [pc, #480]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 800159e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b76      	ldr	r3, [pc, #472]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a75      	ldr	r2, [pc, #468]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 80015aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	e01c      	b.n	80015ec <HAL_RCC_OscConfig+0xd0>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0xb8>
 80015ba:	4b71      	ldr	r3, [pc, #452]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a70      	ldr	r2, [pc, #448]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 80015c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b6e      	ldr	r3, [pc, #440]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a6d      	ldr	r2, [pc, #436]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0xd0>
 80015d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a69      	ldr	r2, [pc, #420]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 80015da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b67      	ldr	r3, [pc, #412]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a66      	ldr	r2, [pc, #408]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 80015e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc34 	bl	8000e60 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fc30 	bl	8000e60 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	@ 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e2ad      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800160e:	4b5c      	ldr	r3, [pc, #368]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0xe0>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fc20 	bl	8000e60 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fc1c 	bl	8000e60 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	@ 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e299      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001636:	4b52      	ldr	r3, [pc, #328]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x108>
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d05a      	beq.n	8001708 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b04      	cmp	r3, #4
 8001656:	d005      	beq.n	8001664 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2b0c      	cmp	r3, #12
 800165c:	d119      	bne.n	8001692 <HAL_RCC_OscConfig+0x176>
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d116      	bne.n	8001692 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001664:	4b46      	ldr	r3, [pc, #280]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_OscConfig+0x160>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d001      	beq.n	800167c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e276      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167c:	4b40      	ldr	r3, [pc, #256]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	493d      	ldr	r1, [pc, #244]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001690:	e03a      	b.n	8001708 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d020      	beq.n	80016dc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800169a:	4b3a      	ldr	r3, [pc, #232]	@ (8001784 <HAL_RCC_OscConfig+0x268>)
 800169c:	2201      	movs	r2, #1
 800169e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fbde 	bl	8000e60 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016a8:	f7ff fbda 	bl	8000e60 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e257      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ba:	4b31      	ldr	r3, [pc, #196]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	492a      	ldr	r1, [pc, #168]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
 80016da:	e015      	b.n	8001708 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016dc:	4b29      	ldr	r3, [pc, #164]	@ (8001784 <HAL_RCC_OscConfig+0x268>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fbbd 	bl	8000e60 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ea:	f7ff fbb9 	bl	8000e60 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e236      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016fc:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 80b8 	beq.w	8001886 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d170      	bne.n	80017fe <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800171c:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_OscConfig+0x218>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e21a      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1a      	ldr	r2, [r3, #32]
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001740:	429a      	cmp	r2, r3
 8001742:	d921      	bls.n	8001788 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fcad 	bl	80020a8 <RCC_SetFlashLatencyFromMSIRange>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e208      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4906      	ldr	r1, [pc, #24]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 8001766:	4313      	orrs	r3, r2
 8001768:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800176a:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	061b      	lsls	r3, r3, #24
 8001778:	4901      	ldr	r1, [pc, #4]	@ (8001780 <HAL_RCC_OscConfig+0x264>)
 800177a:	4313      	orrs	r3, r2
 800177c:	604b      	str	r3, [r1, #4]
 800177e:	e020      	b.n	80017c2 <HAL_RCC_OscConfig+0x2a6>
 8001780:	40023800 	.word	0x40023800
 8001784:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001788:	4b99      	ldr	r3, [pc, #612]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4996      	ldr	r1, [pc, #600]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800179a:	4b95      	ldr	r3, [pc, #596]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	061b      	lsls	r3, r3, #24
 80017a8:	4991      	ldr	r1, [pc, #580]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 fc78 	bl	80020a8 <RCC_SetFlashLatencyFromMSIRange>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e1d3      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	0b5b      	lsrs	r3, r3, #13
 80017c8:	3301      	adds	r3, #1
 80017ca:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80017d2:	4a87      	ldr	r2, [pc, #540]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 80017d4:	6892      	ldr	r2, [r2, #8]
 80017d6:	0912      	lsrs	r2, r2, #4
 80017d8:	f002 020f 	and.w	r2, r2, #15
 80017dc:	4985      	ldr	r1, [pc, #532]	@ (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 80017de:	5c8a      	ldrb	r2, [r1, r2]
 80017e0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017e2:	4a85      	ldr	r2, [pc, #532]	@ (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 80017e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017e6:	4b85      	ldr	r3, [pc, #532]	@ (80019fc <HAL_RCC_OscConfig+0x4e0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff f9fc 	bl	8000be8 <HAL_InitTick>
 80017f0:	4603      	mov	r3, r0
 80017f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d045      	beq.n	8001886 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	e1b5      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d029      	beq.n	800185a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001806:	4b7e      	ldr	r3, [pc, #504]	@ (8001a00 <HAL_RCC_OscConfig+0x4e4>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fb28 	bl	8000e60 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001814:	f7ff fb24 	bl	8000e60 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e1a1      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001826:	4b72      	ldr	r3, [pc, #456]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001832:	4b6f      	ldr	r3, [pc, #444]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	496c      	ldr	r1, [pc, #432]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001844:	4b6a      	ldr	r3, [pc, #424]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	061b      	lsls	r3, r3, #24
 8001852:	4967      	ldr	r1, [pc, #412]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800185a:	4b69      	ldr	r3, [pc, #420]	@ (8001a00 <HAL_RCC_OscConfig+0x4e4>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fafe 	bl	8000e60 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001868:	f7ff fafa 	bl	8000e60 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e177      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800187a:	4b5d      	ldr	r3, [pc, #372]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d030      	beq.n	80018f4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d016      	beq.n	80018c8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	4b5a      	ldr	r3, [pc, #360]	@ (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7ff fade 	bl	8000e60 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff fada 	bl	8000e60 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e157      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018ba:	4b4d      	ldr	r3, [pc, #308]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 80018bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x38c>
 80018c6:	e015      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c8:	4b4e      	ldr	r3, [pc, #312]	@ (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ce:	f7ff fac7 	bl	8000e60 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d6:	f7ff fac3 	bl	8000e60 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e140      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018e8:	4b41      	ldr	r3, [pc, #260]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 80018ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f0      	bne.n	80018d6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80b5 	beq.w	8001a6c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001906:	4b3a      	ldr	r3, [pc, #232]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 8001908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10d      	bne.n	800192e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	4b37      	ldr	r3, [pc, #220]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 8001914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001916:	4a36      	ldr	r2, [pc, #216]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800191c:	6253      	str	r3, [r2, #36]	@ 0x24
 800191e:	4b34      	ldr	r3, [pc, #208]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192a:	2301      	movs	r3, #1
 800192c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192e:	4b36      	ldr	r3, [pc, #216]	@ (8001a08 <HAL_RCC_OscConfig+0x4ec>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001936:	2b00      	cmp	r3, #0
 8001938:	d118      	bne.n	800196c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193a:	4b33      	ldr	r3, [pc, #204]	@ (8001a08 <HAL_RCC_OscConfig+0x4ec>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a32      	ldr	r2, [pc, #200]	@ (8001a08 <HAL_RCC_OscConfig+0x4ec>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001946:	f7ff fa8b 	bl	8000e60 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194e:	f7ff fa87 	bl	8000e60 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b64      	cmp	r3, #100	@ 0x64
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e104      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	4b29      	ldr	r3, [pc, #164]	@ (8001a08 <HAL_RCC_OscConfig+0x4ec>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x466>
 8001974:	4b1e      	ldr	r3, [pc, #120]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 8001976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001978:	4a1d      	ldr	r2, [pc, #116]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 800197a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800197e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001980:	e02d      	b.n	80019de <HAL_RCC_OscConfig+0x4c2>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x488>
 800198a:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 800198c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800198e:	4a18      	ldr	r2, [pc, #96]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 8001990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001994:	6353      	str	r3, [r2, #52]	@ 0x34
 8001996:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 8001998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800199a:	4a15      	ldr	r2, [pc, #84]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 800199c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80019a0:	6353      	str	r3, [r2, #52]	@ 0x34
 80019a2:	e01c      	b.n	80019de <HAL_RCC_OscConfig+0x4c2>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d10c      	bne.n	80019c6 <HAL_RCC_OscConfig+0x4aa>
 80019ac:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 80019ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b0:	4a0f      	ldr	r2, [pc, #60]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 80019b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019b6:	6353      	str	r3, [r2, #52]	@ 0x34
 80019b8:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 80019ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019bc:	4a0c      	ldr	r2, [pc, #48]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 80019be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c2:	6353      	str	r3, [r2, #52]	@ 0x34
 80019c4:	e00b      	b.n	80019de <HAL_RCC_OscConfig+0x4c2>
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 80019c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ca:	4a09      	ldr	r2, [pc, #36]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 80019cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019d0:	6353      	str	r3, [r2, #52]	@ 0x34
 80019d2:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 80019d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d6:	4a06      	ldr	r2, [pc, #24]	@ (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 80019d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80019dc:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d024      	beq.n	8001a30 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e6:	f7ff fa3b 	bl	8000e60 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019ec:	e019      	b.n	8001a22 <HAL_RCC_OscConfig+0x506>
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	08005a3c 	.word	0x08005a3c
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000004 	.word	0x20000004
 8001a00:	42470020 	.word	0x42470020
 8001a04:	42470680 	.word	0x42470680
 8001a08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fa28 	bl	8000e60 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e0a3      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a22:	4b54      	ldr	r3, [pc, #336]	@ (8001b74 <HAL_RCC_OscConfig+0x658>)
 8001a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0ee      	beq.n	8001a0c <HAL_RCC_OscConfig+0x4f0>
 8001a2e:	e014      	b.n	8001a5a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a30:	f7ff fa16 	bl	8000e60 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7ff fa12 	bl	8000e60 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e08d      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a4e:	4b49      	ldr	r3, [pc, #292]	@ (8001b74 <HAL_RCC_OscConfig+0x658>)
 8001a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ee      	bne.n	8001a38 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a5a:	7ffb      	ldrb	r3, [r7, #31]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a60:	4b44      	ldr	r3, [pc, #272]	@ (8001b74 <HAL_RCC_OscConfig+0x658>)
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	4a43      	ldr	r2, [pc, #268]	@ (8001b74 <HAL_RCC_OscConfig+0x658>)
 8001a66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d079      	beq.n	8001b68 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d056      	beq.n	8001b28 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d13b      	bne.n	8001afa <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a82:	4b3d      	ldr	r3, [pc, #244]	@ (8001b78 <HAL_RCC_OscConfig+0x65c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff f9ea 	bl	8000e60 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff f9e6 	bl	8000e60 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e063      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001aa2:	4b34      	ldr	r3, [pc, #208]	@ (8001b74 <HAL_RCC_OscConfig+0x658>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aae:	4b31      	ldr	r3, [pc, #196]	@ (8001b74 <HAL_RCC_OscConfig+0x658>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abe:	4319      	orrs	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	492b      	ldr	r1, [pc, #172]	@ (8001b74 <HAL_RCC_OscConfig+0x658>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001acc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b78 <HAL_RCC_OscConfig+0x65c>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff f9c5 	bl	8000e60 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff f9c1 	bl	8000e60 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e03e      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aec:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <HAL_RCC_OscConfig+0x658>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x5be>
 8001af8:	e036      	b.n	8001b68 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b1f      	ldr	r3, [pc, #124]	@ (8001b78 <HAL_RCC_OscConfig+0x65c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff f9ae 	bl	8000e60 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff f9aa 	bl	8000e60 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e027      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b1a:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <HAL_RCC_OscConfig+0x658>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x5ec>
 8001b26:	e01f      	b.n	8001b68 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e01a      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b34:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <HAL_RCC_OscConfig+0x658>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d10d      	bne.n	8001b64 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d106      	bne.n	8001b64 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3720      	adds	r7, #32
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	42470060 	.word	0x42470060

08001b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e11a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b90:	4b8f      	ldr	r3, [pc, #572]	@ (8001dd0 <HAL_RCC_ClockConfig+0x254>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d919      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d105      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x34>
 8001ba4:	4b8a      	ldr	r3, [pc, #552]	@ (8001dd0 <HAL_RCC_ClockConfig+0x254>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a89      	ldr	r2, [pc, #548]	@ (8001dd0 <HAL_RCC_ClockConfig+0x254>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b87      	ldr	r3, [pc, #540]	@ (8001dd0 <HAL_RCC_ClockConfig+0x254>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f023 0201 	bic.w	r2, r3, #1
 8001bb8:	4985      	ldr	r1, [pc, #532]	@ (8001dd0 <HAL_RCC_ClockConfig+0x254>)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc0:	4b83      	ldr	r3, [pc, #524]	@ (8001dd0 <HAL_RCC_ClockConfig+0x254>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0f9      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d008      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bde:	4b7d      	ldr	r3, [pc, #500]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	497a      	ldr	r1, [pc, #488]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 808e 	beq.w	8001d1a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c06:	4b73      	ldr	r3, [pc, #460]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d121      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0d7      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d115      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0cb      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c36:	4b67      	ldr	r3, [pc, #412]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e0bf      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c46:	4b63      	ldr	r3, [pc, #396]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0b7      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c56:	4b5f      	ldr	r3, [pc, #380]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f023 0203 	bic.w	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	495c      	ldr	r1, [pc, #368]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c68:	f7ff f8fa 	bl	8000e60 <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d112      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c78:	f7ff f8f2 	bl	8000e60 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e09b      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c8e:	4b51      	ldr	r3, [pc, #324]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d1ee      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xfc>
 8001c9a:	e03e      	b.n	8001d1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d112      	bne.n	8001cca <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca6:	f7ff f8db 	bl	8000e60 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e084      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cbc:	4b45      	ldr	r3, [pc, #276]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b0c      	cmp	r3, #12
 8001cc6:	d1ee      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0x12a>
 8001cc8:	e027      	b.n	8001d1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d11d      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd4:	f7ff f8c4 	bl	8000e60 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e06d      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cea:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d1ee      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x158>
 8001cf6:	e010      	b.n	8001d1a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7ff f8b2 	bl	8000e60 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e05b      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d0e:	4b31      	ldr	r3, [pc, #196]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1ee      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_RCC_ClockConfig+0x254>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d219      	bcs.n	8001d5c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d105      	bne.n	8001d3a <HAL_RCC_ClockConfig+0x1be>
 8001d2e:	4b28      	ldr	r3, [pc, #160]	@ (8001dd0 <HAL_RCC_ClockConfig+0x254>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a27      	ldr	r2, [pc, #156]	@ (8001dd0 <HAL_RCC_ClockConfig+0x254>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b25      	ldr	r3, [pc, #148]	@ (8001dd0 <HAL_RCC_ClockConfig+0x254>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 0201 	bic.w	r2, r3, #1
 8001d42:	4923      	ldr	r1, [pc, #140]	@ (8001dd0 <HAL_RCC_ClockConfig+0x254>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b21      	ldr	r3, [pc, #132]	@ (8001dd0 <HAL_RCC_ClockConfig+0x254>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e034      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d68:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4917      	ldr	r1, [pc, #92]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d86:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	490f      	ldr	r1, [pc, #60]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d9a:	f000 f823 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <HAL_RCC_ClockConfig+0x258>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	490b      	ldr	r1, [pc, #44]	@ (8001dd8 <HAL_RCC_ClockConfig+0x25c>)
 8001dac:	5ccb      	ldrb	r3, [r1, r3]
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <HAL_RCC_ClockConfig+0x260>)
 8001db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <HAL_RCC_ClockConfig+0x264>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe ff14 	bl	8000be8 <HAL_InitTick>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dc4:	7afb      	ldrb	r3, [r7, #11]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023c00 	.word	0x40023c00
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	08005a3c 	.word	0x08005a3c
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000004 	.word	0x20000004

08001de4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de8:	b092      	sub	sp, #72	@ 0x48
 8001dea:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001dec:	4b79      	ldr	r3, [pc, #484]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	d00d      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x34>
 8001dfc:	2b0c      	cmp	r3, #12
 8001dfe:	f200 80d5 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x1c8>
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d002      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x28>
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d003      	beq.n	8001e12 <HAL_RCC_GetSysClockFreq+0x2e>
 8001e0a:	e0cf      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b72      	ldr	r3, [pc, #456]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001e0e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001e10:	e0da      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e12:	4b72      	ldr	r3, [pc, #456]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001e14:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001e16:	e0d7      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e1a:	0c9b      	lsrs	r3, r3, #18
 8001e1c:	f003 020f 	and.w	r2, r3, #15
 8001e20:	4b6f      	ldr	r3, [pc, #444]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001e22:	5c9b      	ldrb	r3, [r3, r2]
 8001e24:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e28:	0d9b      	lsrs	r3, r3, #22
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e32:	4b68      	ldr	r3, [pc, #416]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d05d      	beq.n	8001efa <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e40:	2200      	movs	r2, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	4611      	mov	r1, r2
 8001e46:	4604      	mov	r4, r0
 8001e48:	460d      	mov	r5, r1
 8001e4a:	4622      	mov	r2, r4
 8001e4c:	462b      	mov	r3, r5
 8001e4e:	f04f 0000 	mov.w	r0, #0
 8001e52:	f04f 0100 	mov.w	r1, #0
 8001e56:	0159      	lsls	r1, r3, #5
 8001e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e5c:	0150      	lsls	r0, r2, #5
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4621      	mov	r1, r4
 8001e64:	1a51      	subs	r1, r2, r1
 8001e66:	6139      	str	r1, [r7, #16]
 8001e68:	4629      	mov	r1, r5
 8001e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e7c:	4659      	mov	r1, fp
 8001e7e:	018b      	lsls	r3, r1, #6
 8001e80:	4651      	mov	r1, sl
 8001e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e86:	4651      	mov	r1, sl
 8001e88:	018a      	lsls	r2, r1, #6
 8001e8a:	46d4      	mov	ip, sl
 8001e8c:	ebb2 080c 	subs.w	r8, r2, ip
 8001e90:	4659      	mov	r1, fp
 8001e92:	eb63 0901 	sbc.w	r9, r3, r1
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eaa:	4690      	mov	r8, r2
 8001eac:	4699      	mov	r9, r3
 8001eae:	4623      	mov	r3, r4
 8001eb0:	eb18 0303 	adds.w	r3, r8, r3
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	462b      	mov	r3, r5
 8001eb8:	eb49 0303 	adc.w	r3, r9, r3
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eca:	4629      	mov	r1, r5
 8001ecc:	024b      	lsls	r3, r1, #9
 8001ece:	4620      	mov	r0, r4
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001ed8:	4601      	mov	r1, r0
 8001eda:	024a      	lsls	r2, r1, #9
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ee6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ee8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001eec:	f7fe f948 	bl	8000180 <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ef8:	e055      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001efc:	2200      	movs	r2, #0
 8001efe:	623b      	str	r3, [r7, #32]
 8001f00:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f02:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f06:	4642      	mov	r2, r8
 8001f08:	464b      	mov	r3, r9
 8001f0a:	f04f 0000 	mov.w	r0, #0
 8001f0e:	f04f 0100 	mov.w	r1, #0
 8001f12:	0159      	lsls	r1, r3, #5
 8001f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f18:	0150      	lsls	r0, r2, #5
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	46c4      	mov	ip, r8
 8001f20:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001f24:	4640      	mov	r0, r8
 8001f26:	4649      	mov	r1, r9
 8001f28:	468c      	mov	ip, r1
 8001f2a:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f3a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f3e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f42:	ebb2 040a 	subs.w	r4, r2, sl
 8001f46:	eb63 050b 	sbc.w	r5, r3, fp
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	00eb      	lsls	r3, r5, #3
 8001f54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f58:	00e2      	lsls	r2, r4, #3
 8001f5a:	4614      	mov	r4, r2
 8001f5c:	461d      	mov	r5, r3
 8001f5e:	4603      	mov	r3, r0
 8001f60:	18e3      	adds	r3, r4, r3
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	460b      	mov	r3, r1
 8001f66:	eb45 0303 	adc.w	r3, r5, r3
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f78:	4629      	mov	r1, r5
 8001f7a:	028b      	lsls	r3, r1, #10
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	4629      	mov	r1, r5
 8001f80:	4604      	mov	r4, r0
 8001f82:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001f86:	4601      	mov	r1, r0
 8001f88:	028a      	lsls	r2, r1, #10
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f90:	2200      	movs	r2, #0
 8001f92:	61bb      	str	r3, [r7, #24]
 8001f94:	61fa      	str	r2, [r7, #28]
 8001f96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f9a:	f7fe f8f1 	bl	8000180 <__aeabi_uldivmod>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8001fa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fa8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001faa:	e00d      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001fac:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	0b5b      	lsrs	r3, r3, #13
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001fc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3748      	adds	r7, #72	@ 0x48
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	00f42400 	.word	0x00f42400
 8001fdc:	007a1200 	.word	0x007a1200
 8001fe0:	08005a30 	.word	0x08005a30

08001fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe8:	4b02      	ldr	r3, [pc, #8]	@ (8001ff4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	20000000 	.word	0x20000000

08001ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ffc:	f7ff fff2 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	0a1b      	lsrs	r3, r3, #8
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4903      	ldr	r1, [pc, #12]	@ (800201c <HAL_RCC_GetPCLK1Freq+0x24>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	08005a4c 	.word	0x08005a4c

08002020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002024:	f7ff ffde 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b05      	ldr	r3, [pc, #20]	@ (8002040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	0adb      	lsrs	r3, r3, #11
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	4903      	ldr	r1, [pc, #12]	@ (8002044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40023800 	.word	0x40023800
 8002044:	08005a4c 	.word	0x08005a4c

08002048 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	220f      	movs	r2, #15
 8002056:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002058:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <HAL_RCC_GetClockConfig+0x58>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0203 	and.w	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002064:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <HAL_RCC_GetClockConfig+0x58>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <HAL_RCC_GetClockConfig+0x58>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800207c:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <HAL_RCC_GetClockConfig+0x58>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800208a:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <HAL_RCC_GetClockConfig+0x5c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0201 	and.w	r2, r3, #1
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	601a      	str	r2, [r3, #0]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40023c00 	.word	0x40023c00

080020a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80020b4:	4b29      	ldr	r3, [pc, #164]	@ (800215c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d12c      	bne.n	800211a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020c0:	4b26      	ldr	r3, [pc, #152]	@ (800215c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80020cc:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	e016      	b.n	8002106 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d8:	4b20      	ldr	r3, [pc, #128]	@ (800215c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020dc:	4a1f      	ldr	r2, [pc, #124]	@ (800215c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	6253      	str	r3, [r2, #36]	@ 0x24
 80020e4:	4b1d      	ldr	r3, [pc, #116]	@ (800215c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80020f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80020f8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fa:	4b18      	ldr	r3, [pc, #96]	@ (800215c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fe:	4a17      	ldr	r2, [pc, #92]	@ (800215c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002100:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002104:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800210c:	d105      	bne.n	800211a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002114:	d101      	bne.n	800211a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002116:	2301      	movs	r3, #1
 8002118:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d105      	bne.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002120:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0f      	ldr	r2, [pc, #60]	@ (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b0d      	ldr	r3, [pc, #52]	@ (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 0201 	bic.w	r2, r3, #1
 8002134:	490b      	ldr	r1, [pc, #44]	@ (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800213c:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	429a      	cmp	r2, r3
 8002148:	d001      	beq.n	800214e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	40007000 	.word	0x40007000
 8002164:	40023c00 	.word	0x40023c00

08002168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e031      	b.n	80021de <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f829 	bl	80021e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3304      	adds	r3, #4
 80021a4:	4619      	mov	r1, r3
 80021a6:	4610      	mov	r0, r2
 80021a8:	f000 f978 	bl	800249c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d001      	beq.n	8002210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e03a      	b.n	8002286 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002230:	d00e      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0x58>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a16      	ldr	r2, [pc, #88]	@ (8002290 <HAL_TIM_Base_Start_IT+0x98>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d009      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0x58>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a14      	ldr	r2, [pc, #80]	@ (8002294 <HAL_TIM_Base_Start_IT+0x9c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d004      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0x58>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a13      	ldr	r2, [pc, #76]	@ (8002298 <HAL_TIM_Base_Start_IT+0xa0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d111      	bne.n	8002274 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b06      	cmp	r3, #6
 8002260:	d010      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0201 	orr.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002272:	e007      	b.n	8002284 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	40000400 	.word	0x40000400
 8002294:	40000800 	.word	0x40000800
 8002298:	40010800 	.word	0x40010800

0800229c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d122      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d11b      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0202 	mvn.w	r2, #2
 80022c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f8c1 	bl	8002466 <HAL_TIM_IC_CaptureCallback>
 80022e4:	e005      	b.n	80022f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f8b4 	bl	8002454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f8c3 	bl	8002478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b04      	cmp	r3, #4
 8002304:	d122      	bne.n	800234c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b04      	cmp	r3, #4
 8002312:	d11b      	bne.n	800234c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0204 	mvn.w	r2, #4
 800231c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2202      	movs	r2, #2
 8002322:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f897 	bl	8002466 <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f88a 	bl	8002454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f899 	bl	8002478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b08      	cmp	r3, #8
 8002358:	d122      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b08      	cmp	r3, #8
 8002366:	d11b      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0208 	mvn.w	r2, #8
 8002370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2204      	movs	r2, #4
 8002376:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f86d 	bl	8002466 <HAL_TIM_IC_CaptureCallback>
 800238c:	e005      	b.n	800239a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f860 	bl	8002454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f86f 	bl	8002478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b10      	cmp	r3, #16
 80023ac:	d122      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d11b      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0210 	mvn.w	r2, #16
 80023c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2208      	movs	r2, #8
 80023ca:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f843 	bl	8002466 <HAL_TIM_IC_CaptureCallback>
 80023e0:	e005      	b.n	80023ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f836 	bl	8002454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f845 	bl	8002478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d107      	bne.n	8002420 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0201 	mvn.w	r2, #1
 8002418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe fa38 	bl	8000890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800242a:	2b40      	cmp	r3, #64	@ 0x40
 800242c:	d10e      	bne.n	800244c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002438:	2b40      	cmp	r3, #64	@ 0x40
 800243a:	d107      	bne.n	800244c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f81f 	bl	800248a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b2:	d00f      	beq.n	80024d4 <TIM_Base_SetConfig+0x38>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002564 <TIM_Base_SetConfig+0xc8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00b      	beq.n	80024d4 <TIM_Base_SetConfig+0x38>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a2a      	ldr	r2, [pc, #168]	@ (8002568 <TIM_Base_SetConfig+0xcc>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d007      	beq.n	80024d4 <TIM_Base_SetConfig+0x38>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a29      	ldr	r2, [pc, #164]	@ (800256c <TIM_Base_SetConfig+0xd0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d003      	beq.n	80024d4 <TIM_Base_SetConfig+0x38>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a28      	ldr	r2, [pc, #160]	@ (8002570 <TIM_Base_SetConfig+0xd4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d108      	bne.n	80024e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ec:	d017      	beq.n	800251e <TIM_Base_SetConfig+0x82>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002564 <TIM_Base_SetConfig+0xc8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <TIM_Base_SetConfig+0x82>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002568 <TIM_Base_SetConfig+0xcc>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00f      	beq.n	800251e <TIM_Base_SetConfig+0x82>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1a      	ldr	r2, [pc, #104]	@ (800256c <TIM_Base_SetConfig+0xd0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00b      	beq.n	800251e <TIM_Base_SetConfig+0x82>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a19      	ldr	r2, [pc, #100]	@ (8002570 <TIM_Base_SetConfig+0xd4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d007      	beq.n	800251e <TIM_Base_SetConfig+0x82>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a18      	ldr	r2, [pc, #96]	@ (8002574 <TIM_Base_SetConfig+0xd8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d003      	beq.n	800251e <TIM_Base_SetConfig+0x82>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a17      	ldr	r2, [pc, #92]	@ (8002578 <TIM_Base_SetConfig+0xdc>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d108      	bne.n	8002530 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	615a      	str	r2, [r3, #20]
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	40000400 	.word	0x40000400
 8002568:	40000800 	.word	0x40000800
 800256c:	40000c00 	.word	0x40000c00
 8002570:	40010800 	.word	0x40010800
 8002574:	40010c00 	.word	0x40010c00
 8002578:	40011000 	.word	0x40011000

0800257c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e042      	b.n	8002614 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fe faa4 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2224      	movs	r2, #36	@ 0x24
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 fe03 	bl	80031cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	@ 0x28
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b20      	cmp	r3, #32
 800263a:	d16d      	bne.n	8002718 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_UART_Transmit+0x2c>
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e066      	b.n	800271a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2221      	movs	r2, #33	@ 0x21
 8002656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800265a:	f7fe fc01 	bl	8000e60 <HAL_GetTick>
 800265e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	88fa      	ldrh	r2, [r7, #6]
 8002664:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	88fa      	ldrh	r2, [r7, #6]
 800266a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002674:	d108      	bne.n	8002688 <HAL_UART_Transmit+0x6c>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d104      	bne.n	8002688 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	e003      	b.n	8002690 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800268c:	2300      	movs	r3, #0
 800268e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002690:	e02a      	b.n	80026e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2200      	movs	r2, #0
 800269a:	2180      	movs	r1, #128	@ 0x80
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 fb8b 	bl	8002db8 <UART_WaitOnFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e036      	b.n	800271a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10b      	bne.n	80026ca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	3302      	adds	r3, #2
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	e007      	b.n	80026da <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	3301      	adds	r3, #1
 80026d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1cf      	bne.n	8002692 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2200      	movs	r2, #0
 80026fa:	2140      	movs	r1, #64	@ 0x40
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fb5b 	bl	8002db8 <UART_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e006      	b.n	800271a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002718:	2302      	movs	r3, #2
  }
}
 800271a:	4618      	mov	r0, r3
 800271c:	3720      	adds	r7, #32
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b08a      	sub	sp, #40	@ 0x28
 8002726:	af02      	add	r7, sp, #8
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	4613      	mov	r3, r2
 8002730:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b20      	cmp	r3, #32
 8002740:	d17c      	bne.n	800283c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <HAL_UART_Receive+0x2c>
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e075      	b.n	800283e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2222      	movs	r2, #34	@ 0x22
 800275c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002766:	f7fe fb7b 	bl	8000e60 <HAL_GetTick>
 800276a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	88fa      	ldrh	r2, [r7, #6]
 8002770:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	88fa      	ldrh	r2, [r7, #6]
 8002776:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002780:	d108      	bne.n	8002794 <HAL_UART_Receive+0x72>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d104      	bne.n	8002794 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	e003      	b.n	800279c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800279c:	e043      	b.n	8002826 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2200      	movs	r2, #0
 80027a6:	2120      	movs	r1, #32
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 fb05 	bl	8002db8 <UART_WaitOnFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e042      	b.n	800283e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10c      	bne.n	80027d8 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	3302      	adds	r3, #2
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	e01f      	b.n	8002818 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027e0:	d007      	beq.n	80027f2 <HAL_UART_Receive+0xd0>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10a      	bne.n	8002800 <HAL_UART_Receive+0xde>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	e008      	b.n	8002812 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800280c:	b2da      	uxtb	r2, r3
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3301      	adds	r3, #1
 8002816:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800281c:	b29b      	uxth	r3, r3
 800281e:	3b01      	subs	r3, #1
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1b6      	bne.n	800279e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	e000      	b.n	800283e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800283c:	2302      	movs	r3, #2
  }
}
 800283e:	4618      	mov	r0, r3
 8002840:	3720      	adds	r7, #32
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b0ba      	sub	sp, #232	@ 0xe8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800287a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10f      	bne.n	80028ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800288e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_UART_IRQHandler+0x66>
 800289a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fbd1 	bl	800304e <UART_Receive_IT>
      return;
 80028ac:	e25b      	b.n	8002d66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80de 	beq.w	8002a74 <HAL_UART_IRQHandler+0x22c>
 80028b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d106      	bne.n	80028d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 80d1 	beq.w	8002a74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_UART_IRQHandler+0xae>
 80028de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	f043 0201 	orr.w	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00b      	beq.n	800291a <HAL_UART_IRQHandler+0xd2>
 8002902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	f043 0202 	orr.w	r2, r3, #2
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800291a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00b      	beq.n	800293e <HAL_UART_IRQHandler+0xf6>
 8002926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002936:	f043 0204 	orr.w	r2, r3, #4
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800293e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d011      	beq.n	800296e <HAL_UART_IRQHandler+0x126>
 800294a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b00      	cmp	r3, #0
 8002954:	d105      	bne.n	8002962 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	f043 0208 	orr.w	r2, r3, #8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 81f2 	beq.w	8002d5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_UART_IRQHandler+0x14e>
 8002984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fb5c 	bl	800304e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a0:	2b40      	cmp	r3, #64	@ 0x40
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d103      	bne.n	80029c2 <HAL_UART_IRQHandler+0x17a>
 80029ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d04f      	beq.n	8002a62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fa66 	bl	8002e94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d2:	2b40      	cmp	r3, #64	@ 0x40
 80029d4:	d141      	bne.n	8002a5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	3314      	adds	r3, #20
 80029dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029e4:	e853 3f00 	ldrex	r3, [r3]
 80029e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80029ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3314      	adds	r3, #20
 80029fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a12:	e841 2300 	strex	r3, r2, [r1]
 8002a16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1d9      	bne.n	80029d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d013      	beq.n	8002a52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c28 <HAL_UART_IRQHandler+0x3e0>)
 8002a30:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe fb54 	bl	80010e4 <HAL_DMA_Abort_IT>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d016      	beq.n	8002a70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a50:	e00e      	b.n	8002a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f99c 	bl	8002d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a58:	e00a      	b.n	8002a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f998 	bl	8002d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a60:	e006      	b.n	8002a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f994 	bl	8002d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002a6e:	e175      	b.n	8002d5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a70:	bf00      	nop
    return;
 8002a72:	e173      	b.n	8002d5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	f040 814f 	bne.w	8002d1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8148 	beq.w	8002d1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8141 	beq.w	8002d1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aba:	2b40      	cmp	r3, #64	@ 0x40
 8002abc:	f040 80b6 	bne.w	8002c2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002acc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8145 	beq.w	8002d60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	f080 813e 	bcs.w	8002d60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002aea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	f000 8088 	beq.w	8002c08 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	330c      	adds	r3, #12
 8002afe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b06:	e853 3f00 	ldrex	r3, [r3]
 8002b0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	330c      	adds	r3, #12
 8002b20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002b24:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002b30:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b34:	e841 2300 	strex	r3, r2, [r1]
 8002b38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1d9      	bne.n	8002af8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3314      	adds	r3, #20
 8002b4a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b4e:	e853 3f00 	ldrex	r3, [r3]
 8002b52:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3314      	adds	r3, #20
 8002b64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b68:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b74:	e841 2300 	strex	r3, r2, [r1]
 8002b78:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1e1      	bne.n	8002b44 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3314      	adds	r3, #20
 8002b86:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b8a:	e853 3f00 	ldrex	r3, [r3]
 8002b8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3314      	adds	r3, #20
 8002ba0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002ba4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ba6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002baa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002bac:	e841 2300 	strex	r3, r2, [r1]
 8002bb0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002bb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e3      	bne.n	8002b80 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	330c      	adds	r3, #12
 8002bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bd8:	f023 0310 	bic.w	r3, r3, #16
 8002bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	330c      	adds	r3, #12
 8002be6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002bea:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002bec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002bf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bf2:	e841 2300 	strex	r3, r2, [r1]
 8002bf6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1e3      	bne.n	8002bc6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe fa31 	bl	800106a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f8bf 	bl	8002da2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c24:	e09c      	b.n	8002d60 <HAL_UART_IRQHandler+0x518>
 8002c26:	bf00      	nop
 8002c28:	08002f59 	.word	0x08002f59
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 808e 	beq.w	8002d64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 8089 	beq.w	8002d64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	330c      	adds	r3, #12
 8002c58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c5c:	e853 3f00 	ldrex	r3, [r3]
 8002c60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	330c      	adds	r3, #12
 8002c72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002c76:	647a      	str	r2, [r7, #68]	@ 0x44
 8002c78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c7e:	e841 2300 	strex	r3, r2, [r1]
 8002c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1e3      	bne.n	8002c52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3314      	adds	r3, #20
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	e853 3f00 	ldrex	r3, [r3]
 8002c98:	623b      	str	r3, [r7, #32]
   return(result);
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3314      	adds	r3, #20
 8002caa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002cae:	633a      	str	r2, [r7, #48]	@ 0x30
 8002cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cb6:	e841 2300 	strex	r3, r2, [r1]
 8002cba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1e3      	bne.n	8002c8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	330c      	adds	r3, #12
 8002cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	e853 3f00 	ldrex	r3, [r3]
 8002cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0310 	bic.w	r3, r3, #16
 8002ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	330c      	adds	r3, #12
 8002cf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002cf4:	61fa      	str	r2, [r7, #28]
 8002cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf8:	69b9      	ldr	r1, [r7, #24]
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	e841 2300 	strex	r3, r2, [r1]
 8002d00:	617b      	str	r3, [r7, #20]
   return(result);
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e3      	bne.n	8002cd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d12:	4619      	mov	r1, r3
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f844 	bl	8002da2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d1a:	e023      	b.n	8002d64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d009      	beq.n	8002d3c <HAL_UART_IRQHandler+0x4f4>
 8002d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f923 	bl	8002f80 <UART_Transmit_IT>
    return;
 8002d3a:	e014      	b.n	8002d66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00e      	beq.n	8002d66 <HAL_UART_IRQHandler+0x51e>
 8002d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f962 	bl	800301e <UART_EndTransmit_IT>
    return;
 8002d5a:	e004      	b.n	8002d66 <HAL_UART_IRQHandler+0x51e>
    return;
 8002d5c:	bf00      	nop
 8002d5e:	e002      	b.n	8002d66 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d60:	bf00      	nop
 8002d62:	e000      	b.n	8002d66 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d64:	bf00      	nop
  }
}
 8002d66:	37e8      	adds	r7, #232	@ 0xe8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b090      	sub	sp, #64	@ 0x40
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc8:	e050      	b.n	8002e6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d04c      	beq.n	8002e6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dd8:	f7fe f842 	bl	8000e60 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d241      	bcs.n	8002e6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	330c      	adds	r3, #12
 8002dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df2:	e853 3f00 	ldrex	r3, [r3]
 8002df6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	330c      	adds	r3, #12
 8002e06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e08:	637a      	str	r2, [r7, #52]	@ 0x34
 8002e0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e10:	e841 2300 	strex	r3, r2, [r1]
 8002e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e5      	bne.n	8002de8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3314      	adds	r3, #20
 8002e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	e853 3f00 	ldrex	r3, [r3]
 8002e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f023 0301 	bic.w	r3, r3, #1
 8002e32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3314      	adds	r3, #20
 8002e3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e3c:	623a      	str	r2, [r7, #32]
 8002e3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e40:	69f9      	ldr	r1, [r7, #28]
 8002e42:	6a3a      	ldr	r2, [r7, #32]
 8002e44:	e841 2300 	strex	r3, r2, [r1]
 8002e48:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e5      	bne.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e00f      	b.n	8002e8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4013      	ands	r3, r2
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2301      	moveq	r3, #1
 8002e7e:	2300      	movne	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d09f      	beq.n	8002dca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3740      	adds	r7, #64	@ 0x40
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b095      	sub	sp, #84	@ 0x54
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea6:	e853 3f00 	ldrex	r3, [r3]
 8002eaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	330c      	adds	r3, #12
 8002eba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ebc:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ec2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ec4:	e841 2300 	strex	r3, r2, [r1]
 8002ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e5      	bne.n	8002e9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3314      	adds	r3, #20
 8002ed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	e853 3f00 	ldrex	r3, [r3]
 8002ede:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3314      	adds	r3, #20
 8002eee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ef0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ef8:	e841 2300 	strex	r3, r2, [r1]
 8002efc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e5      	bne.n	8002ed0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d119      	bne.n	8002f40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	330c      	adds	r3, #12
 8002f12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	e853 3f00 	ldrex	r3, [r3]
 8002f1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f023 0310 	bic.w	r3, r3, #16
 8002f22:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f2c:	61ba      	str	r2, [r7, #24]
 8002f2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f30:	6979      	ldr	r1, [r7, #20]
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	e841 2300 	strex	r3, r2, [r1]
 8002f38:	613b      	str	r3, [r7, #16]
   return(result);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e5      	bne.n	8002f0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f4e:	bf00      	nop
 8002f50:	3754      	adds	r7, #84	@ 0x54
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f7ff ff0c 	bl	8002d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b21      	cmp	r3, #33	@ 0x21
 8002f92:	d13e      	bne.n	8003012 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f9c:	d114      	bne.n	8002fc8 <UART_Transmit_IT+0x48>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d110      	bne.n	8002fc8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	1c9a      	adds	r2, r3, #2
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	621a      	str	r2, [r3, #32]
 8002fc6:	e008      	b.n	8002fda <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	1c59      	adds	r1, r3, #1
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6211      	str	r1, [r2, #32]
 8002fd2:	781a      	ldrb	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10f      	bne.n	800300e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ffc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800300c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	e000      	b.n	8003014 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003012:	2302      	movs	r3, #2
  }
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr

0800301e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003034:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff fe94 	bl	8002d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b08c      	sub	sp, #48	@ 0x30
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b22      	cmp	r3, #34	@ 0x22
 8003060:	f040 80ae 	bne.w	80031c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800306c:	d117      	bne.n	800309e <UART_Receive_IT+0x50>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d113      	bne.n	800309e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003076:	2300      	movs	r3, #0
 8003078:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	b29b      	uxth	r3, r3
 8003088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308c:	b29a      	uxth	r2, r3
 800308e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003090:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003096:	1c9a      	adds	r2, r3, #2
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	629a      	str	r2, [r3, #40]	@ 0x28
 800309c:	e026      	b.n	80030ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b0:	d007      	beq.n	80030c2 <UART_Receive_IT+0x74>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <UART_Receive_IT+0x82>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	e008      	b.n	80030e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4619      	mov	r1, r3
 80030fa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d15d      	bne.n	80031bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0220 	bic.w	r2, r2, #32
 800310e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800311e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003142:	2b01      	cmp	r3, #1
 8003144:	d135      	bne.n	80031b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	330c      	adds	r3, #12
 8003152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	e853 3f00 	ldrex	r3, [r3]
 800315a:	613b      	str	r3, [r7, #16]
   return(result);
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f023 0310 	bic.w	r3, r3, #16
 8003162:	627b      	str	r3, [r7, #36]	@ 0x24
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800316c:	623a      	str	r2, [r7, #32]
 800316e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003170:	69f9      	ldr	r1, [r7, #28]
 8003172:	6a3a      	ldr	r2, [r7, #32]
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	61bb      	str	r3, [r7, #24]
   return(result);
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e5      	bne.n	800314c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b10      	cmp	r3, #16
 800318c:	d10a      	bne.n	80031a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80031a8:	4619      	mov	r1, r3
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff fdf9 	bl	8002da2 <HAL_UARTEx_RxEventCallback>
 80031b0:	e002      	b.n	80031b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fde3 	bl	8002d7e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	e002      	b.n	80031c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e000      	b.n	80031c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
  }
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3730      	adds	r7, #48	@ 0x30
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800320c:	f023 030c 	bic.w	r3, r3, #12
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	430b      	orrs	r3, r1
 8003218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a55      	ldr	r2, [pc, #340]	@ (800338c <UART_SetConfig+0x1c0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d103      	bne.n	8003242 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800323a:	f7fe fef1 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	e002      	b.n	8003248 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003242:	f7fe fed9 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8003246:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003250:	d14c      	bne.n	80032ec <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	009a      	lsls	r2, r3, #2
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	4a49      	ldr	r2, [pc, #292]	@ (8003390 <UART_SetConfig+0x1c4>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	0119      	lsls	r1, r3, #4
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	009a      	lsls	r2, r3, #2
 800327c:	441a      	add	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fbb2 f2f3 	udiv	r2, r2, r3
 8003288:	4b41      	ldr	r3, [pc, #260]	@ (8003390 <UART_SetConfig+0x1c4>)
 800328a:	fba3 0302 	umull	r0, r3, r3, r2
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2064      	movs	r0, #100	@ 0x64
 8003292:	fb00 f303 	mul.w	r3, r0, r3
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	3332      	adds	r3, #50	@ 0x32
 800329c:	4a3c      	ldr	r2, [pc, #240]	@ (8003390 <UART_SetConfig+0x1c4>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80032aa:	4419      	add	r1, r3
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	009a      	lsls	r2, r3, #2
 80032b6:	441a      	add	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c2:	4b33      	ldr	r3, [pc, #204]	@ (8003390 <UART_SetConfig+0x1c4>)
 80032c4:	fba3 0302 	umull	r0, r3, r3, r2
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	2064      	movs	r0, #100	@ 0x64
 80032cc:	fb00 f303 	mul.w	r3, r0, r3
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	3332      	adds	r3, #50	@ 0x32
 80032d6:	4a2e      	ldr	r2, [pc, #184]	@ (8003390 <UART_SetConfig+0x1c4>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	f003 0207 	and.w	r2, r3, #7
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	440a      	add	r2, r1
 80032e8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032ea:	e04a      	b.n	8003382 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	009a      	lsls	r2, r3, #2
 80032f6:	441a      	add	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003302:	4a23      	ldr	r2, [pc, #140]	@ (8003390 <UART_SetConfig+0x1c4>)
 8003304:	fba2 2303 	umull	r2, r3, r2, r3
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	0119      	lsls	r1, r3, #4
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	009a      	lsls	r2, r3, #2
 8003316:	441a      	add	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003322:	4b1b      	ldr	r3, [pc, #108]	@ (8003390 <UART_SetConfig+0x1c4>)
 8003324:	fba3 0302 	umull	r0, r3, r3, r2
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	2064      	movs	r0, #100	@ 0x64
 800332c:	fb00 f303 	mul.w	r3, r0, r3
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	3332      	adds	r3, #50	@ 0x32
 8003336:	4a16      	ldr	r2, [pc, #88]	@ (8003390 <UART_SetConfig+0x1c4>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003342:	4419      	add	r1, r3
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	009a      	lsls	r2, r3, #2
 800334e:	441a      	add	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	fbb2 f2f3 	udiv	r2, r2, r3
 800335a:	4b0d      	ldr	r3, [pc, #52]	@ (8003390 <UART_SetConfig+0x1c4>)
 800335c:	fba3 0302 	umull	r0, r3, r3, r2
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	2064      	movs	r0, #100	@ 0x64
 8003364:	fb00 f303 	mul.w	r3, r0, r3
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	3332      	adds	r3, #50	@ 0x32
 800336e:	4a08      	ldr	r2, [pc, #32]	@ (8003390 <UART_SetConfig+0x1c4>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	f003 020f 	and.w	r2, r3, #15
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	440a      	add	r2, r1
 8003380:	609a      	str	r2, [r3, #8]
}
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40013800 	.word	0x40013800
 8003390:	51eb851f 	.word	0x51eb851f

08003394 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80033a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033a6:	2b84      	cmp	r3, #132	@ 0x84
 80033a8:	d005      	beq.n	80033b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80033aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4413      	add	r3, r2
 80033b2:	3303      	adds	r3, #3
 80033b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80033b6:	68fb      	ldr	r3, [r7, #12]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr

080033c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80033c6:	f000 faef 	bl	80039a8 <vTaskStartScheduler>
  
  return osOK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80033d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d2:	b089      	sub	sp, #36	@ 0x24
 80033d4:	af04      	add	r7, sp, #16
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d020      	beq.n	8003424 <osThreadCreate+0x54>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d01c      	beq.n	8003424 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685c      	ldr	r4, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691e      	ldr	r6, [r3, #16]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff ffc9 	bl	8003394 <makeFreeRtosPriority>
 8003402:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800340c:	9202      	str	r2, [sp, #8]
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	9100      	str	r1, [sp, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	4632      	mov	r2, r6
 8003416:	4629      	mov	r1, r5
 8003418:	4620      	mov	r0, r4
 800341a:	f000 f8e8 	bl	80035ee <xTaskCreateStatic>
 800341e:	4603      	mov	r3, r0
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e01c      	b.n	800345e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685c      	ldr	r4, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003430:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ffab 	bl	8003394 <makeFreeRtosPriority>
 800343e:	4602      	mov	r2, r0
 8003440:	f107 030c 	add.w	r3, r7, #12
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	9200      	str	r2, [sp, #0]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	4632      	mov	r2, r6
 800344c:	4629      	mov	r1, r5
 800344e:	4620      	mov	r0, r4
 8003450:	f000 f92c 	bl	80036ac <xTaskCreate>
 8003454:	4603      	mov	r3, r0
 8003456:	2b01      	cmp	r3, #1
 8003458:	d001      	beq.n	800345e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	e000      	b.n	8003460 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800345e:	68fb      	ldr	r3, [r7, #12]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003468 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <osDelay+0x16>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	e000      	b.n	8003480 <osDelay+0x18>
 800347e:	2301      	movs	r3, #1
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fa5b 	bl	800393c <vTaskDelay>
  
  return osOK;
 8003486:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f103 0208 	add.w	r2, r3, #8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f04f 32ff 	mov.w	r2, #4294967295
 80034a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f103 0208 	add.w	r2, r3, #8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f103 0208 	add.w	r2, r3, #8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr

080034ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr

080034e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034e6:	b480      	push	{r7}
 80034e8:	b085      	sub	sp, #20
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	601a      	str	r2, [r3, #0]
}
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003542:	d103      	bne.n	800354c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	e00c      	b.n	8003566 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3308      	adds	r3, #8
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e002      	b.n	800355a <vListInsert+0x2e>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	429a      	cmp	r2, r3
 8003564:	d2f6      	bcs.n	8003554 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	601a      	str	r2, [r3, #0]
}
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr

0800359c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6892      	ldr	r2, [r2, #8]
 80035b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6852      	ldr	r2, [r2, #4]
 80035bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d103      	bne.n	80035d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	1e5a      	subs	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr

080035ee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b08e      	sub	sp, #56	@ 0x38
 80035f2:	af04      	add	r7, sp, #16
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10b      	bne.n	800361a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	e7fd      	b.n	8003616 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800361a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	61fb      	str	r3, [r7, #28]
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003638:	23a0      	movs	r3, #160	@ 0xa0
 800363a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003640:	d00b      	beq.n	800365a <xTaskCreateStatic+0x6c>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	61bb      	str	r3, [r7, #24]
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop
 8003658:	e7fd      	b.n	8003656 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800365a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01e      	beq.n	800369e <xTaskCreateStatic+0xb0>
 8003660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01b      	beq.n	800369e <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003668:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800366e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	2202      	movs	r2, #2
 8003674:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003678:	2300      	movs	r3, #0
 800367a:	9303      	str	r3, [sp, #12]
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	9302      	str	r3, [sp, #8]
 8003680:	f107 0314 	add.w	r3, r7, #20
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f851 	bl	8003738 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003696:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003698:	f000 f8e6 	bl	8003868 <prvAddNewTaskToReadyList>
 800369c:	e001      	b.n	80036a2 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036a2:	697b      	ldr	r3, [r7, #20]
	}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3728      	adds	r7, #40	@ 0x28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08c      	sub	sp, #48	@ 0x30
 80036b0:	af04      	add	r7, sp, #16
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036bc:	88fb      	ldrh	r3, [r7, #6]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fe9d 	bl	8004400 <pvPortMalloc>
 80036c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00e      	beq.n	80036ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80036ce:	20a0      	movs	r0, #160	@ 0xa0
 80036d0:	f000 fe96 	bl	8004400 <pvPortMalloc>
 80036d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80036e2:	e005      	b.n	80036f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036e4:	6978      	ldr	r0, [r7, #20]
 80036e6:	f000 ff53 	bl	8004590 <vPortFree>
 80036ea:	e001      	b.n	80036f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d017      	beq.n	8003726 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036fe:	88fa      	ldrh	r2, [r7, #6]
 8003700:	2300      	movs	r3, #0
 8003702:	9303      	str	r3, [sp, #12]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	9302      	str	r3, [sp, #8]
 8003708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f80f 	bl	8003738 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800371a:	69f8      	ldr	r0, [r7, #28]
 800371c:	f000 f8a4 	bl	8003868 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003720:	2301      	movs	r3, #1
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	e002      	b.n	800372c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003726:	f04f 33ff 	mov.w	r3, #4294967295
 800372a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800372c:	69bb      	ldr	r3, [r7, #24]
	}
 800372e:	4618      	mov	r0, r3
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003750:	3b01      	subs	r3, #1
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f023 0307 	bic.w	r3, r3, #7
 800375e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800376a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	617b      	str	r3, [r7, #20]
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	e7fd      	b.n	800377e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	e012      	b.n	80037ae <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	7819      	ldrb	r1, [r3, #0]
 8003790:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	3334      	adds	r3, #52	@ 0x34
 8003798:	460a      	mov	r2, r1
 800379a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	4413      	add	r3, r2
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d006      	beq.n	80037b6 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	3301      	adds	r3, #1
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	2b0f      	cmp	r3, #15
 80037b2:	d9e9      	bls.n	8003788 <prvInitialiseNewTask+0x50>
 80037b4:	e000      	b.n	80037b8 <prvInitialiseNewTask+0x80>
		{
			break;
 80037b6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c2:	2b06      	cmp	r3, #6
 80037c4:	d901      	bls.n	80037ca <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037c6:	2306      	movs	r3, #6
 80037c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037d4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d8:	2200      	movs	r2, #0
 80037da:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037de:	3304      	adds	r3, #4
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fe74 	bl	80034ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e8:	3318      	adds	r3, #24
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fe6f 	bl	80034ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f8:	f1c3 0207 	rsb	r2, r3, #7
 80037fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003804:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003808:	2200      	movs	r2, #0
 800380a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800380e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003810:	2200      	movs	r2, #0
 8003812:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003818:	334c      	adds	r3, #76	@ 0x4c
 800381a:	224c      	movs	r2, #76	@ 0x4c
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f001 fa8a 	bl	8004d38 <memset>
 8003824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003826:	4a0d      	ldr	r2, [pc, #52]	@ (800385c <prvInitialiseNewTask+0x124>)
 8003828:	651a      	str	r2, [r3, #80]	@ 0x50
 800382a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382c:	4a0c      	ldr	r2, [pc, #48]	@ (8003860 <prvInitialiseNewTask+0x128>)
 800382e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003832:	4a0c      	ldr	r2, [pc, #48]	@ (8003864 <prvInitialiseNewTask+0x12c>)
 8003834:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	68f9      	ldr	r1, [r7, #12]
 800383a:	69b8      	ldr	r0, [r7, #24]
 800383c:	f000 fc30 	bl	80040a0 <pxPortInitialiseStack>
 8003840:	4602      	mov	r2, r0
 8003842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003844:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800384c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003852:	bf00      	nop
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20001160 	.word	0x20001160
 8003860:	200011c8 	.word	0x200011c8
 8003864:	20001230 	.word	0x20001230

08003868 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003870:	f000 fd04 	bl	800427c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003874:	4b2a      	ldr	r3, [pc, #168]	@ (8003920 <prvAddNewTaskToReadyList+0xb8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3301      	adds	r3, #1
 800387a:	4a29      	ldr	r2, [pc, #164]	@ (8003920 <prvAddNewTaskToReadyList+0xb8>)
 800387c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800387e:	4b29      	ldr	r3, [pc, #164]	@ (8003924 <prvAddNewTaskToReadyList+0xbc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003886:	4a27      	ldr	r2, [pc, #156]	@ (8003924 <prvAddNewTaskToReadyList+0xbc>)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800388c:	4b24      	ldr	r3, [pc, #144]	@ (8003920 <prvAddNewTaskToReadyList+0xb8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d110      	bne.n	80038b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003894:	f000 fad6 	bl	8003e44 <prvInitialiseTaskLists>
 8003898:	e00d      	b.n	80038b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800389a:	4b23      	ldr	r3, [pc, #140]	@ (8003928 <prvAddNewTaskToReadyList+0xc0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038a2:	4b20      	ldr	r3, [pc, #128]	@ (8003924 <prvAddNewTaskToReadyList+0xbc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d802      	bhi.n	80038b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003924 <prvAddNewTaskToReadyList+0xbc>)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038b6:	4b1d      	ldr	r3, [pc, #116]	@ (800392c <prvAddNewTaskToReadyList+0xc4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3301      	adds	r3, #1
 80038bc:	4a1b      	ldr	r2, [pc, #108]	@ (800392c <prvAddNewTaskToReadyList+0xc4>)
 80038be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c4:	2201      	movs	r2, #1
 80038c6:	409a      	lsls	r2, r3
 80038c8:	4b19      	ldr	r3, [pc, #100]	@ (8003930 <prvAddNewTaskToReadyList+0xc8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	4a18      	ldr	r2, [pc, #96]	@ (8003930 <prvAddNewTaskToReadyList+0xc8>)
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4a15      	ldr	r2, [pc, #84]	@ (8003934 <prvAddNewTaskToReadyList+0xcc>)
 80038e0:	441a      	add	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f7ff fdfc 	bl	80034e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038ee:	f000 fcf5 	bl	80042dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003928 <prvAddNewTaskToReadyList+0xc0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00e      	beq.n	8003918 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003924 <prvAddNewTaskToReadyList+0xbc>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003904:	429a      	cmp	r2, r3
 8003906:	d207      	bcs.n	8003918 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <prvAddNewTaskToReadyList+0xd0>)
 800390a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003918:	bf00      	nop
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000514 	.word	0x20000514
 8003924:	20000414 	.word	0x20000414
 8003928:	20000520 	.word	0x20000520
 800392c:	20000530 	.word	0x20000530
 8003930:	2000051c 	.word	0x2000051c
 8003934:	20000418 	.word	0x20000418
 8003938:	e000ed04 	.word	0xe000ed04

0800393c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d018      	beq.n	8003980 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800394e:	4b14      	ldr	r3, [pc, #80]	@ (80039a0 <vTaskDelay+0x64>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <vTaskDelay+0x32>
	__asm volatile
 8003956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	60bb      	str	r3, [r7, #8]
}
 8003968:	bf00      	nop
 800396a:	bf00      	nop
 800396c:	e7fd      	b.n	800396a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800396e:	f000 f885 	bl	8003a7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003972:	2100      	movs	r1, #0
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 fb2d 	bl	8003fd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800397a:	f000 f88d 	bl	8003a98 <xTaskResumeAll>
 800397e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d107      	bne.n	8003996 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003986:	4b07      	ldr	r3, [pc, #28]	@ (80039a4 <vTaskDelay+0x68>)
 8003988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003996:	bf00      	nop
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	2000053c 	.word	0x2000053c
 80039a4:	e000ed04 	.word	0xe000ed04

080039a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	@ 0x28
 80039ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039b6:	463a      	mov	r2, r7
 80039b8:	1d39      	adds	r1, r7, #4
 80039ba:	f107 0308 	add.w	r3, r7, #8
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fc fd54 	bl	800046c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039c4:	6839      	ldr	r1, [r7, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	9202      	str	r2, [sp, #8]
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	2300      	movs	r3, #0
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	2300      	movs	r3, #0
 80039d4:	460a      	mov	r2, r1
 80039d6:	4921      	ldr	r1, [pc, #132]	@ (8003a5c <vTaskStartScheduler+0xb4>)
 80039d8:	4821      	ldr	r0, [pc, #132]	@ (8003a60 <vTaskStartScheduler+0xb8>)
 80039da:	f7ff fe08 	bl	80035ee <xTaskCreateStatic>
 80039de:	4603      	mov	r3, r0
 80039e0:	4a20      	ldr	r2, [pc, #128]	@ (8003a64 <vTaskStartScheduler+0xbc>)
 80039e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a64 <vTaskStartScheduler+0xbc>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039ec:	2301      	movs	r3, #1
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	e001      	b.n	80039f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d11b      	bne.n	8003a34 <vTaskStartScheduler+0x8c>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	613b      	str	r3, [r7, #16]
}
 8003a0e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a10:	4b15      	ldr	r3, [pc, #84]	@ (8003a68 <vTaskStartScheduler+0xc0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	334c      	adds	r3, #76	@ 0x4c
 8003a16:	4a15      	ldr	r2, [pc, #84]	@ (8003a6c <vTaskStartScheduler+0xc4>)
 8003a18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a1a:	4b15      	ldr	r3, [pc, #84]	@ (8003a70 <vTaskStartScheduler+0xc8>)
 8003a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a22:	4b14      	ldr	r3, [pc, #80]	@ (8003a74 <vTaskStartScheduler+0xcc>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a28:	4b13      	ldr	r3, [pc, #76]	@ (8003a78 <vTaskStartScheduler+0xd0>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a2e:	f000 fbb3 	bl	8004198 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a32:	e00f      	b.n	8003a54 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3a:	d10b      	bne.n	8003a54 <vTaskStartScheduler+0xac>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	60fb      	str	r3, [r7, #12]
}
 8003a4e:	bf00      	nop
 8003a50:	bf00      	nop
 8003a52:	e7fd      	b.n	8003a50 <vTaskStartScheduler+0xa8>
}
 8003a54:	bf00      	nop
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	08005a28 	.word	0x08005a28
 8003a60:	08003e15 	.word	0x08003e15
 8003a64:	20000538 	.word	0x20000538
 8003a68:	20000414 	.word	0x20000414
 8003a6c:	2000001c 	.word	0x2000001c
 8003a70:	20000534 	.word	0x20000534
 8003a74:	20000520 	.word	0x20000520
 8003a78:	20000518 	.word	0x20000518

08003a7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003a80:	4b04      	ldr	r3, [pc, #16]	@ (8003a94 <vTaskSuspendAll+0x18>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3301      	adds	r3, #1
 8003a86:	4a03      	ldr	r2, [pc, #12]	@ (8003a94 <vTaskSuspendAll+0x18>)
 8003a88:	6013      	str	r3, [r2, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	2000053c 	.word	0x2000053c

08003a98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003aa6:	4b42      	ldr	r3, [pc, #264]	@ (8003bb0 <xTaskResumeAll+0x118>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10b      	bne.n	8003ac6 <xTaskResumeAll+0x2e>
	__asm volatile
 8003aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	603b      	str	r3, [r7, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	e7fd      	b.n	8003ac2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ac6:	f000 fbd9 	bl	800427c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003aca:	4b39      	ldr	r3, [pc, #228]	@ (8003bb0 <xTaskResumeAll+0x118>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	4a37      	ldr	r2, [pc, #220]	@ (8003bb0 <xTaskResumeAll+0x118>)
 8003ad2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad4:	4b36      	ldr	r3, [pc, #216]	@ (8003bb0 <xTaskResumeAll+0x118>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d161      	bne.n	8003ba0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003adc:	4b35      	ldr	r3, [pc, #212]	@ (8003bb4 <xTaskResumeAll+0x11c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d05d      	beq.n	8003ba0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ae4:	e02e      	b.n	8003b44 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003ae6:	4b34      	ldr	r3, [pc, #208]	@ (8003bb8 <xTaskResumeAll+0x120>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3318      	adds	r3, #24
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff fd52 	bl	800359c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff fd4d 	bl	800359c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b06:	2201      	movs	r2, #1
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8003bbc <xTaskResumeAll+0x124>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	4a2a      	ldr	r2, [pc, #168]	@ (8003bbc <xTaskResumeAll+0x124>)
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4a27      	ldr	r2, [pc, #156]	@ (8003bc0 <xTaskResumeAll+0x128>)
 8003b22:	441a      	add	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3304      	adds	r3, #4
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	f7ff fcdb 	bl	80034e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b34:	4b23      	ldr	r3, [pc, #140]	@ (8003bc4 <xTaskResumeAll+0x12c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d302      	bcc.n	8003b44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b3e:	4b22      	ldr	r3, [pc, #136]	@ (8003bc8 <xTaskResumeAll+0x130>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b44:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb8 <xTaskResumeAll+0x120>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1cc      	bne.n	8003ae6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b52:	f000 fa1b 	bl	8003f8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003b56:	4b1d      	ldr	r3, [pc, #116]	@ (8003bcc <xTaskResumeAll+0x134>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d010      	beq.n	8003b84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b62:	f000 f837 	bl	8003bd4 <xTaskIncrementTick>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b6c:	4b16      	ldr	r3, [pc, #88]	@ (8003bc8 <xTaskResumeAll+0x130>)
 8003b6e:	2201      	movs	r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f1      	bne.n	8003b62 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003b7e:	4b13      	ldr	r3, [pc, #76]	@ (8003bcc <xTaskResumeAll+0x134>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b84:	4b10      	ldr	r3, [pc, #64]	@ (8003bc8 <xTaskResumeAll+0x130>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d009      	beq.n	8003ba0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b90:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd0 <xTaskResumeAll+0x138>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ba0:	f000 fb9c 	bl	80042dc <vPortExitCritical>

	return xAlreadyYielded;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	2000053c 	.word	0x2000053c
 8003bb4:	20000514 	.word	0x20000514
 8003bb8:	200004d4 	.word	0x200004d4
 8003bbc:	2000051c 	.word	0x2000051c
 8003bc0:	20000418 	.word	0x20000418
 8003bc4:	20000414 	.word	0x20000414
 8003bc8:	20000528 	.word	0x20000528
 8003bcc:	20000524 	.word	0x20000524
 8003bd0:	e000ed04 	.word	0xe000ed04

08003bd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bde:	4b51      	ldr	r3, [pc, #324]	@ (8003d24 <xTaskIncrementTick+0x150>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f040 808e 	bne.w	8003d04 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003be8:	4b4f      	ldr	r3, [pc, #316]	@ (8003d28 <xTaskIncrementTick+0x154>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bf0:	4a4d      	ldr	r2, [pc, #308]	@ (8003d28 <xTaskIncrementTick+0x154>)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d121      	bne.n	8003c40 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8003d2c <xTaskIncrementTick+0x158>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00b      	beq.n	8003c1e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	603b      	str	r3, [r7, #0]
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	e7fd      	b.n	8003c1a <xTaskIncrementTick+0x46>
 8003c1e:	4b43      	ldr	r3, [pc, #268]	@ (8003d2c <xTaskIncrementTick+0x158>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	4b42      	ldr	r3, [pc, #264]	@ (8003d30 <xTaskIncrementTick+0x15c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a40      	ldr	r2, [pc, #256]	@ (8003d2c <xTaskIncrementTick+0x158>)
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4a40      	ldr	r2, [pc, #256]	@ (8003d30 <xTaskIncrementTick+0x15c>)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	4b40      	ldr	r3, [pc, #256]	@ (8003d34 <xTaskIncrementTick+0x160>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3301      	adds	r3, #1
 8003c38:	4a3e      	ldr	r2, [pc, #248]	@ (8003d34 <xTaskIncrementTick+0x160>)
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	f000 f9a6 	bl	8003f8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c40:	4b3d      	ldr	r3, [pc, #244]	@ (8003d38 <xTaskIncrementTick+0x164>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d34d      	bcc.n	8003ce6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c4a:	4b38      	ldr	r3, [pc, #224]	@ (8003d2c <xTaskIncrementTick+0x158>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <xTaskIncrementTick+0x84>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <xTaskIncrementTick+0x86>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d004      	beq.n	8003c68 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c5e:	4b36      	ldr	r3, [pc, #216]	@ (8003d38 <xTaskIncrementTick+0x164>)
 8003c60:	f04f 32ff 	mov.w	r2, #4294967295
 8003c64:	601a      	str	r2, [r3, #0]
					break;
 8003c66:	e03e      	b.n	8003ce6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c68:	4b30      	ldr	r3, [pc, #192]	@ (8003d2c <xTaskIncrementTick+0x158>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d203      	bcs.n	8003c88 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c80:	4a2d      	ldr	r2, [pc, #180]	@ (8003d38 <xTaskIncrementTick+0x164>)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6013      	str	r3, [r2, #0]
						break;
 8003c86:	e02e      	b.n	8003ce6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff fc85 	bl	800359c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d004      	beq.n	8003ca4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	3318      	adds	r3, #24
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff fc7c 	bl	800359c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca8:	2201      	movs	r2, #1
 8003caa:	409a      	lsls	r2, r3
 8003cac:	4b23      	ldr	r3, [pc, #140]	@ (8003d3c <xTaskIncrementTick+0x168>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	4a22      	ldr	r2, [pc, #136]	@ (8003d3c <xTaskIncrementTick+0x168>)
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cba:	4613      	mov	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d40 <xTaskIncrementTick+0x16c>)
 8003cc4:	441a      	add	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	f7ff fc0a 	bl	80034e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d44 <xTaskIncrementTick+0x170>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d3b4      	bcc.n	8003c4a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ce4:	e7b1      	b.n	8003c4a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ce6:	4b17      	ldr	r3, [pc, #92]	@ (8003d44 <xTaskIncrementTick+0x170>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cec:	4914      	ldr	r1, [pc, #80]	@ (8003d40 <xTaskIncrementTick+0x16c>)
 8003cee:	4613      	mov	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d907      	bls.n	8003d0e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	e004      	b.n	8003d0e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003d04:	4b10      	ldr	r3, [pc, #64]	@ (8003d48 <xTaskIncrementTick+0x174>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8003d48 <xTaskIncrementTick+0x174>)
 8003d0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d4c <xTaskIncrementTick+0x178>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003d16:	2301      	movs	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003d1a:	697b      	ldr	r3, [r7, #20]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	2000053c 	.word	0x2000053c
 8003d28:	20000518 	.word	0x20000518
 8003d2c:	200004cc 	.word	0x200004cc
 8003d30:	200004d0 	.word	0x200004d0
 8003d34:	2000052c 	.word	0x2000052c
 8003d38:	20000534 	.word	0x20000534
 8003d3c:	2000051c 	.word	0x2000051c
 8003d40:	20000418 	.word	0x20000418
 8003d44:	20000414 	.word	0x20000414
 8003d48:	20000524 	.word	0x20000524
 8003d4c:	20000528 	.word	0x20000528

08003d50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d56:	4b29      	ldr	r3, [pc, #164]	@ (8003dfc <vTaskSwitchContext+0xac>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d5e:	4b28      	ldr	r3, [pc, #160]	@ (8003e00 <vTaskSwitchContext+0xb0>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d64:	e045      	b.n	8003df2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003d66:	4b26      	ldr	r3, [pc, #152]	@ (8003e00 <vTaskSwitchContext+0xb0>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d6c:	4b25      	ldr	r3, [pc, #148]	@ (8003e04 <vTaskSwitchContext+0xb4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	fab3 f383 	clz	r3, r3
 8003d78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d7a:	7afb      	ldrb	r3, [r7, #11]
 8003d7c:	f1c3 031f 	rsb	r3, r3, #31
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	4921      	ldr	r1, [pc, #132]	@ (8003e08 <vTaskSwitchContext+0xb8>)
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	440b      	add	r3, r1
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10b      	bne.n	8003dae <vTaskSwitchContext+0x5e>
	__asm volatile
 8003d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	607b      	str	r3, [r7, #4]
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	e7fd      	b.n	8003daa <vTaskSwitchContext+0x5a>
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4a13      	ldr	r2, [pc, #76]	@ (8003e08 <vTaskSwitchContext+0xb8>)
 8003dba:	4413      	add	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	605a      	str	r2, [r3, #4]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d104      	bne.n	8003dde <vTaskSwitchContext+0x8e>
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4a09      	ldr	r2, [pc, #36]	@ (8003e0c <vTaskSwitchContext+0xbc>)
 8003de6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003de8:	4b08      	ldr	r3, [pc, #32]	@ (8003e0c <vTaskSwitchContext+0xbc>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	334c      	adds	r3, #76	@ 0x4c
 8003dee:	4a08      	ldr	r2, [pc, #32]	@ (8003e10 <vTaskSwitchContext+0xc0>)
 8003df0:	6013      	str	r3, [r2, #0]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr
 8003dfc:	2000053c 	.word	0x2000053c
 8003e00:	20000528 	.word	0x20000528
 8003e04:	2000051c 	.word	0x2000051c
 8003e08:	20000418 	.word	0x20000418
 8003e0c:	20000414 	.word	0x20000414
 8003e10:	2000001c 	.word	0x2000001c

08003e14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e1c:	f000 f852 	bl	8003ec4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e20:	4b06      	ldr	r3, [pc, #24]	@ (8003e3c <prvIdleTask+0x28>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d9f9      	bls.n	8003e1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e28:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <prvIdleTask+0x2c>)
 8003e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e38:	e7f0      	b.n	8003e1c <prvIdleTask+0x8>
 8003e3a:	bf00      	nop
 8003e3c:	20000418 	.word	0x20000418
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	e00c      	b.n	8003e6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ea4 <prvInitialiseTaskLists+0x60>)
 8003e5c:	4413      	add	r3, r2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fb16 	bl	8003490 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3301      	adds	r3, #1
 8003e68:	607b      	str	r3, [r7, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b06      	cmp	r3, #6
 8003e6e:	d9ef      	bls.n	8003e50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e70:	480d      	ldr	r0, [pc, #52]	@ (8003ea8 <prvInitialiseTaskLists+0x64>)
 8003e72:	f7ff fb0d 	bl	8003490 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e76:	480d      	ldr	r0, [pc, #52]	@ (8003eac <prvInitialiseTaskLists+0x68>)
 8003e78:	f7ff fb0a 	bl	8003490 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e7c:	480c      	ldr	r0, [pc, #48]	@ (8003eb0 <prvInitialiseTaskLists+0x6c>)
 8003e7e:	f7ff fb07 	bl	8003490 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e82:	480c      	ldr	r0, [pc, #48]	@ (8003eb4 <prvInitialiseTaskLists+0x70>)
 8003e84:	f7ff fb04 	bl	8003490 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e88:	480b      	ldr	r0, [pc, #44]	@ (8003eb8 <prvInitialiseTaskLists+0x74>)
 8003e8a:	f7ff fb01 	bl	8003490 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003ebc <prvInitialiseTaskLists+0x78>)
 8003e90:	4a05      	ldr	r2, [pc, #20]	@ (8003ea8 <prvInitialiseTaskLists+0x64>)
 8003e92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e94:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec0 <prvInitialiseTaskLists+0x7c>)
 8003e96:	4a05      	ldr	r2, [pc, #20]	@ (8003eac <prvInitialiseTaskLists+0x68>)
 8003e98:	601a      	str	r2, [r3, #0]
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000418 	.word	0x20000418
 8003ea8:	200004a4 	.word	0x200004a4
 8003eac:	200004b8 	.word	0x200004b8
 8003eb0:	200004d4 	.word	0x200004d4
 8003eb4:	200004e8 	.word	0x200004e8
 8003eb8:	20000500 	.word	0x20000500
 8003ebc:	200004cc 	.word	0x200004cc
 8003ec0:	200004d0 	.word	0x200004d0

08003ec4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eca:	e019      	b.n	8003f00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ecc:	f000 f9d6 	bl	800427c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ed0:	4b10      	ldr	r3, [pc, #64]	@ (8003f14 <prvCheckTasksWaitingTermination+0x50>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3304      	adds	r3, #4
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fb5d 	bl	800359c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f18 <prvCheckTasksWaitingTermination+0x54>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8003f18 <prvCheckTasksWaitingTermination+0x54>)
 8003eea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003eec:	4b0b      	ldr	r3, [pc, #44]	@ (8003f1c <prvCheckTasksWaitingTermination+0x58>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8003f1c <prvCheckTasksWaitingTermination+0x58>)
 8003ef4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ef6:	f000 f9f1 	bl	80042dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f810 	bl	8003f20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f00:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <prvCheckTasksWaitingTermination+0x58>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e1      	bne.n	8003ecc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	200004e8 	.word	0x200004e8
 8003f18:	20000514 	.word	0x20000514
 8003f1c:	200004fc 	.word	0x200004fc

08003f20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	334c      	adds	r3, #76	@ 0x4c
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 ff1b 	bl	8004d68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d108      	bne.n	8003f4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fb25 	bl	8004590 <vPortFree>
				vPortFree( pxTCB );
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fb22 	bl	8004590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f4c:	e019      	b.n	8003f82 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d103      	bne.n	8003f60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fb19 	bl	8004590 <vPortFree>
	}
 8003f5e:	e010      	b.n	8003f82 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d00b      	beq.n	8003f82 <prvDeleteTCB+0x62>
	__asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	60fb      	str	r3, [r7, #12]
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	e7fd      	b.n	8003f7e <prvDeleteTCB+0x5e>
	}
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f92:	4b0e      	ldr	r3, [pc, #56]	@ (8003fcc <prvResetNextTaskUnblockTime+0x40>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <prvResetNextTaskUnblockTime+0x14>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <prvResetNextTaskUnblockTime+0x16>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d004      	beq.n	8003fb0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd0 <prvResetNextTaskUnblockTime+0x44>)
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fae:	e008      	b.n	8003fc2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fb0:	4b06      	ldr	r3, [pc, #24]	@ (8003fcc <prvResetNextTaskUnblockTime+0x40>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4a04      	ldr	r2, [pc, #16]	@ (8003fd0 <prvResetNextTaskUnblockTime+0x44>)
 8003fc0:	6013      	str	r3, [r2, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr
 8003fcc:	200004cc 	.word	0x200004cc
 8003fd0:	20000534 	.word	0x20000534

08003fd4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fde:	4b29      	ldr	r3, [pc, #164]	@ (8004084 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fe4:	4b28      	ldr	r3, [pc, #160]	@ (8004088 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff fad6 	bl	800359c <uxListRemove>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10b      	bne.n	800400e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003ff6:	4b24      	ldr	r3, [pc, #144]	@ (8004088 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43da      	mvns	r2, r3
 8004004:	4b21      	ldr	r3, [pc, #132]	@ (800408c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4013      	ands	r3, r2
 800400a:	4a20      	ldr	r2, [pc, #128]	@ (800408c <prvAddCurrentTaskToDelayedList+0xb8>)
 800400c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d10a      	bne.n	800402c <prvAddCurrentTaskToDelayedList+0x58>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800401c:	4b1a      	ldr	r3, [pc, #104]	@ (8004088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3304      	adds	r3, #4
 8004022:	4619      	mov	r1, r3
 8004024:	481a      	ldr	r0, [pc, #104]	@ (8004090 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004026:	f7ff fa5e 	bl	80034e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800402a:	e026      	b.n	800407a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4413      	add	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004034:	4b14      	ldr	r3, [pc, #80]	@ (8004088 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	429a      	cmp	r2, r3
 8004042:	d209      	bcs.n	8004058 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004044:	4b13      	ldr	r3, [pc, #76]	@ (8004094 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4b0f      	ldr	r3, [pc, #60]	@ (8004088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3304      	adds	r3, #4
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f7ff fa6b 	bl	800352c <vListInsert>
}
 8004056:	e010      	b.n	800407a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004058:	4b0f      	ldr	r3, [pc, #60]	@ (8004098 <prvAddCurrentTaskToDelayedList+0xc4>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3304      	adds	r3, #4
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f7ff fa61 	bl	800352c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800406a:	4b0c      	ldr	r3, [pc, #48]	@ (800409c <prvAddCurrentTaskToDelayedList+0xc8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	429a      	cmp	r2, r3
 8004072:	d202      	bcs.n	800407a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004074:	4a09      	ldr	r2, [pc, #36]	@ (800409c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	6013      	str	r3, [r2, #0]
}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000518 	.word	0x20000518
 8004088:	20000414 	.word	0x20000414
 800408c:	2000051c 	.word	0x2000051c
 8004090:	20000500 	.word	0x20000500
 8004094:	200004d0 	.word	0x200004d0
 8004098:	200004cc 	.word	0x200004cc
 800409c:	20000534 	.word	0x20000534

080040a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3b04      	subs	r3, #4
 80040b0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3b04      	subs	r3, #4
 80040be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f023 0201 	bic.w	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3b04      	subs	r3, #4
 80040ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040d0:	4a08      	ldr	r2, [pc, #32]	@ (80040f4 <pxPortInitialiseStack+0x54>)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3b14      	subs	r3, #20
 80040da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3b20      	subs	r3, #32
 80040e6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040e8:	68fb      	ldr	r3, [r7, #12]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	080040f9 	.word	0x080040f9

080040f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80040fe:	2300      	movs	r3, #0
 8004100:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004102:	4b12      	ldr	r3, [pc, #72]	@ (800414c <prvTaskExitError+0x54>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410a:	d00b      	beq.n	8004124 <prvTaskExitError+0x2c>
	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	60fb      	str	r3, [r7, #12]
}
 800411e:	bf00      	nop
 8004120:	bf00      	nop
 8004122:	e7fd      	b.n	8004120 <prvTaskExitError+0x28>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	60bb      	str	r3, [r7, #8]
}
 8004136:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004138:	bf00      	nop
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0fc      	beq.n	800413a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	2000000c 	.word	0x2000000c

08004150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004150:	4b07      	ldr	r3, [pc, #28]	@ (8004170 <pxCurrentTCBConst2>)
 8004152:	6819      	ldr	r1, [r3, #0]
 8004154:	6808      	ldr	r0, [r1, #0]
 8004156:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800415a:	f380 8809 	msr	PSP, r0
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f380 8811 	msr	BASEPRI, r0
 800416a:	f04e 0e0d 	orr.w	lr, lr, #13
 800416e:	4770      	bx	lr

08004170 <pxCurrentTCBConst2>:
 8004170:	20000414 	.word	0x20000414
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop

08004178 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004178:	4806      	ldr	r0, [pc, #24]	@ (8004194 <prvPortStartFirstTask+0x1c>)
 800417a:	6800      	ldr	r0, [r0, #0]
 800417c:	6800      	ldr	r0, [r0, #0]
 800417e:	f380 8808 	msr	MSP, r0
 8004182:	b662      	cpsie	i
 8004184:	b661      	cpsie	f
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	df00      	svc	0
 8004190:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004192:	bf00      	nop
 8004194:	e000ed08 	.word	0xe000ed08

08004198 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800419e:	4b32      	ldr	r3, [pc, #200]	@ (8004268 <xPortStartScheduler+0xd0>)
 80041a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	22ff      	movs	r2, #255	@ 0xff
 80041ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	4b2a      	ldr	r3, [pc, #168]	@ (800426c <xPortStartScheduler+0xd4>)
 80041c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004270 <xPortStartScheduler+0xd8>)
 80041c8:	2207      	movs	r2, #7
 80041ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041cc:	e009      	b.n	80041e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80041ce:	4b28      	ldr	r3, [pc, #160]	@ (8004270 <xPortStartScheduler+0xd8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	4a26      	ldr	r2, [pc, #152]	@ (8004270 <xPortStartScheduler+0xd8>)
 80041d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ea:	2b80      	cmp	r3, #128	@ 0x80
 80041ec:	d0ef      	beq.n	80041ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041ee:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <xPortStartScheduler+0xd8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1c3 0307 	rsb	r3, r3, #7
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d00b      	beq.n	8004212 <xPortStartScheduler+0x7a>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	60bb      	str	r3, [r7, #8]
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	e7fd      	b.n	800420e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004212:	4b17      	ldr	r3, [pc, #92]	@ (8004270 <xPortStartScheduler+0xd8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	4a15      	ldr	r2, [pc, #84]	@ (8004270 <xPortStartScheduler+0xd8>)
 800421a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800421c:	4b14      	ldr	r3, [pc, #80]	@ (8004270 <xPortStartScheduler+0xd8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004224:	4a12      	ldr	r2, [pc, #72]	@ (8004270 <xPortStartScheduler+0xd8>)
 8004226:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004230:	4b10      	ldr	r3, [pc, #64]	@ (8004274 <xPortStartScheduler+0xdc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0f      	ldr	r2, [pc, #60]	@ (8004274 <xPortStartScheduler+0xdc>)
 8004236:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800423a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800423c:	4b0d      	ldr	r3, [pc, #52]	@ (8004274 <xPortStartScheduler+0xdc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a0c      	ldr	r2, [pc, #48]	@ (8004274 <xPortStartScheduler+0xdc>)
 8004242:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004246:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004248:	f000 f8b8 	bl	80043bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800424c:	4b0a      	ldr	r3, [pc, #40]	@ (8004278 <xPortStartScheduler+0xe0>)
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004252:	f7ff ff91 	bl	8004178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004256:	f7ff fd7b 	bl	8003d50 <vTaskSwitchContext>
	prvTaskExitError();
 800425a:	f7ff ff4d 	bl	80040f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	e000e400 	.word	0xe000e400
 800426c:	20000540 	.word	0x20000540
 8004270:	20000544 	.word	0x20000544
 8004274:	e000ed20 	.word	0xe000ed20
 8004278:	2000000c 	.word	0x2000000c

0800427c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	607b      	str	r3, [r7, #4]
}
 8004294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004296:	4b0f      	ldr	r3, [pc, #60]	@ (80042d4 <vPortEnterCritical+0x58>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3301      	adds	r3, #1
 800429c:	4a0d      	ldr	r2, [pc, #52]	@ (80042d4 <vPortEnterCritical+0x58>)
 800429e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042a0:	4b0c      	ldr	r3, [pc, #48]	@ (80042d4 <vPortEnterCritical+0x58>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d110      	bne.n	80042ca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042a8:	4b0b      	ldr	r3, [pc, #44]	@ (80042d8 <vPortEnterCritical+0x5c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <vPortEnterCritical+0x4e>
	__asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	603b      	str	r3, [r7, #0]
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	e7fd      	b.n	80042c6 <vPortEnterCritical+0x4a>
	}
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr
 80042d4:	2000000c 	.word	0x2000000c
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042e2:	4b12      	ldr	r3, [pc, #72]	@ (800432c <vPortExitCritical+0x50>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10b      	bne.n	8004302 <vPortExitCritical+0x26>
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	607b      	str	r3, [r7, #4]
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	e7fd      	b.n	80042fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004302:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <vPortExitCritical+0x50>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3b01      	subs	r3, #1
 8004308:	4a08      	ldr	r2, [pc, #32]	@ (800432c <vPortExitCritical+0x50>)
 800430a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800430c:	4b07      	ldr	r3, [pc, #28]	@ (800432c <vPortExitCritical+0x50>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <vPortExitCritical+0x44>
 8004314:	2300      	movs	r3, #0
 8004316:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800431e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	2000000c 	.word	0x2000000c

08004330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004330:	f3ef 8009 	mrs	r0, PSP
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <pxCurrentTCBConst>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004340:	6010      	str	r0, [r2, #0]
 8004342:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004346:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800434a:	f380 8811 	msr	BASEPRI, r0
 800434e:	f7ff fcff 	bl	8003d50 <vTaskSwitchContext>
 8004352:	f04f 0000 	mov.w	r0, #0
 8004356:	f380 8811 	msr	BASEPRI, r0
 800435a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800435e:	6819      	ldr	r1, [r3, #0]
 8004360:	6808      	ldr	r0, [r1, #0]
 8004362:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004366:	f380 8809 	msr	PSP, r0
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	4770      	bx	lr

08004370 <pxCurrentTCBConst>:
 8004370:	20000414 	.word	0x20000414
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop

08004378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	607b      	str	r3, [r7, #4]
}
 8004390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004392:	f7ff fc1f 	bl	8003bd4 <xTaskIncrementTick>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800439c:	4b06      	ldr	r3, [pc, #24]	@ (80043b8 <SysTick_Handler+0x40>)
 800439e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	2300      	movs	r3, #0
 80043a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f383 8811 	msr	BASEPRI, r3
}
 80043ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	e000ed04 	.word	0xe000ed04

080043bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043c0:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <vPortSetupTimerInterrupt+0x30>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043c6:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <vPortSetupTimerInterrupt+0x34>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043cc:	4b09      	ldr	r3, [pc, #36]	@ (80043f4 <vPortSetupTimerInterrupt+0x38>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a09      	ldr	r2, [pc, #36]	@ (80043f8 <vPortSetupTimerInterrupt+0x3c>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	4a08      	ldr	r2, [pc, #32]	@ (80043fc <vPortSetupTimerInterrupt+0x40>)
 80043da:	3b01      	subs	r3, #1
 80043dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043de:	4b03      	ldr	r3, [pc, #12]	@ (80043ec <vPortSetupTimerInterrupt+0x30>)
 80043e0:	2207      	movs	r2, #7
 80043e2:	601a      	str	r2, [r3, #0]
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr
 80043ec:	e000e010 	.word	0xe000e010
 80043f0:	e000e018 	.word	0xe000e018
 80043f4:	20000000 	.word	0x20000000
 80043f8:	10624dd3 	.word	0x10624dd3
 80043fc:	e000e014 	.word	0xe000e014

08004400 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	@ 0x28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800440c:	f7ff fb36 	bl	8003a7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004410:	4b5a      	ldr	r3, [pc, #360]	@ (800457c <pvPortMalloc+0x17c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004418:	f000 f916 	bl	8004648 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800441c:	4b58      	ldr	r3, [pc, #352]	@ (8004580 <pvPortMalloc+0x180>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	f040 8090 	bne.w	800454a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01e      	beq.n	800446e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004430:	2208      	movs	r2, #8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	2b00      	cmp	r3, #0
 8004440:	d015      	beq.n	800446e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f023 0307 	bic.w	r3, r3, #7
 8004448:	3308      	adds	r3, #8
 800444a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <pvPortMalloc+0x6e>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	617b      	str	r3, [r7, #20]
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	e7fd      	b.n	800446a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d06a      	beq.n	800454a <pvPortMalloc+0x14a>
 8004474:	4b43      	ldr	r3, [pc, #268]	@ (8004584 <pvPortMalloc+0x184>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	429a      	cmp	r2, r3
 800447c:	d865      	bhi.n	800454a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800447e:	4b42      	ldr	r3, [pc, #264]	@ (8004588 <pvPortMalloc+0x188>)
 8004480:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004482:	4b41      	ldr	r3, [pc, #260]	@ (8004588 <pvPortMalloc+0x188>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004488:	e004      	b.n	8004494 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	429a      	cmp	r2, r3
 800449c:	d903      	bls.n	80044a6 <pvPortMalloc+0xa6>
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f1      	bne.n	800448a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044a6:	4b35      	ldr	r3, [pc, #212]	@ (800457c <pvPortMalloc+0x17c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d04c      	beq.n	800454a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2208      	movs	r2, #8
 80044b6:	4413      	add	r3, r2
 80044b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	1ad2      	subs	r2, r2, r3
 80044ca:	2308      	movs	r3, #8
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d920      	bls.n	8004514 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4413      	add	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00b      	beq.n	80044fc <pvPortMalloc+0xfc>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	613b      	str	r3, [r7, #16]
}
 80044f6:	bf00      	nop
 80044f8:	bf00      	nop
 80044fa:	e7fd      	b.n	80044f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	1ad2      	subs	r2, r2, r3
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800450e:	69b8      	ldr	r0, [r7, #24]
 8004510:	f000 f8fc 	bl	800470c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004514:	4b1b      	ldr	r3, [pc, #108]	@ (8004584 <pvPortMalloc+0x184>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	4a19      	ldr	r2, [pc, #100]	@ (8004584 <pvPortMalloc+0x184>)
 8004520:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004522:	4b18      	ldr	r3, [pc, #96]	@ (8004584 <pvPortMalloc+0x184>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b19      	ldr	r3, [pc, #100]	@ (800458c <pvPortMalloc+0x18c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d203      	bcs.n	8004536 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800452e:	4b15      	ldr	r3, [pc, #84]	@ (8004584 <pvPortMalloc+0x184>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a16      	ldr	r2, [pc, #88]	@ (800458c <pvPortMalloc+0x18c>)
 8004534:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	4b11      	ldr	r3, [pc, #68]	@ (8004580 <pvPortMalloc+0x180>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	431a      	orrs	r2, r3
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800454a:	f7ff faa5 	bl	8003a98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00b      	beq.n	8004570 <pvPortMalloc+0x170>
	__asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	60fb      	str	r3, [r7, #12]
}
 800456a:	bf00      	nop
 800456c:	bf00      	nop
 800456e:	e7fd      	b.n	800456c <pvPortMalloc+0x16c>
	return pvReturn;
 8004570:	69fb      	ldr	r3, [r7, #28]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3728      	adds	r7, #40	@ 0x28
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20001150 	.word	0x20001150
 8004580:	2000115c 	.word	0x2000115c
 8004584:	20001154 	.word	0x20001154
 8004588:	20001148 	.word	0x20001148
 800458c:	20001158 	.word	0x20001158

08004590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d04a      	beq.n	8004638 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045a2:	2308      	movs	r3, #8
 80045a4:	425b      	negs	r3, r3
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4413      	add	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	4b22      	ldr	r3, [pc, #136]	@ (8004640 <vPortFree+0xb0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <vPortFree+0x46>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	60fb      	str	r3, [r7, #12]
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	e7fd      	b.n	80045d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00b      	beq.n	80045f6 <vPortFree+0x66>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	60bb      	str	r3, [r7, #8]
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	e7fd      	b.n	80045f2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	4b11      	ldr	r3, [pc, #68]	@ (8004640 <vPortFree+0xb0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d019      	beq.n	8004638 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d115      	bne.n	8004638 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	4b0b      	ldr	r3, [pc, #44]	@ (8004640 <vPortFree+0xb0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	43db      	mvns	r3, r3
 8004616:	401a      	ands	r2, r3
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800461c:	f7ff fa2e 	bl	8003a7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	4b07      	ldr	r3, [pc, #28]	@ (8004644 <vPortFree+0xb4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4413      	add	r3, r2
 800462a:	4a06      	ldr	r2, [pc, #24]	@ (8004644 <vPortFree+0xb4>)
 800462c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800462e:	6938      	ldr	r0, [r7, #16]
 8004630:	f000 f86c 	bl	800470c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004634:	f7ff fa30 	bl	8003a98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004638:	bf00      	nop
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	2000115c 	.word	0x2000115c
 8004644:	20001154 	.word	0x20001154

08004648 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800464e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004652:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004654:	4b27      	ldr	r3, [pc, #156]	@ (80046f4 <prvHeapInit+0xac>)
 8004656:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3307      	adds	r3, #7
 8004666:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0307 	bic.w	r3, r3, #7
 800466e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	4a1f      	ldr	r2, [pc, #124]	@ (80046f4 <prvHeapInit+0xac>)
 8004678:	4413      	add	r3, r2
 800467a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004680:	4a1d      	ldr	r2, [pc, #116]	@ (80046f8 <prvHeapInit+0xb0>)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004686:	4b1c      	ldr	r3, [pc, #112]	@ (80046f8 <prvHeapInit+0xb0>)
 8004688:	2200      	movs	r2, #0
 800468a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4413      	add	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004694:	2208      	movs	r2, #8
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0307 	bic.w	r3, r3, #7
 80046a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a15      	ldr	r2, [pc, #84]	@ (80046fc <prvHeapInit+0xb4>)
 80046a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046aa:	4b14      	ldr	r3, [pc, #80]	@ (80046fc <prvHeapInit+0xb4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2200      	movs	r2, #0
 80046b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046b2:	4b12      	ldr	r3, [pc, #72]	@ (80046fc <prvHeapInit+0xb4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	1ad2      	subs	r2, r2, r3
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046c8:	4b0c      	ldr	r3, [pc, #48]	@ (80046fc <prvHeapInit+0xb4>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004700 <prvHeapInit+0xb8>)
 80046d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	4a09      	ldr	r2, [pc, #36]	@ (8004704 <prvHeapInit+0xbc>)
 80046de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046e0:	4b09      	ldr	r3, [pc, #36]	@ (8004708 <prvHeapInit+0xc0>)
 80046e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80046e6:	601a      	str	r2, [r3, #0]
}
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000548 	.word	0x20000548
 80046f8:	20001148 	.word	0x20001148
 80046fc:	20001150 	.word	0x20001150
 8004700:	20001158 	.word	0x20001158
 8004704:	20001154 	.word	0x20001154
 8004708:	2000115c 	.word	0x2000115c

0800470c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004714:	4b27      	ldr	r3, [pc, #156]	@ (80047b4 <prvInsertBlockIntoFreeList+0xa8>)
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	e002      	b.n	8004720 <prvInsertBlockIntoFreeList+0x14>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	429a      	cmp	r2, r3
 8004728:	d8f7      	bhi.n	800471a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	4413      	add	r3, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	429a      	cmp	r2, r3
 800473a:	d108      	bne.n	800474e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	441a      	add	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	441a      	add	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d118      	bne.n	8004794 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b14      	ldr	r3, [pc, #80]	@ (80047b8 <prvInsertBlockIntoFreeList+0xac>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d00d      	beq.n	800478a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	441a      	add	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	e008      	b.n	800479c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800478a:	4b0b      	ldr	r3, [pc, #44]	@ (80047b8 <prvInsertBlockIntoFreeList+0xac>)
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	e003      	b.n	800479c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d002      	beq.n	80047aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047aa:	bf00      	nop
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr
 80047b4:	20001148 	.word	0x20001148
 80047b8:	20001150 	.word	0x20001150

080047bc <std>:
 80047bc:	2300      	movs	r3, #0
 80047be:	b510      	push	{r4, lr}
 80047c0:	4604      	mov	r4, r0
 80047c2:	e9c0 3300 	strd	r3, r3, [r0]
 80047c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047ca:	6083      	str	r3, [r0, #8]
 80047cc:	8181      	strh	r1, [r0, #12]
 80047ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80047d0:	81c2      	strh	r2, [r0, #14]
 80047d2:	6183      	str	r3, [r0, #24]
 80047d4:	4619      	mov	r1, r3
 80047d6:	2208      	movs	r2, #8
 80047d8:	305c      	adds	r0, #92	@ 0x5c
 80047da:	f000 faad 	bl	8004d38 <memset>
 80047de:	4b0d      	ldr	r3, [pc, #52]	@ (8004814 <std+0x58>)
 80047e0:	6224      	str	r4, [r4, #32]
 80047e2:	6263      	str	r3, [r4, #36]	@ 0x24
 80047e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004818 <std+0x5c>)
 80047e6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047e8:	4b0c      	ldr	r3, [pc, #48]	@ (800481c <std+0x60>)
 80047ea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004820 <std+0x64>)
 80047ee:	6323      	str	r3, [r4, #48]	@ 0x30
 80047f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004824 <std+0x68>)
 80047f2:	429c      	cmp	r4, r3
 80047f4:	d006      	beq.n	8004804 <std+0x48>
 80047f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80047fa:	4294      	cmp	r4, r2
 80047fc:	d002      	beq.n	8004804 <std+0x48>
 80047fe:	33d0      	adds	r3, #208	@ 0xd0
 8004800:	429c      	cmp	r4, r3
 8004802:	d105      	bne.n	8004810 <std+0x54>
 8004804:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800480c:	f000 bb62 	b.w	8004ed4 <__retarget_lock_init_recursive>
 8004810:	bd10      	pop	{r4, pc}
 8004812:	bf00      	nop
 8004814:	08004b89 	.word	0x08004b89
 8004818:	08004bab 	.word	0x08004bab
 800481c:	08004be3 	.word	0x08004be3
 8004820:	08004c07 	.word	0x08004c07
 8004824:	20001160 	.word	0x20001160

08004828 <stdio_exit_handler>:
 8004828:	4a02      	ldr	r2, [pc, #8]	@ (8004834 <stdio_exit_handler+0xc>)
 800482a:	4903      	ldr	r1, [pc, #12]	@ (8004838 <stdio_exit_handler+0x10>)
 800482c:	4803      	ldr	r0, [pc, #12]	@ (800483c <stdio_exit_handler+0x14>)
 800482e:	f000 b869 	b.w	8004904 <_fwalk_sglue>
 8004832:	bf00      	nop
 8004834:	20000010 	.word	0x20000010
 8004838:	0800577d 	.word	0x0800577d
 800483c:	20000020 	.word	0x20000020

08004840 <cleanup_stdio>:
 8004840:	6841      	ldr	r1, [r0, #4]
 8004842:	4b0c      	ldr	r3, [pc, #48]	@ (8004874 <cleanup_stdio+0x34>)
 8004844:	b510      	push	{r4, lr}
 8004846:	4299      	cmp	r1, r3
 8004848:	4604      	mov	r4, r0
 800484a:	d001      	beq.n	8004850 <cleanup_stdio+0x10>
 800484c:	f000 ff96 	bl	800577c <_fflush_r>
 8004850:	68a1      	ldr	r1, [r4, #8]
 8004852:	4b09      	ldr	r3, [pc, #36]	@ (8004878 <cleanup_stdio+0x38>)
 8004854:	4299      	cmp	r1, r3
 8004856:	d002      	beq.n	800485e <cleanup_stdio+0x1e>
 8004858:	4620      	mov	r0, r4
 800485a:	f000 ff8f 	bl	800577c <_fflush_r>
 800485e:	68e1      	ldr	r1, [r4, #12]
 8004860:	4b06      	ldr	r3, [pc, #24]	@ (800487c <cleanup_stdio+0x3c>)
 8004862:	4299      	cmp	r1, r3
 8004864:	d004      	beq.n	8004870 <cleanup_stdio+0x30>
 8004866:	4620      	mov	r0, r4
 8004868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800486c:	f000 bf86 	b.w	800577c <_fflush_r>
 8004870:	bd10      	pop	{r4, pc}
 8004872:	bf00      	nop
 8004874:	20001160 	.word	0x20001160
 8004878:	200011c8 	.word	0x200011c8
 800487c:	20001230 	.word	0x20001230

08004880 <global_stdio_init.part.0>:
 8004880:	b510      	push	{r4, lr}
 8004882:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <global_stdio_init.part.0+0x30>)
 8004884:	4c0b      	ldr	r4, [pc, #44]	@ (80048b4 <global_stdio_init.part.0+0x34>)
 8004886:	4a0c      	ldr	r2, [pc, #48]	@ (80048b8 <global_stdio_init.part.0+0x38>)
 8004888:	4620      	mov	r0, r4
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	2104      	movs	r1, #4
 800488e:	2200      	movs	r2, #0
 8004890:	f7ff ff94 	bl	80047bc <std>
 8004894:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004898:	2201      	movs	r2, #1
 800489a:	2109      	movs	r1, #9
 800489c:	f7ff ff8e 	bl	80047bc <std>
 80048a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80048a4:	2202      	movs	r2, #2
 80048a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048aa:	2112      	movs	r1, #18
 80048ac:	f7ff bf86 	b.w	80047bc <std>
 80048b0:	20001298 	.word	0x20001298
 80048b4:	20001160 	.word	0x20001160
 80048b8:	08004829 	.word	0x08004829

080048bc <__sfp_lock_acquire>:
 80048bc:	4801      	ldr	r0, [pc, #4]	@ (80048c4 <__sfp_lock_acquire+0x8>)
 80048be:	f000 bb0a 	b.w	8004ed6 <__retarget_lock_acquire_recursive>
 80048c2:	bf00      	nop
 80048c4:	200012a1 	.word	0x200012a1

080048c8 <__sfp_lock_release>:
 80048c8:	4801      	ldr	r0, [pc, #4]	@ (80048d0 <__sfp_lock_release+0x8>)
 80048ca:	f000 bb05 	b.w	8004ed8 <__retarget_lock_release_recursive>
 80048ce:	bf00      	nop
 80048d0:	200012a1 	.word	0x200012a1

080048d4 <__sinit>:
 80048d4:	b510      	push	{r4, lr}
 80048d6:	4604      	mov	r4, r0
 80048d8:	f7ff fff0 	bl	80048bc <__sfp_lock_acquire>
 80048dc:	6a23      	ldr	r3, [r4, #32]
 80048de:	b11b      	cbz	r3, 80048e8 <__sinit+0x14>
 80048e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048e4:	f7ff bff0 	b.w	80048c8 <__sfp_lock_release>
 80048e8:	4b04      	ldr	r3, [pc, #16]	@ (80048fc <__sinit+0x28>)
 80048ea:	6223      	str	r3, [r4, #32]
 80048ec:	4b04      	ldr	r3, [pc, #16]	@ (8004900 <__sinit+0x2c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1f5      	bne.n	80048e0 <__sinit+0xc>
 80048f4:	f7ff ffc4 	bl	8004880 <global_stdio_init.part.0>
 80048f8:	e7f2      	b.n	80048e0 <__sinit+0xc>
 80048fa:	bf00      	nop
 80048fc:	08004841 	.word	0x08004841
 8004900:	20001298 	.word	0x20001298

08004904 <_fwalk_sglue>:
 8004904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004908:	4607      	mov	r7, r0
 800490a:	4688      	mov	r8, r1
 800490c:	4614      	mov	r4, r2
 800490e:	2600      	movs	r6, #0
 8004910:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004914:	f1b9 0901 	subs.w	r9, r9, #1
 8004918:	d505      	bpl.n	8004926 <_fwalk_sglue+0x22>
 800491a:	6824      	ldr	r4, [r4, #0]
 800491c:	2c00      	cmp	r4, #0
 800491e:	d1f7      	bne.n	8004910 <_fwalk_sglue+0xc>
 8004920:	4630      	mov	r0, r6
 8004922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004926:	89ab      	ldrh	r3, [r5, #12]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d907      	bls.n	800493c <_fwalk_sglue+0x38>
 800492c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004930:	3301      	adds	r3, #1
 8004932:	d003      	beq.n	800493c <_fwalk_sglue+0x38>
 8004934:	4629      	mov	r1, r5
 8004936:	4638      	mov	r0, r7
 8004938:	47c0      	blx	r8
 800493a:	4306      	orrs	r6, r0
 800493c:	3568      	adds	r5, #104	@ 0x68
 800493e:	e7e9      	b.n	8004914 <_fwalk_sglue+0x10>

08004940 <iprintf>:
 8004940:	b40f      	push	{r0, r1, r2, r3}
 8004942:	b507      	push	{r0, r1, r2, lr}
 8004944:	4906      	ldr	r1, [pc, #24]	@ (8004960 <iprintf+0x20>)
 8004946:	ab04      	add	r3, sp, #16
 8004948:	6808      	ldr	r0, [r1, #0]
 800494a:	f853 2b04 	ldr.w	r2, [r3], #4
 800494e:	6881      	ldr	r1, [r0, #8]
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	f000 fbe9 	bl	8005128 <_vfiprintf_r>
 8004956:	b003      	add	sp, #12
 8004958:	f85d eb04 	ldr.w	lr, [sp], #4
 800495c:	b004      	add	sp, #16
 800495e:	4770      	bx	lr
 8004960:	2000001c 	.word	0x2000001c

08004964 <_puts_r>:
 8004964:	6a03      	ldr	r3, [r0, #32]
 8004966:	b570      	push	{r4, r5, r6, lr}
 8004968:	4605      	mov	r5, r0
 800496a:	460e      	mov	r6, r1
 800496c:	6884      	ldr	r4, [r0, #8]
 800496e:	b90b      	cbnz	r3, 8004974 <_puts_r+0x10>
 8004970:	f7ff ffb0 	bl	80048d4 <__sinit>
 8004974:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004976:	07db      	lsls	r3, r3, #31
 8004978:	d405      	bmi.n	8004986 <_puts_r+0x22>
 800497a:	89a3      	ldrh	r3, [r4, #12]
 800497c:	0598      	lsls	r0, r3, #22
 800497e:	d402      	bmi.n	8004986 <_puts_r+0x22>
 8004980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004982:	f000 faa8 	bl	8004ed6 <__retarget_lock_acquire_recursive>
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	0719      	lsls	r1, r3, #28
 800498a:	d502      	bpl.n	8004992 <_puts_r+0x2e>
 800498c:	6923      	ldr	r3, [r4, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d135      	bne.n	80049fe <_puts_r+0x9a>
 8004992:	4621      	mov	r1, r4
 8004994:	4628      	mov	r0, r5
 8004996:	f000 f979 	bl	8004c8c <__swsetup_r>
 800499a:	b380      	cbz	r0, 80049fe <_puts_r+0x9a>
 800499c:	f04f 35ff 	mov.w	r5, #4294967295
 80049a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049a2:	07da      	lsls	r2, r3, #31
 80049a4:	d405      	bmi.n	80049b2 <_puts_r+0x4e>
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	059b      	lsls	r3, r3, #22
 80049aa:	d402      	bmi.n	80049b2 <_puts_r+0x4e>
 80049ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049ae:	f000 fa93 	bl	8004ed8 <__retarget_lock_release_recursive>
 80049b2:	4628      	mov	r0, r5
 80049b4:	bd70      	pop	{r4, r5, r6, pc}
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	da04      	bge.n	80049c4 <_puts_r+0x60>
 80049ba:	69a2      	ldr	r2, [r4, #24]
 80049bc:	429a      	cmp	r2, r3
 80049be:	dc17      	bgt.n	80049f0 <_puts_r+0x8c>
 80049c0:	290a      	cmp	r1, #10
 80049c2:	d015      	beq.n	80049f0 <_puts_r+0x8c>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	6022      	str	r2, [r4, #0]
 80049ca:	7019      	strb	r1, [r3, #0]
 80049cc:	68a3      	ldr	r3, [r4, #8]
 80049ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049d2:	3b01      	subs	r3, #1
 80049d4:	60a3      	str	r3, [r4, #8]
 80049d6:	2900      	cmp	r1, #0
 80049d8:	d1ed      	bne.n	80049b6 <_puts_r+0x52>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	da11      	bge.n	8004a02 <_puts_r+0x9e>
 80049de:	4622      	mov	r2, r4
 80049e0:	210a      	movs	r1, #10
 80049e2:	4628      	mov	r0, r5
 80049e4:	f000 f913 	bl	8004c0e <__swbuf_r>
 80049e8:	3001      	adds	r0, #1
 80049ea:	d0d7      	beq.n	800499c <_puts_r+0x38>
 80049ec:	250a      	movs	r5, #10
 80049ee:	e7d7      	b.n	80049a0 <_puts_r+0x3c>
 80049f0:	4622      	mov	r2, r4
 80049f2:	4628      	mov	r0, r5
 80049f4:	f000 f90b 	bl	8004c0e <__swbuf_r>
 80049f8:	3001      	adds	r0, #1
 80049fa:	d1e7      	bne.n	80049cc <_puts_r+0x68>
 80049fc:	e7ce      	b.n	800499c <_puts_r+0x38>
 80049fe:	3e01      	subs	r6, #1
 8004a00:	e7e4      	b.n	80049cc <_puts_r+0x68>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	6022      	str	r2, [r4, #0]
 8004a08:	220a      	movs	r2, #10
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	e7ee      	b.n	80049ec <_puts_r+0x88>
	...

08004a10 <puts>:
 8004a10:	4b02      	ldr	r3, [pc, #8]	@ (8004a1c <puts+0xc>)
 8004a12:	4601      	mov	r1, r0
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	f7ff bfa5 	b.w	8004964 <_puts_r>
 8004a1a:	bf00      	nop
 8004a1c:	2000001c 	.word	0x2000001c

08004a20 <setvbuf>:
 8004a20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004a24:	461d      	mov	r5, r3
 8004a26:	4b57      	ldr	r3, [pc, #348]	@ (8004b84 <setvbuf+0x164>)
 8004a28:	4604      	mov	r4, r0
 8004a2a:	681f      	ldr	r7, [r3, #0]
 8004a2c:	460e      	mov	r6, r1
 8004a2e:	4690      	mov	r8, r2
 8004a30:	b127      	cbz	r7, 8004a3c <setvbuf+0x1c>
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	b913      	cbnz	r3, 8004a3c <setvbuf+0x1c>
 8004a36:	4638      	mov	r0, r7
 8004a38:	f7ff ff4c 	bl	80048d4 <__sinit>
 8004a3c:	f1b8 0f02 	cmp.w	r8, #2
 8004a40:	d006      	beq.n	8004a50 <setvbuf+0x30>
 8004a42:	f1b8 0f01 	cmp.w	r8, #1
 8004a46:	f200 809a 	bhi.w	8004b7e <setvbuf+0x15e>
 8004a4a:	2d00      	cmp	r5, #0
 8004a4c:	f2c0 8097 	blt.w	8004b7e <setvbuf+0x15e>
 8004a50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a52:	07d9      	lsls	r1, r3, #31
 8004a54:	d405      	bmi.n	8004a62 <setvbuf+0x42>
 8004a56:	89a3      	ldrh	r3, [r4, #12]
 8004a58:	059a      	lsls	r2, r3, #22
 8004a5a:	d402      	bmi.n	8004a62 <setvbuf+0x42>
 8004a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a5e:	f000 fa3a 	bl	8004ed6 <__retarget_lock_acquire_recursive>
 8004a62:	4621      	mov	r1, r4
 8004a64:	4638      	mov	r0, r7
 8004a66:	f000 fe89 	bl	800577c <_fflush_r>
 8004a6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a6c:	b141      	cbz	r1, 8004a80 <setvbuf+0x60>
 8004a6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a72:	4299      	cmp	r1, r3
 8004a74:	d002      	beq.n	8004a7c <setvbuf+0x5c>
 8004a76:	4638      	mov	r0, r7
 8004a78:	f000 fa30 	bl	8004edc <_free_r>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a80:	2300      	movs	r3, #0
 8004a82:	61a3      	str	r3, [r4, #24]
 8004a84:	6063      	str	r3, [r4, #4]
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	061b      	lsls	r3, r3, #24
 8004a8a:	d503      	bpl.n	8004a94 <setvbuf+0x74>
 8004a8c:	4638      	mov	r0, r7
 8004a8e:	6921      	ldr	r1, [r4, #16]
 8004a90:	f000 fa24 	bl	8004edc <_free_r>
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	f1b8 0f02 	cmp.w	r8, #2
 8004a9a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8004a9e:	f023 0303 	bic.w	r3, r3, #3
 8004aa2:	81a3      	strh	r3, [r4, #12]
 8004aa4:	d061      	beq.n	8004b6a <setvbuf+0x14a>
 8004aa6:	ab01      	add	r3, sp, #4
 8004aa8:	466a      	mov	r2, sp
 8004aaa:	4621      	mov	r1, r4
 8004aac:	4638      	mov	r0, r7
 8004aae:	f000 fe8d 	bl	80057cc <__swhatbuf_r>
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	4318      	orrs	r0, r3
 8004ab6:	81a0      	strh	r0, [r4, #12]
 8004ab8:	bb2d      	cbnz	r5, 8004b06 <setvbuf+0xe6>
 8004aba:	9d00      	ldr	r5, [sp, #0]
 8004abc:	4628      	mov	r0, r5
 8004abe:	f000 fa55 	bl	8004f6c <malloc>
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d152      	bne.n	8004b6e <setvbuf+0x14e>
 8004ac8:	f8dd 9000 	ldr.w	r9, [sp]
 8004acc:	45a9      	cmp	r9, r5
 8004ace:	d140      	bne.n	8004b52 <setvbuf+0x132>
 8004ad0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ad8:	f043 0202 	orr.w	r2, r3, #2
 8004adc:	81a2      	strh	r2, [r4, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	60a2      	str	r2, [r4, #8]
 8004ae2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8004ae6:	6022      	str	r2, [r4, #0]
 8004ae8:	6122      	str	r2, [r4, #16]
 8004aea:	2201      	movs	r2, #1
 8004aec:	6162      	str	r2, [r4, #20]
 8004aee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004af0:	07d6      	lsls	r6, r2, #31
 8004af2:	d404      	bmi.n	8004afe <setvbuf+0xde>
 8004af4:	0598      	lsls	r0, r3, #22
 8004af6:	d402      	bmi.n	8004afe <setvbuf+0xde>
 8004af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004afa:	f000 f9ed 	bl	8004ed8 <__retarget_lock_release_recursive>
 8004afe:	4628      	mov	r0, r5
 8004b00:	b003      	add	sp, #12
 8004b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b06:	2e00      	cmp	r6, #0
 8004b08:	d0d8      	beq.n	8004abc <setvbuf+0x9c>
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	b913      	cbnz	r3, 8004b14 <setvbuf+0xf4>
 8004b0e:	4638      	mov	r0, r7
 8004b10:	f7ff fee0 	bl	80048d4 <__sinit>
 8004b14:	f1b8 0f01 	cmp.w	r8, #1
 8004b18:	bf08      	it	eq
 8004b1a:	89a3      	ldrheq	r3, [r4, #12]
 8004b1c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004b20:	bf04      	itt	eq
 8004b22:	f043 0301 	orreq.w	r3, r3, #1
 8004b26:	81a3      	strheq	r3, [r4, #12]
 8004b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b2c:	6026      	str	r6, [r4, #0]
 8004b2e:	f013 0208 	ands.w	r2, r3, #8
 8004b32:	d01e      	beq.n	8004b72 <setvbuf+0x152>
 8004b34:	07d9      	lsls	r1, r3, #31
 8004b36:	bf41      	itttt	mi
 8004b38:	2200      	movmi	r2, #0
 8004b3a:	426d      	negmi	r5, r5
 8004b3c:	60a2      	strmi	r2, [r4, #8]
 8004b3e:	61a5      	strmi	r5, [r4, #24]
 8004b40:	bf58      	it	pl
 8004b42:	60a5      	strpl	r5, [r4, #8]
 8004b44:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b46:	07d2      	lsls	r2, r2, #31
 8004b48:	d401      	bmi.n	8004b4e <setvbuf+0x12e>
 8004b4a:	059b      	lsls	r3, r3, #22
 8004b4c:	d513      	bpl.n	8004b76 <setvbuf+0x156>
 8004b4e:	2500      	movs	r5, #0
 8004b50:	e7d5      	b.n	8004afe <setvbuf+0xde>
 8004b52:	4648      	mov	r0, r9
 8004b54:	f000 fa0a 	bl	8004f6c <malloc>
 8004b58:	4606      	mov	r6, r0
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d0b8      	beq.n	8004ad0 <setvbuf+0xb0>
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	464d      	mov	r5, r9
 8004b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b66:	81a3      	strh	r3, [r4, #12]
 8004b68:	e7cf      	b.n	8004b0a <setvbuf+0xea>
 8004b6a:	2500      	movs	r5, #0
 8004b6c:	e7b2      	b.n	8004ad4 <setvbuf+0xb4>
 8004b6e:	46a9      	mov	r9, r5
 8004b70:	e7f5      	b.n	8004b5e <setvbuf+0x13e>
 8004b72:	60a2      	str	r2, [r4, #8]
 8004b74:	e7e6      	b.n	8004b44 <setvbuf+0x124>
 8004b76:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b78:	f000 f9ae 	bl	8004ed8 <__retarget_lock_release_recursive>
 8004b7c:	e7e7      	b.n	8004b4e <setvbuf+0x12e>
 8004b7e:	f04f 35ff 	mov.w	r5, #4294967295
 8004b82:	e7bc      	b.n	8004afe <setvbuf+0xde>
 8004b84:	2000001c 	.word	0x2000001c

08004b88 <__sread>:
 8004b88:	b510      	push	{r4, lr}
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b90:	f000 f952 	bl	8004e38 <_read_r>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	bfab      	itete	ge
 8004b98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8004b9c:	181b      	addge	r3, r3, r0
 8004b9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ba2:	bfac      	ite	ge
 8004ba4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ba6:	81a3      	strhlt	r3, [r4, #12]
 8004ba8:	bd10      	pop	{r4, pc}

08004baa <__swrite>:
 8004baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bae:	461f      	mov	r7, r3
 8004bb0:	898b      	ldrh	r3, [r1, #12]
 8004bb2:	4605      	mov	r5, r0
 8004bb4:	05db      	lsls	r3, r3, #23
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	4616      	mov	r6, r2
 8004bba:	d505      	bpl.n	8004bc8 <__swrite+0x1e>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc4:	f000 f926 	bl	8004e14 <_lseek_r>
 8004bc8:	89a3      	ldrh	r3, [r4, #12]
 8004bca:	4632      	mov	r2, r6
 8004bcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bd0:	81a3      	strh	r3, [r4, #12]
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	463b      	mov	r3, r7
 8004bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bde:	f000 b93d 	b.w	8004e5c <_write_r>

08004be2 <__sseek>:
 8004be2:	b510      	push	{r4, lr}
 8004be4:	460c      	mov	r4, r1
 8004be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bea:	f000 f913 	bl	8004e14 <_lseek_r>
 8004bee:	1c43      	adds	r3, r0, #1
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	bf15      	itete	ne
 8004bf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004bf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004bfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004bfe:	81a3      	strheq	r3, [r4, #12]
 8004c00:	bf18      	it	ne
 8004c02:	81a3      	strhne	r3, [r4, #12]
 8004c04:	bd10      	pop	{r4, pc}

08004c06 <__sclose>:
 8004c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c0a:	f000 b89d 	b.w	8004d48 <_close_r>

08004c0e <__swbuf_r>:
 8004c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c10:	460e      	mov	r6, r1
 8004c12:	4614      	mov	r4, r2
 8004c14:	4605      	mov	r5, r0
 8004c16:	b118      	cbz	r0, 8004c20 <__swbuf_r+0x12>
 8004c18:	6a03      	ldr	r3, [r0, #32]
 8004c1a:	b90b      	cbnz	r3, 8004c20 <__swbuf_r+0x12>
 8004c1c:	f7ff fe5a 	bl	80048d4 <__sinit>
 8004c20:	69a3      	ldr	r3, [r4, #24]
 8004c22:	60a3      	str	r3, [r4, #8]
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	071a      	lsls	r2, r3, #28
 8004c28:	d501      	bpl.n	8004c2e <__swbuf_r+0x20>
 8004c2a:	6923      	ldr	r3, [r4, #16]
 8004c2c:	b943      	cbnz	r3, 8004c40 <__swbuf_r+0x32>
 8004c2e:	4621      	mov	r1, r4
 8004c30:	4628      	mov	r0, r5
 8004c32:	f000 f82b 	bl	8004c8c <__swsetup_r>
 8004c36:	b118      	cbz	r0, 8004c40 <__swbuf_r+0x32>
 8004c38:	f04f 37ff 	mov.w	r7, #4294967295
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	6922      	ldr	r2, [r4, #16]
 8004c44:	b2f6      	uxtb	r6, r6
 8004c46:	1a98      	subs	r0, r3, r2
 8004c48:	6963      	ldr	r3, [r4, #20]
 8004c4a:	4637      	mov	r7, r6
 8004c4c:	4283      	cmp	r3, r0
 8004c4e:	dc05      	bgt.n	8004c5c <__swbuf_r+0x4e>
 8004c50:	4621      	mov	r1, r4
 8004c52:	4628      	mov	r0, r5
 8004c54:	f000 fd92 	bl	800577c <_fflush_r>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d1ed      	bne.n	8004c38 <__swbuf_r+0x2a>
 8004c5c:	68a3      	ldr	r3, [r4, #8]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	60a3      	str	r3, [r4, #8]
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	6022      	str	r2, [r4, #0]
 8004c68:	701e      	strb	r6, [r3, #0]
 8004c6a:	6962      	ldr	r2, [r4, #20]
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d004      	beq.n	8004c7c <__swbuf_r+0x6e>
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	07db      	lsls	r3, r3, #31
 8004c76:	d5e1      	bpl.n	8004c3c <__swbuf_r+0x2e>
 8004c78:	2e0a      	cmp	r6, #10
 8004c7a:	d1df      	bne.n	8004c3c <__swbuf_r+0x2e>
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f000 fd7c 	bl	800577c <_fflush_r>
 8004c84:	2800      	cmp	r0, #0
 8004c86:	d0d9      	beq.n	8004c3c <__swbuf_r+0x2e>
 8004c88:	e7d6      	b.n	8004c38 <__swbuf_r+0x2a>
	...

08004c8c <__swsetup_r>:
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	4b29      	ldr	r3, [pc, #164]	@ (8004d34 <__swsetup_r+0xa8>)
 8004c90:	4605      	mov	r5, r0
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	460c      	mov	r4, r1
 8004c96:	b118      	cbz	r0, 8004ca0 <__swsetup_r+0x14>
 8004c98:	6a03      	ldr	r3, [r0, #32]
 8004c9a:	b90b      	cbnz	r3, 8004ca0 <__swsetup_r+0x14>
 8004c9c:	f7ff fe1a 	bl	80048d4 <__sinit>
 8004ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca4:	0719      	lsls	r1, r3, #28
 8004ca6:	d422      	bmi.n	8004cee <__swsetup_r+0x62>
 8004ca8:	06da      	lsls	r2, r3, #27
 8004caa:	d407      	bmi.n	8004cbc <__swsetup_r+0x30>
 8004cac:	2209      	movs	r2, #9
 8004cae:	602a      	str	r2, [r5, #0]
 8004cb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb8:	81a3      	strh	r3, [r4, #12]
 8004cba:	e033      	b.n	8004d24 <__swsetup_r+0x98>
 8004cbc:	0758      	lsls	r0, r3, #29
 8004cbe:	d512      	bpl.n	8004ce6 <__swsetup_r+0x5a>
 8004cc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cc2:	b141      	cbz	r1, 8004cd6 <__swsetup_r+0x4a>
 8004cc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cc8:	4299      	cmp	r1, r3
 8004cca:	d002      	beq.n	8004cd2 <__swsetup_r+0x46>
 8004ccc:	4628      	mov	r0, r5
 8004cce:	f000 f905 	bl	8004edc <_free_r>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004cdc:	81a3      	strh	r3, [r4, #12]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	6063      	str	r3, [r4, #4]
 8004ce2:	6923      	ldr	r3, [r4, #16]
 8004ce4:	6023      	str	r3, [r4, #0]
 8004ce6:	89a3      	ldrh	r3, [r4, #12]
 8004ce8:	f043 0308 	orr.w	r3, r3, #8
 8004cec:	81a3      	strh	r3, [r4, #12]
 8004cee:	6923      	ldr	r3, [r4, #16]
 8004cf0:	b94b      	cbnz	r3, 8004d06 <__swsetup_r+0x7a>
 8004cf2:	89a3      	ldrh	r3, [r4, #12]
 8004cf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cfc:	d003      	beq.n	8004d06 <__swsetup_r+0x7a>
 8004cfe:	4621      	mov	r1, r4
 8004d00:	4628      	mov	r0, r5
 8004d02:	f000 fd88 	bl	8005816 <__smakebuf_r>
 8004d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d0a:	f013 0201 	ands.w	r2, r3, #1
 8004d0e:	d00a      	beq.n	8004d26 <__swsetup_r+0x9a>
 8004d10:	2200      	movs	r2, #0
 8004d12:	60a2      	str	r2, [r4, #8]
 8004d14:	6962      	ldr	r2, [r4, #20]
 8004d16:	4252      	negs	r2, r2
 8004d18:	61a2      	str	r2, [r4, #24]
 8004d1a:	6922      	ldr	r2, [r4, #16]
 8004d1c:	b942      	cbnz	r2, 8004d30 <__swsetup_r+0xa4>
 8004d1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d22:	d1c5      	bne.n	8004cb0 <__swsetup_r+0x24>
 8004d24:	bd38      	pop	{r3, r4, r5, pc}
 8004d26:	0799      	lsls	r1, r3, #30
 8004d28:	bf58      	it	pl
 8004d2a:	6962      	ldrpl	r2, [r4, #20]
 8004d2c:	60a2      	str	r2, [r4, #8]
 8004d2e:	e7f4      	b.n	8004d1a <__swsetup_r+0x8e>
 8004d30:	2000      	movs	r0, #0
 8004d32:	e7f7      	b.n	8004d24 <__swsetup_r+0x98>
 8004d34:	2000001c 	.word	0x2000001c

08004d38 <memset>:
 8004d38:	4603      	mov	r3, r0
 8004d3a:	4402      	add	r2, r0
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d100      	bne.n	8004d42 <memset+0xa>
 8004d40:	4770      	bx	lr
 8004d42:	f803 1b01 	strb.w	r1, [r3], #1
 8004d46:	e7f9      	b.n	8004d3c <memset+0x4>

08004d48 <_close_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	4d05      	ldr	r5, [pc, #20]	@ (8004d64 <_close_r+0x1c>)
 8004d4e:	4604      	mov	r4, r0
 8004d50:	4608      	mov	r0, r1
 8004d52:	602b      	str	r3, [r5, #0]
 8004d54:	f7fb fe0e 	bl	8000974 <_close>
 8004d58:	1c43      	adds	r3, r0, #1
 8004d5a:	d102      	bne.n	8004d62 <_close_r+0x1a>
 8004d5c:	682b      	ldr	r3, [r5, #0]
 8004d5e:	b103      	cbz	r3, 8004d62 <_close_r+0x1a>
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	bd38      	pop	{r3, r4, r5, pc}
 8004d64:	2000129c 	.word	0x2000129c

08004d68 <_reclaim_reent>:
 8004d68:	4b29      	ldr	r3, [pc, #164]	@ (8004e10 <_reclaim_reent+0xa8>)
 8004d6a:	b570      	push	{r4, r5, r6, lr}
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4604      	mov	r4, r0
 8004d70:	4283      	cmp	r3, r0
 8004d72:	d04b      	beq.n	8004e0c <_reclaim_reent+0xa4>
 8004d74:	69c3      	ldr	r3, [r0, #28]
 8004d76:	b1ab      	cbz	r3, 8004da4 <_reclaim_reent+0x3c>
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	b16b      	cbz	r3, 8004d98 <_reclaim_reent+0x30>
 8004d7c:	2500      	movs	r5, #0
 8004d7e:	69e3      	ldr	r3, [r4, #28]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	5959      	ldr	r1, [r3, r5]
 8004d84:	2900      	cmp	r1, #0
 8004d86:	d13b      	bne.n	8004e00 <_reclaim_reent+0x98>
 8004d88:	3504      	adds	r5, #4
 8004d8a:	2d80      	cmp	r5, #128	@ 0x80
 8004d8c:	d1f7      	bne.n	8004d7e <_reclaim_reent+0x16>
 8004d8e:	69e3      	ldr	r3, [r4, #28]
 8004d90:	4620      	mov	r0, r4
 8004d92:	68d9      	ldr	r1, [r3, #12]
 8004d94:	f000 f8a2 	bl	8004edc <_free_r>
 8004d98:	69e3      	ldr	r3, [r4, #28]
 8004d9a:	6819      	ldr	r1, [r3, #0]
 8004d9c:	b111      	cbz	r1, 8004da4 <_reclaim_reent+0x3c>
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f000 f89c 	bl	8004edc <_free_r>
 8004da4:	6961      	ldr	r1, [r4, #20]
 8004da6:	b111      	cbz	r1, 8004dae <_reclaim_reent+0x46>
 8004da8:	4620      	mov	r0, r4
 8004daa:	f000 f897 	bl	8004edc <_free_r>
 8004dae:	69e1      	ldr	r1, [r4, #28]
 8004db0:	b111      	cbz	r1, 8004db8 <_reclaim_reent+0x50>
 8004db2:	4620      	mov	r0, r4
 8004db4:	f000 f892 	bl	8004edc <_free_r>
 8004db8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004dba:	b111      	cbz	r1, 8004dc2 <_reclaim_reent+0x5a>
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	f000 f88d 	bl	8004edc <_free_r>
 8004dc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dc4:	b111      	cbz	r1, 8004dcc <_reclaim_reent+0x64>
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f000 f888 	bl	8004edc <_free_r>
 8004dcc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004dce:	b111      	cbz	r1, 8004dd6 <_reclaim_reent+0x6e>
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f000 f883 	bl	8004edc <_free_r>
 8004dd6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004dd8:	b111      	cbz	r1, 8004de0 <_reclaim_reent+0x78>
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f000 f87e 	bl	8004edc <_free_r>
 8004de0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004de2:	b111      	cbz	r1, 8004dea <_reclaim_reent+0x82>
 8004de4:	4620      	mov	r0, r4
 8004de6:	f000 f879 	bl	8004edc <_free_r>
 8004dea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004dec:	b111      	cbz	r1, 8004df4 <_reclaim_reent+0x8c>
 8004dee:	4620      	mov	r0, r4
 8004df0:	f000 f874 	bl	8004edc <_free_r>
 8004df4:	6a23      	ldr	r3, [r4, #32]
 8004df6:	b14b      	cbz	r3, 8004e0c <_reclaim_reent+0xa4>
 8004df8:	4620      	mov	r0, r4
 8004dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004dfe:	4718      	bx	r3
 8004e00:	680e      	ldr	r6, [r1, #0]
 8004e02:	4620      	mov	r0, r4
 8004e04:	f000 f86a 	bl	8004edc <_free_r>
 8004e08:	4631      	mov	r1, r6
 8004e0a:	e7bb      	b.n	8004d84 <_reclaim_reent+0x1c>
 8004e0c:	bd70      	pop	{r4, r5, r6, pc}
 8004e0e:	bf00      	nop
 8004e10:	2000001c 	.word	0x2000001c

08004e14 <_lseek_r>:
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	4604      	mov	r4, r0
 8004e18:	4608      	mov	r0, r1
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	4d05      	ldr	r5, [pc, #20]	@ (8004e34 <_lseek_r+0x20>)
 8004e20:	602a      	str	r2, [r5, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f7fb fdbd 	bl	80009a2 <_lseek>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	d102      	bne.n	8004e32 <_lseek_r+0x1e>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	b103      	cbz	r3, 8004e32 <_lseek_r+0x1e>
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	bd38      	pop	{r3, r4, r5, pc}
 8004e34:	2000129c 	.word	0x2000129c

08004e38 <_read_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	4611      	mov	r1, r2
 8004e40:	2200      	movs	r2, #0
 8004e42:	4d05      	ldr	r5, [pc, #20]	@ (8004e58 <_read_r+0x20>)
 8004e44:	602a      	str	r2, [r5, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	f7fb fdbc 	bl	80009c4 <_read>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d102      	bne.n	8004e56 <_read_r+0x1e>
 8004e50:	682b      	ldr	r3, [r5, #0]
 8004e52:	b103      	cbz	r3, 8004e56 <_read_r+0x1e>
 8004e54:	6023      	str	r3, [r4, #0]
 8004e56:	bd38      	pop	{r3, r4, r5, pc}
 8004e58:	2000129c 	.word	0x2000129c

08004e5c <_write_r>:
 8004e5c:	b538      	push	{r3, r4, r5, lr}
 8004e5e:	4604      	mov	r4, r0
 8004e60:	4608      	mov	r0, r1
 8004e62:	4611      	mov	r1, r2
 8004e64:	2200      	movs	r2, #0
 8004e66:	4d05      	ldr	r5, [pc, #20]	@ (8004e7c <_write_r+0x20>)
 8004e68:	602a      	str	r2, [r5, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f7fb fd56 	bl	800091c <_write>
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	d102      	bne.n	8004e7a <_write_r+0x1e>
 8004e74:	682b      	ldr	r3, [r5, #0]
 8004e76:	b103      	cbz	r3, 8004e7a <_write_r+0x1e>
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	bd38      	pop	{r3, r4, r5, pc}
 8004e7c:	2000129c 	.word	0x2000129c

08004e80 <__errno>:
 8004e80:	4b01      	ldr	r3, [pc, #4]	@ (8004e88 <__errno+0x8>)
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	2000001c 	.word	0x2000001c

08004e8c <__libc_init_array>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	2600      	movs	r6, #0
 8004e90:	4d0c      	ldr	r5, [pc, #48]	@ (8004ec4 <__libc_init_array+0x38>)
 8004e92:	4c0d      	ldr	r4, [pc, #52]	@ (8004ec8 <__libc_init_array+0x3c>)
 8004e94:	1b64      	subs	r4, r4, r5
 8004e96:	10a4      	asrs	r4, r4, #2
 8004e98:	42a6      	cmp	r6, r4
 8004e9a:	d109      	bne.n	8004eb0 <__libc_init_array+0x24>
 8004e9c:	f000 fd38 	bl	8005910 <_init>
 8004ea0:	2600      	movs	r6, #0
 8004ea2:	4d0a      	ldr	r5, [pc, #40]	@ (8004ecc <__libc_init_array+0x40>)
 8004ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8004ed0 <__libc_init_array+0x44>)
 8004ea6:	1b64      	subs	r4, r4, r5
 8004ea8:	10a4      	asrs	r4, r4, #2
 8004eaa:	42a6      	cmp	r6, r4
 8004eac:	d105      	bne.n	8004eba <__libc_init_array+0x2e>
 8004eae:	bd70      	pop	{r4, r5, r6, pc}
 8004eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb4:	4798      	blx	r3
 8004eb6:	3601      	adds	r6, #1
 8004eb8:	e7ee      	b.n	8004e98 <__libc_init_array+0xc>
 8004eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ebe:	4798      	blx	r3
 8004ec0:	3601      	adds	r6, #1
 8004ec2:	e7f2      	b.n	8004eaa <__libc_init_array+0x1e>
 8004ec4:	08005a90 	.word	0x08005a90
 8004ec8:	08005a90 	.word	0x08005a90
 8004ecc:	08005a90 	.word	0x08005a90
 8004ed0:	08005a94 	.word	0x08005a94

08004ed4 <__retarget_lock_init_recursive>:
 8004ed4:	4770      	bx	lr

08004ed6 <__retarget_lock_acquire_recursive>:
 8004ed6:	4770      	bx	lr

08004ed8 <__retarget_lock_release_recursive>:
 8004ed8:	4770      	bx	lr
	...

08004edc <_free_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4605      	mov	r5, r0
 8004ee0:	2900      	cmp	r1, #0
 8004ee2:	d040      	beq.n	8004f66 <_free_r+0x8a>
 8004ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ee8:	1f0c      	subs	r4, r1, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bfb8      	it	lt
 8004eee:	18e4      	addlt	r4, r4, r3
 8004ef0:	f000 f8e6 	bl	80050c0 <__malloc_lock>
 8004ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f68 <_free_r+0x8c>)
 8004ef6:	6813      	ldr	r3, [r2, #0]
 8004ef8:	b933      	cbnz	r3, 8004f08 <_free_r+0x2c>
 8004efa:	6063      	str	r3, [r4, #4]
 8004efc:	6014      	str	r4, [r2, #0]
 8004efe:	4628      	mov	r0, r5
 8004f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f04:	f000 b8e2 	b.w	80050cc <__malloc_unlock>
 8004f08:	42a3      	cmp	r3, r4
 8004f0a:	d908      	bls.n	8004f1e <_free_r+0x42>
 8004f0c:	6820      	ldr	r0, [r4, #0]
 8004f0e:	1821      	adds	r1, r4, r0
 8004f10:	428b      	cmp	r3, r1
 8004f12:	bf01      	itttt	eq
 8004f14:	6819      	ldreq	r1, [r3, #0]
 8004f16:	685b      	ldreq	r3, [r3, #4]
 8004f18:	1809      	addeq	r1, r1, r0
 8004f1a:	6021      	streq	r1, [r4, #0]
 8004f1c:	e7ed      	b.n	8004efa <_free_r+0x1e>
 8004f1e:	461a      	mov	r2, r3
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	b10b      	cbz	r3, 8004f28 <_free_r+0x4c>
 8004f24:	42a3      	cmp	r3, r4
 8004f26:	d9fa      	bls.n	8004f1e <_free_r+0x42>
 8004f28:	6811      	ldr	r1, [r2, #0]
 8004f2a:	1850      	adds	r0, r2, r1
 8004f2c:	42a0      	cmp	r0, r4
 8004f2e:	d10b      	bne.n	8004f48 <_free_r+0x6c>
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	4401      	add	r1, r0
 8004f34:	1850      	adds	r0, r2, r1
 8004f36:	4283      	cmp	r3, r0
 8004f38:	6011      	str	r1, [r2, #0]
 8004f3a:	d1e0      	bne.n	8004efe <_free_r+0x22>
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	4408      	add	r0, r1
 8004f42:	6010      	str	r0, [r2, #0]
 8004f44:	6053      	str	r3, [r2, #4]
 8004f46:	e7da      	b.n	8004efe <_free_r+0x22>
 8004f48:	d902      	bls.n	8004f50 <_free_r+0x74>
 8004f4a:	230c      	movs	r3, #12
 8004f4c:	602b      	str	r3, [r5, #0]
 8004f4e:	e7d6      	b.n	8004efe <_free_r+0x22>
 8004f50:	6820      	ldr	r0, [r4, #0]
 8004f52:	1821      	adds	r1, r4, r0
 8004f54:	428b      	cmp	r3, r1
 8004f56:	bf01      	itttt	eq
 8004f58:	6819      	ldreq	r1, [r3, #0]
 8004f5a:	685b      	ldreq	r3, [r3, #4]
 8004f5c:	1809      	addeq	r1, r1, r0
 8004f5e:	6021      	streq	r1, [r4, #0]
 8004f60:	6063      	str	r3, [r4, #4]
 8004f62:	6054      	str	r4, [r2, #4]
 8004f64:	e7cb      	b.n	8004efe <_free_r+0x22>
 8004f66:	bd38      	pop	{r3, r4, r5, pc}
 8004f68:	200012a8 	.word	0x200012a8

08004f6c <malloc>:
 8004f6c:	4b02      	ldr	r3, [pc, #8]	@ (8004f78 <malloc+0xc>)
 8004f6e:	4601      	mov	r1, r0
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	f000 b825 	b.w	8004fc0 <_malloc_r>
 8004f76:	bf00      	nop
 8004f78:	2000001c 	.word	0x2000001c

08004f7c <sbrk_aligned>:
 8004f7c:	b570      	push	{r4, r5, r6, lr}
 8004f7e:	4e0f      	ldr	r6, [pc, #60]	@ (8004fbc <sbrk_aligned+0x40>)
 8004f80:	460c      	mov	r4, r1
 8004f82:	6831      	ldr	r1, [r6, #0]
 8004f84:	4605      	mov	r5, r0
 8004f86:	b911      	cbnz	r1, 8004f8e <sbrk_aligned+0x12>
 8004f88:	f000 fca4 	bl	80058d4 <_sbrk_r>
 8004f8c:	6030      	str	r0, [r6, #0]
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4628      	mov	r0, r5
 8004f92:	f000 fc9f 	bl	80058d4 <_sbrk_r>
 8004f96:	1c43      	adds	r3, r0, #1
 8004f98:	d103      	bne.n	8004fa2 <sbrk_aligned+0x26>
 8004f9a:	f04f 34ff 	mov.w	r4, #4294967295
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	bd70      	pop	{r4, r5, r6, pc}
 8004fa2:	1cc4      	adds	r4, r0, #3
 8004fa4:	f024 0403 	bic.w	r4, r4, #3
 8004fa8:	42a0      	cmp	r0, r4
 8004faa:	d0f8      	beq.n	8004f9e <sbrk_aligned+0x22>
 8004fac:	1a21      	subs	r1, r4, r0
 8004fae:	4628      	mov	r0, r5
 8004fb0:	f000 fc90 	bl	80058d4 <_sbrk_r>
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d1f2      	bne.n	8004f9e <sbrk_aligned+0x22>
 8004fb8:	e7ef      	b.n	8004f9a <sbrk_aligned+0x1e>
 8004fba:	bf00      	nop
 8004fbc:	200012a4 	.word	0x200012a4

08004fc0 <_malloc_r>:
 8004fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fc4:	1ccd      	adds	r5, r1, #3
 8004fc6:	f025 0503 	bic.w	r5, r5, #3
 8004fca:	3508      	adds	r5, #8
 8004fcc:	2d0c      	cmp	r5, #12
 8004fce:	bf38      	it	cc
 8004fd0:	250c      	movcc	r5, #12
 8004fd2:	2d00      	cmp	r5, #0
 8004fd4:	4606      	mov	r6, r0
 8004fd6:	db01      	blt.n	8004fdc <_malloc_r+0x1c>
 8004fd8:	42a9      	cmp	r1, r5
 8004fda:	d904      	bls.n	8004fe6 <_malloc_r+0x26>
 8004fdc:	230c      	movs	r3, #12
 8004fde:	6033      	str	r3, [r6, #0]
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fe6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050bc <_malloc_r+0xfc>
 8004fea:	f000 f869 	bl	80050c0 <__malloc_lock>
 8004fee:	f8d8 3000 	ldr.w	r3, [r8]
 8004ff2:	461c      	mov	r4, r3
 8004ff4:	bb44      	cbnz	r4, 8005048 <_malloc_r+0x88>
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	f7ff ffbf 	bl	8004f7c <sbrk_aligned>
 8004ffe:	1c43      	adds	r3, r0, #1
 8005000:	4604      	mov	r4, r0
 8005002:	d158      	bne.n	80050b6 <_malloc_r+0xf6>
 8005004:	f8d8 4000 	ldr.w	r4, [r8]
 8005008:	4627      	mov	r7, r4
 800500a:	2f00      	cmp	r7, #0
 800500c:	d143      	bne.n	8005096 <_malloc_r+0xd6>
 800500e:	2c00      	cmp	r4, #0
 8005010:	d04b      	beq.n	80050aa <_malloc_r+0xea>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	4639      	mov	r1, r7
 8005016:	4630      	mov	r0, r6
 8005018:	eb04 0903 	add.w	r9, r4, r3
 800501c:	f000 fc5a 	bl	80058d4 <_sbrk_r>
 8005020:	4581      	cmp	r9, r0
 8005022:	d142      	bne.n	80050aa <_malloc_r+0xea>
 8005024:	6821      	ldr	r1, [r4, #0]
 8005026:	4630      	mov	r0, r6
 8005028:	1a6d      	subs	r5, r5, r1
 800502a:	4629      	mov	r1, r5
 800502c:	f7ff ffa6 	bl	8004f7c <sbrk_aligned>
 8005030:	3001      	adds	r0, #1
 8005032:	d03a      	beq.n	80050aa <_malloc_r+0xea>
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	442b      	add	r3, r5
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	f8d8 3000 	ldr.w	r3, [r8]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	bb62      	cbnz	r2, 800509c <_malloc_r+0xdc>
 8005042:	f8c8 7000 	str.w	r7, [r8]
 8005046:	e00f      	b.n	8005068 <_malloc_r+0xa8>
 8005048:	6822      	ldr	r2, [r4, #0]
 800504a:	1b52      	subs	r2, r2, r5
 800504c:	d420      	bmi.n	8005090 <_malloc_r+0xd0>
 800504e:	2a0b      	cmp	r2, #11
 8005050:	d917      	bls.n	8005082 <_malloc_r+0xc2>
 8005052:	1961      	adds	r1, r4, r5
 8005054:	42a3      	cmp	r3, r4
 8005056:	6025      	str	r5, [r4, #0]
 8005058:	bf18      	it	ne
 800505a:	6059      	strne	r1, [r3, #4]
 800505c:	6863      	ldr	r3, [r4, #4]
 800505e:	bf08      	it	eq
 8005060:	f8c8 1000 	streq.w	r1, [r8]
 8005064:	5162      	str	r2, [r4, r5]
 8005066:	604b      	str	r3, [r1, #4]
 8005068:	4630      	mov	r0, r6
 800506a:	f000 f82f 	bl	80050cc <__malloc_unlock>
 800506e:	f104 000b 	add.w	r0, r4, #11
 8005072:	1d23      	adds	r3, r4, #4
 8005074:	f020 0007 	bic.w	r0, r0, #7
 8005078:	1ac2      	subs	r2, r0, r3
 800507a:	bf1c      	itt	ne
 800507c:	1a1b      	subne	r3, r3, r0
 800507e:	50a3      	strne	r3, [r4, r2]
 8005080:	e7af      	b.n	8004fe2 <_malloc_r+0x22>
 8005082:	6862      	ldr	r2, [r4, #4]
 8005084:	42a3      	cmp	r3, r4
 8005086:	bf0c      	ite	eq
 8005088:	f8c8 2000 	streq.w	r2, [r8]
 800508c:	605a      	strne	r2, [r3, #4]
 800508e:	e7eb      	b.n	8005068 <_malloc_r+0xa8>
 8005090:	4623      	mov	r3, r4
 8005092:	6864      	ldr	r4, [r4, #4]
 8005094:	e7ae      	b.n	8004ff4 <_malloc_r+0x34>
 8005096:	463c      	mov	r4, r7
 8005098:	687f      	ldr	r7, [r7, #4]
 800509a:	e7b6      	b.n	800500a <_malloc_r+0x4a>
 800509c:	461a      	mov	r2, r3
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	42a3      	cmp	r3, r4
 80050a2:	d1fb      	bne.n	800509c <_malloc_r+0xdc>
 80050a4:	2300      	movs	r3, #0
 80050a6:	6053      	str	r3, [r2, #4]
 80050a8:	e7de      	b.n	8005068 <_malloc_r+0xa8>
 80050aa:	230c      	movs	r3, #12
 80050ac:	4630      	mov	r0, r6
 80050ae:	6033      	str	r3, [r6, #0]
 80050b0:	f000 f80c 	bl	80050cc <__malloc_unlock>
 80050b4:	e794      	b.n	8004fe0 <_malloc_r+0x20>
 80050b6:	6005      	str	r5, [r0, #0]
 80050b8:	e7d6      	b.n	8005068 <_malloc_r+0xa8>
 80050ba:	bf00      	nop
 80050bc:	200012a8 	.word	0x200012a8

080050c0 <__malloc_lock>:
 80050c0:	4801      	ldr	r0, [pc, #4]	@ (80050c8 <__malloc_lock+0x8>)
 80050c2:	f7ff bf08 	b.w	8004ed6 <__retarget_lock_acquire_recursive>
 80050c6:	bf00      	nop
 80050c8:	200012a0 	.word	0x200012a0

080050cc <__malloc_unlock>:
 80050cc:	4801      	ldr	r0, [pc, #4]	@ (80050d4 <__malloc_unlock+0x8>)
 80050ce:	f7ff bf03 	b.w	8004ed8 <__retarget_lock_release_recursive>
 80050d2:	bf00      	nop
 80050d4:	200012a0 	.word	0x200012a0

080050d8 <__sfputc_r>:
 80050d8:	6893      	ldr	r3, [r2, #8]
 80050da:	b410      	push	{r4}
 80050dc:	3b01      	subs	r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	6093      	str	r3, [r2, #8]
 80050e2:	da07      	bge.n	80050f4 <__sfputc_r+0x1c>
 80050e4:	6994      	ldr	r4, [r2, #24]
 80050e6:	42a3      	cmp	r3, r4
 80050e8:	db01      	blt.n	80050ee <__sfputc_r+0x16>
 80050ea:	290a      	cmp	r1, #10
 80050ec:	d102      	bne.n	80050f4 <__sfputc_r+0x1c>
 80050ee:	bc10      	pop	{r4}
 80050f0:	f7ff bd8d 	b.w	8004c0e <__swbuf_r>
 80050f4:	6813      	ldr	r3, [r2, #0]
 80050f6:	1c58      	adds	r0, r3, #1
 80050f8:	6010      	str	r0, [r2, #0]
 80050fa:	7019      	strb	r1, [r3, #0]
 80050fc:	4608      	mov	r0, r1
 80050fe:	bc10      	pop	{r4}
 8005100:	4770      	bx	lr

08005102 <__sfputs_r>:
 8005102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005104:	4606      	mov	r6, r0
 8005106:	460f      	mov	r7, r1
 8005108:	4614      	mov	r4, r2
 800510a:	18d5      	adds	r5, r2, r3
 800510c:	42ac      	cmp	r4, r5
 800510e:	d101      	bne.n	8005114 <__sfputs_r+0x12>
 8005110:	2000      	movs	r0, #0
 8005112:	e007      	b.n	8005124 <__sfputs_r+0x22>
 8005114:	463a      	mov	r2, r7
 8005116:	4630      	mov	r0, r6
 8005118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800511c:	f7ff ffdc 	bl	80050d8 <__sfputc_r>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d1f3      	bne.n	800510c <__sfputs_r+0xa>
 8005124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005128 <_vfiprintf_r>:
 8005128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512c:	460d      	mov	r5, r1
 800512e:	4614      	mov	r4, r2
 8005130:	4698      	mov	r8, r3
 8005132:	4606      	mov	r6, r0
 8005134:	b09d      	sub	sp, #116	@ 0x74
 8005136:	b118      	cbz	r0, 8005140 <_vfiprintf_r+0x18>
 8005138:	6a03      	ldr	r3, [r0, #32]
 800513a:	b90b      	cbnz	r3, 8005140 <_vfiprintf_r+0x18>
 800513c:	f7ff fbca 	bl	80048d4 <__sinit>
 8005140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005142:	07d9      	lsls	r1, r3, #31
 8005144:	d405      	bmi.n	8005152 <_vfiprintf_r+0x2a>
 8005146:	89ab      	ldrh	r3, [r5, #12]
 8005148:	059a      	lsls	r2, r3, #22
 800514a:	d402      	bmi.n	8005152 <_vfiprintf_r+0x2a>
 800514c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800514e:	f7ff fec2 	bl	8004ed6 <__retarget_lock_acquire_recursive>
 8005152:	89ab      	ldrh	r3, [r5, #12]
 8005154:	071b      	lsls	r3, r3, #28
 8005156:	d501      	bpl.n	800515c <_vfiprintf_r+0x34>
 8005158:	692b      	ldr	r3, [r5, #16]
 800515a:	b99b      	cbnz	r3, 8005184 <_vfiprintf_r+0x5c>
 800515c:	4629      	mov	r1, r5
 800515e:	4630      	mov	r0, r6
 8005160:	f7ff fd94 	bl	8004c8c <__swsetup_r>
 8005164:	b170      	cbz	r0, 8005184 <_vfiprintf_r+0x5c>
 8005166:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005168:	07dc      	lsls	r4, r3, #31
 800516a:	d504      	bpl.n	8005176 <_vfiprintf_r+0x4e>
 800516c:	f04f 30ff 	mov.w	r0, #4294967295
 8005170:	b01d      	add	sp, #116	@ 0x74
 8005172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005176:	89ab      	ldrh	r3, [r5, #12]
 8005178:	0598      	lsls	r0, r3, #22
 800517a:	d4f7      	bmi.n	800516c <_vfiprintf_r+0x44>
 800517c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800517e:	f7ff feab 	bl	8004ed8 <__retarget_lock_release_recursive>
 8005182:	e7f3      	b.n	800516c <_vfiprintf_r+0x44>
 8005184:	2300      	movs	r3, #0
 8005186:	9309      	str	r3, [sp, #36]	@ 0x24
 8005188:	2320      	movs	r3, #32
 800518a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800518e:	2330      	movs	r3, #48	@ 0x30
 8005190:	f04f 0901 	mov.w	r9, #1
 8005194:	f8cd 800c 	str.w	r8, [sp, #12]
 8005198:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005344 <_vfiprintf_r+0x21c>
 800519c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051a0:	4623      	mov	r3, r4
 80051a2:	469a      	mov	sl, r3
 80051a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051a8:	b10a      	cbz	r2, 80051ae <_vfiprintf_r+0x86>
 80051aa:	2a25      	cmp	r2, #37	@ 0x25
 80051ac:	d1f9      	bne.n	80051a2 <_vfiprintf_r+0x7a>
 80051ae:	ebba 0b04 	subs.w	fp, sl, r4
 80051b2:	d00b      	beq.n	80051cc <_vfiprintf_r+0xa4>
 80051b4:	465b      	mov	r3, fp
 80051b6:	4622      	mov	r2, r4
 80051b8:	4629      	mov	r1, r5
 80051ba:	4630      	mov	r0, r6
 80051bc:	f7ff ffa1 	bl	8005102 <__sfputs_r>
 80051c0:	3001      	adds	r0, #1
 80051c2:	f000 80a7 	beq.w	8005314 <_vfiprintf_r+0x1ec>
 80051c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051c8:	445a      	add	r2, fp
 80051ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80051cc:	f89a 3000 	ldrb.w	r3, [sl]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 809f 	beq.w	8005314 <_vfiprintf_r+0x1ec>
 80051d6:	2300      	movs	r3, #0
 80051d8:	f04f 32ff 	mov.w	r2, #4294967295
 80051dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051e0:	f10a 0a01 	add.w	sl, sl, #1
 80051e4:	9304      	str	r3, [sp, #16]
 80051e6:	9307      	str	r3, [sp, #28]
 80051e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80051ee:	4654      	mov	r4, sl
 80051f0:	2205      	movs	r2, #5
 80051f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f6:	4853      	ldr	r0, [pc, #332]	@ (8005344 <_vfiprintf_r+0x21c>)
 80051f8:	f000 fb7c 	bl	80058f4 <memchr>
 80051fc:	9a04      	ldr	r2, [sp, #16]
 80051fe:	b9d8      	cbnz	r0, 8005238 <_vfiprintf_r+0x110>
 8005200:	06d1      	lsls	r1, r2, #27
 8005202:	bf44      	itt	mi
 8005204:	2320      	movmi	r3, #32
 8005206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800520a:	0713      	lsls	r3, r2, #28
 800520c:	bf44      	itt	mi
 800520e:	232b      	movmi	r3, #43	@ 0x2b
 8005210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005214:	f89a 3000 	ldrb.w	r3, [sl]
 8005218:	2b2a      	cmp	r3, #42	@ 0x2a
 800521a:	d015      	beq.n	8005248 <_vfiprintf_r+0x120>
 800521c:	4654      	mov	r4, sl
 800521e:	2000      	movs	r0, #0
 8005220:	f04f 0c0a 	mov.w	ip, #10
 8005224:	9a07      	ldr	r2, [sp, #28]
 8005226:	4621      	mov	r1, r4
 8005228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800522c:	3b30      	subs	r3, #48	@ 0x30
 800522e:	2b09      	cmp	r3, #9
 8005230:	d94b      	bls.n	80052ca <_vfiprintf_r+0x1a2>
 8005232:	b1b0      	cbz	r0, 8005262 <_vfiprintf_r+0x13a>
 8005234:	9207      	str	r2, [sp, #28]
 8005236:	e014      	b.n	8005262 <_vfiprintf_r+0x13a>
 8005238:	eba0 0308 	sub.w	r3, r0, r8
 800523c:	fa09 f303 	lsl.w	r3, r9, r3
 8005240:	4313      	orrs	r3, r2
 8005242:	46a2      	mov	sl, r4
 8005244:	9304      	str	r3, [sp, #16]
 8005246:	e7d2      	b.n	80051ee <_vfiprintf_r+0xc6>
 8005248:	9b03      	ldr	r3, [sp, #12]
 800524a:	1d19      	adds	r1, r3, #4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	9103      	str	r1, [sp, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	bfbb      	ittet	lt
 8005254:	425b      	neglt	r3, r3
 8005256:	f042 0202 	orrlt.w	r2, r2, #2
 800525a:	9307      	strge	r3, [sp, #28]
 800525c:	9307      	strlt	r3, [sp, #28]
 800525e:	bfb8      	it	lt
 8005260:	9204      	strlt	r2, [sp, #16]
 8005262:	7823      	ldrb	r3, [r4, #0]
 8005264:	2b2e      	cmp	r3, #46	@ 0x2e
 8005266:	d10a      	bne.n	800527e <_vfiprintf_r+0x156>
 8005268:	7863      	ldrb	r3, [r4, #1]
 800526a:	2b2a      	cmp	r3, #42	@ 0x2a
 800526c:	d132      	bne.n	80052d4 <_vfiprintf_r+0x1ac>
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	3402      	adds	r4, #2
 8005272:	1d1a      	adds	r2, r3, #4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	9203      	str	r2, [sp, #12]
 8005278:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800527c:	9305      	str	r3, [sp, #20]
 800527e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005348 <_vfiprintf_r+0x220>
 8005282:	2203      	movs	r2, #3
 8005284:	4650      	mov	r0, sl
 8005286:	7821      	ldrb	r1, [r4, #0]
 8005288:	f000 fb34 	bl	80058f4 <memchr>
 800528c:	b138      	cbz	r0, 800529e <_vfiprintf_r+0x176>
 800528e:	2240      	movs	r2, #64	@ 0x40
 8005290:	9b04      	ldr	r3, [sp, #16]
 8005292:	eba0 000a 	sub.w	r0, r0, sl
 8005296:	4082      	lsls	r2, r0
 8005298:	4313      	orrs	r3, r2
 800529a:	3401      	adds	r4, #1
 800529c:	9304      	str	r3, [sp, #16]
 800529e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a2:	2206      	movs	r2, #6
 80052a4:	4829      	ldr	r0, [pc, #164]	@ (800534c <_vfiprintf_r+0x224>)
 80052a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052aa:	f000 fb23 	bl	80058f4 <memchr>
 80052ae:	2800      	cmp	r0, #0
 80052b0:	d03f      	beq.n	8005332 <_vfiprintf_r+0x20a>
 80052b2:	4b27      	ldr	r3, [pc, #156]	@ (8005350 <_vfiprintf_r+0x228>)
 80052b4:	bb1b      	cbnz	r3, 80052fe <_vfiprintf_r+0x1d6>
 80052b6:	9b03      	ldr	r3, [sp, #12]
 80052b8:	3307      	adds	r3, #7
 80052ba:	f023 0307 	bic.w	r3, r3, #7
 80052be:	3308      	adds	r3, #8
 80052c0:	9303      	str	r3, [sp, #12]
 80052c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052c4:	443b      	add	r3, r7
 80052c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80052c8:	e76a      	b.n	80051a0 <_vfiprintf_r+0x78>
 80052ca:	460c      	mov	r4, r1
 80052cc:	2001      	movs	r0, #1
 80052ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80052d2:	e7a8      	b.n	8005226 <_vfiprintf_r+0xfe>
 80052d4:	2300      	movs	r3, #0
 80052d6:	f04f 0c0a 	mov.w	ip, #10
 80052da:	4619      	mov	r1, r3
 80052dc:	3401      	adds	r4, #1
 80052de:	9305      	str	r3, [sp, #20]
 80052e0:	4620      	mov	r0, r4
 80052e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052e6:	3a30      	subs	r2, #48	@ 0x30
 80052e8:	2a09      	cmp	r2, #9
 80052ea:	d903      	bls.n	80052f4 <_vfiprintf_r+0x1cc>
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0c6      	beq.n	800527e <_vfiprintf_r+0x156>
 80052f0:	9105      	str	r1, [sp, #20]
 80052f2:	e7c4      	b.n	800527e <_vfiprintf_r+0x156>
 80052f4:	4604      	mov	r4, r0
 80052f6:	2301      	movs	r3, #1
 80052f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80052fc:	e7f0      	b.n	80052e0 <_vfiprintf_r+0x1b8>
 80052fe:	ab03      	add	r3, sp, #12
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	462a      	mov	r2, r5
 8005304:	4630      	mov	r0, r6
 8005306:	4b13      	ldr	r3, [pc, #76]	@ (8005354 <_vfiprintf_r+0x22c>)
 8005308:	a904      	add	r1, sp, #16
 800530a:	f3af 8000 	nop.w
 800530e:	4607      	mov	r7, r0
 8005310:	1c78      	adds	r0, r7, #1
 8005312:	d1d6      	bne.n	80052c2 <_vfiprintf_r+0x19a>
 8005314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005316:	07d9      	lsls	r1, r3, #31
 8005318:	d405      	bmi.n	8005326 <_vfiprintf_r+0x1fe>
 800531a:	89ab      	ldrh	r3, [r5, #12]
 800531c:	059a      	lsls	r2, r3, #22
 800531e:	d402      	bmi.n	8005326 <_vfiprintf_r+0x1fe>
 8005320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005322:	f7ff fdd9 	bl	8004ed8 <__retarget_lock_release_recursive>
 8005326:	89ab      	ldrh	r3, [r5, #12]
 8005328:	065b      	lsls	r3, r3, #25
 800532a:	f53f af1f 	bmi.w	800516c <_vfiprintf_r+0x44>
 800532e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005330:	e71e      	b.n	8005170 <_vfiprintf_r+0x48>
 8005332:	ab03      	add	r3, sp, #12
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	462a      	mov	r2, r5
 8005338:	4630      	mov	r0, r6
 800533a:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <_vfiprintf_r+0x22c>)
 800533c:	a904      	add	r1, sp, #16
 800533e:	f000 f87d 	bl	800543c <_printf_i>
 8005342:	e7e4      	b.n	800530e <_vfiprintf_r+0x1e6>
 8005344:	08005a54 	.word	0x08005a54
 8005348:	08005a5a 	.word	0x08005a5a
 800534c:	08005a5e 	.word	0x08005a5e
 8005350:	00000000 	.word	0x00000000
 8005354:	08005103 	.word	0x08005103

08005358 <_printf_common>:
 8005358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800535c:	4616      	mov	r6, r2
 800535e:	4698      	mov	r8, r3
 8005360:	688a      	ldr	r2, [r1, #8]
 8005362:	690b      	ldr	r3, [r1, #16]
 8005364:	4607      	mov	r7, r0
 8005366:	4293      	cmp	r3, r2
 8005368:	bfb8      	it	lt
 800536a:	4613      	movlt	r3, r2
 800536c:	6033      	str	r3, [r6, #0]
 800536e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005372:	460c      	mov	r4, r1
 8005374:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005378:	b10a      	cbz	r2, 800537e <_printf_common+0x26>
 800537a:	3301      	adds	r3, #1
 800537c:	6033      	str	r3, [r6, #0]
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	0699      	lsls	r1, r3, #26
 8005382:	bf42      	ittt	mi
 8005384:	6833      	ldrmi	r3, [r6, #0]
 8005386:	3302      	addmi	r3, #2
 8005388:	6033      	strmi	r3, [r6, #0]
 800538a:	6825      	ldr	r5, [r4, #0]
 800538c:	f015 0506 	ands.w	r5, r5, #6
 8005390:	d106      	bne.n	80053a0 <_printf_common+0x48>
 8005392:	f104 0a19 	add.w	sl, r4, #25
 8005396:	68e3      	ldr	r3, [r4, #12]
 8005398:	6832      	ldr	r2, [r6, #0]
 800539a:	1a9b      	subs	r3, r3, r2
 800539c:	42ab      	cmp	r3, r5
 800539e:	dc2b      	bgt.n	80053f8 <_printf_common+0xa0>
 80053a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053a4:	6822      	ldr	r2, [r4, #0]
 80053a6:	3b00      	subs	r3, #0
 80053a8:	bf18      	it	ne
 80053aa:	2301      	movne	r3, #1
 80053ac:	0692      	lsls	r2, r2, #26
 80053ae:	d430      	bmi.n	8005412 <_printf_common+0xba>
 80053b0:	4641      	mov	r1, r8
 80053b2:	4638      	mov	r0, r7
 80053b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053b8:	47c8      	blx	r9
 80053ba:	3001      	adds	r0, #1
 80053bc:	d023      	beq.n	8005406 <_printf_common+0xae>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	6922      	ldr	r2, [r4, #16]
 80053c2:	f003 0306 	and.w	r3, r3, #6
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	bf14      	ite	ne
 80053ca:	2500      	movne	r5, #0
 80053cc:	6833      	ldreq	r3, [r6, #0]
 80053ce:	f04f 0600 	mov.w	r6, #0
 80053d2:	bf08      	it	eq
 80053d4:	68e5      	ldreq	r5, [r4, #12]
 80053d6:	f104 041a 	add.w	r4, r4, #26
 80053da:	bf08      	it	eq
 80053dc:	1aed      	subeq	r5, r5, r3
 80053de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80053e2:	bf08      	it	eq
 80053e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053e8:	4293      	cmp	r3, r2
 80053ea:	bfc4      	itt	gt
 80053ec:	1a9b      	subgt	r3, r3, r2
 80053ee:	18ed      	addgt	r5, r5, r3
 80053f0:	42b5      	cmp	r5, r6
 80053f2:	d11a      	bne.n	800542a <_printf_common+0xd2>
 80053f4:	2000      	movs	r0, #0
 80053f6:	e008      	b.n	800540a <_printf_common+0xb2>
 80053f8:	2301      	movs	r3, #1
 80053fa:	4652      	mov	r2, sl
 80053fc:	4641      	mov	r1, r8
 80053fe:	4638      	mov	r0, r7
 8005400:	47c8      	blx	r9
 8005402:	3001      	adds	r0, #1
 8005404:	d103      	bne.n	800540e <_printf_common+0xb6>
 8005406:	f04f 30ff 	mov.w	r0, #4294967295
 800540a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540e:	3501      	adds	r5, #1
 8005410:	e7c1      	b.n	8005396 <_printf_common+0x3e>
 8005412:	2030      	movs	r0, #48	@ 0x30
 8005414:	18e1      	adds	r1, r4, r3
 8005416:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005420:	4422      	add	r2, r4
 8005422:	3302      	adds	r3, #2
 8005424:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005428:	e7c2      	b.n	80053b0 <_printf_common+0x58>
 800542a:	2301      	movs	r3, #1
 800542c:	4622      	mov	r2, r4
 800542e:	4641      	mov	r1, r8
 8005430:	4638      	mov	r0, r7
 8005432:	47c8      	blx	r9
 8005434:	3001      	adds	r0, #1
 8005436:	d0e6      	beq.n	8005406 <_printf_common+0xae>
 8005438:	3601      	adds	r6, #1
 800543a:	e7d9      	b.n	80053f0 <_printf_common+0x98>

0800543c <_printf_i>:
 800543c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	7e0f      	ldrb	r7, [r1, #24]
 8005442:	4691      	mov	r9, r2
 8005444:	2f78      	cmp	r7, #120	@ 0x78
 8005446:	4680      	mov	r8, r0
 8005448:	460c      	mov	r4, r1
 800544a:	469a      	mov	sl, r3
 800544c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800544e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005452:	d807      	bhi.n	8005464 <_printf_i+0x28>
 8005454:	2f62      	cmp	r7, #98	@ 0x62
 8005456:	d80a      	bhi.n	800546e <_printf_i+0x32>
 8005458:	2f00      	cmp	r7, #0
 800545a:	f000 80d3 	beq.w	8005604 <_printf_i+0x1c8>
 800545e:	2f58      	cmp	r7, #88	@ 0x58
 8005460:	f000 80ba 	beq.w	80055d8 <_printf_i+0x19c>
 8005464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005468:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800546c:	e03a      	b.n	80054e4 <_printf_i+0xa8>
 800546e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005472:	2b15      	cmp	r3, #21
 8005474:	d8f6      	bhi.n	8005464 <_printf_i+0x28>
 8005476:	a101      	add	r1, pc, #4	@ (adr r1, 800547c <_printf_i+0x40>)
 8005478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800547c:	080054d5 	.word	0x080054d5
 8005480:	080054e9 	.word	0x080054e9
 8005484:	08005465 	.word	0x08005465
 8005488:	08005465 	.word	0x08005465
 800548c:	08005465 	.word	0x08005465
 8005490:	08005465 	.word	0x08005465
 8005494:	080054e9 	.word	0x080054e9
 8005498:	08005465 	.word	0x08005465
 800549c:	08005465 	.word	0x08005465
 80054a0:	08005465 	.word	0x08005465
 80054a4:	08005465 	.word	0x08005465
 80054a8:	080055eb 	.word	0x080055eb
 80054ac:	08005513 	.word	0x08005513
 80054b0:	080055a5 	.word	0x080055a5
 80054b4:	08005465 	.word	0x08005465
 80054b8:	08005465 	.word	0x08005465
 80054bc:	0800560d 	.word	0x0800560d
 80054c0:	08005465 	.word	0x08005465
 80054c4:	08005513 	.word	0x08005513
 80054c8:	08005465 	.word	0x08005465
 80054cc:	08005465 	.word	0x08005465
 80054d0:	080055ad 	.word	0x080055ad
 80054d4:	6833      	ldr	r3, [r6, #0]
 80054d6:	1d1a      	adds	r2, r3, #4
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6032      	str	r2, [r6, #0]
 80054dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054e4:	2301      	movs	r3, #1
 80054e6:	e09e      	b.n	8005626 <_printf_i+0x1ea>
 80054e8:	6833      	ldr	r3, [r6, #0]
 80054ea:	6820      	ldr	r0, [r4, #0]
 80054ec:	1d19      	adds	r1, r3, #4
 80054ee:	6031      	str	r1, [r6, #0]
 80054f0:	0606      	lsls	r6, r0, #24
 80054f2:	d501      	bpl.n	80054f8 <_printf_i+0xbc>
 80054f4:	681d      	ldr	r5, [r3, #0]
 80054f6:	e003      	b.n	8005500 <_printf_i+0xc4>
 80054f8:	0645      	lsls	r5, r0, #25
 80054fa:	d5fb      	bpl.n	80054f4 <_printf_i+0xb8>
 80054fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005500:	2d00      	cmp	r5, #0
 8005502:	da03      	bge.n	800550c <_printf_i+0xd0>
 8005504:	232d      	movs	r3, #45	@ 0x2d
 8005506:	426d      	negs	r5, r5
 8005508:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800550c:	230a      	movs	r3, #10
 800550e:	4859      	ldr	r0, [pc, #356]	@ (8005674 <_printf_i+0x238>)
 8005510:	e011      	b.n	8005536 <_printf_i+0xfa>
 8005512:	6821      	ldr	r1, [r4, #0]
 8005514:	6833      	ldr	r3, [r6, #0]
 8005516:	0608      	lsls	r0, r1, #24
 8005518:	f853 5b04 	ldr.w	r5, [r3], #4
 800551c:	d402      	bmi.n	8005524 <_printf_i+0xe8>
 800551e:	0649      	lsls	r1, r1, #25
 8005520:	bf48      	it	mi
 8005522:	b2ad      	uxthmi	r5, r5
 8005524:	2f6f      	cmp	r7, #111	@ 0x6f
 8005526:	6033      	str	r3, [r6, #0]
 8005528:	bf14      	ite	ne
 800552a:	230a      	movne	r3, #10
 800552c:	2308      	moveq	r3, #8
 800552e:	4851      	ldr	r0, [pc, #324]	@ (8005674 <_printf_i+0x238>)
 8005530:	2100      	movs	r1, #0
 8005532:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005536:	6866      	ldr	r6, [r4, #4]
 8005538:	2e00      	cmp	r6, #0
 800553a:	bfa8      	it	ge
 800553c:	6821      	ldrge	r1, [r4, #0]
 800553e:	60a6      	str	r6, [r4, #8]
 8005540:	bfa4      	itt	ge
 8005542:	f021 0104 	bicge.w	r1, r1, #4
 8005546:	6021      	strge	r1, [r4, #0]
 8005548:	b90d      	cbnz	r5, 800554e <_printf_i+0x112>
 800554a:	2e00      	cmp	r6, #0
 800554c:	d04b      	beq.n	80055e6 <_printf_i+0x1aa>
 800554e:	4616      	mov	r6, r2
 8005550:	fbb5 f1f3 	udiv	r1, r5, r3
 8005554:	fb03 5711 	mls	r7, r3, r1, r5
 8005558:	5dc7      	ldrb	r7, [r0, r7]
 800555a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800555e:	462f      	mov	r7, r5
 8005560:	42bb      	cmp	r3, r7
 8005562:	460d      	mov	r5, r1
 8005564:	d9f4      	bls.n	8005550 <_printf_i+0x114>
 8005566:	2b08      	cmp	r3, #8
 8005568:	d10b      	bne.n	8005582 <_printf_i+0x146>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	07df      	lsls	r7, r3, #31
 800556e:	d508      	bpl.n	8005582 <_printf_i+0x146>
 8005570:	6923      	ldr	r3, [r4, #16]
 8005572:	6861      	ldr	r1, [r4, #4]
 8005574:	4299      	cmp	r1, r3
 8005576:	bfde      	ittt	le
 8005578:	2330      	movle	r3, #48	@ 0x30
 800557a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800557e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005582:	1b92      	subs	r2, r2, r6
 8005584:	6122      	str	r2, [r4, #16]
 8005586:	464b      	mov	r3, r9
 8005588:	4621      	mov	r1, r4
 800558a:	4640      	mov	r0, r8
 800558c:	f8cd a000 	str.w	sl, [sp]
 8005590:	aa03      	add	r2, sp, #12
 8005592:	f7ff fee1 	bl	8005358 <_printf_common>
 8005596:	3001      	adds	r0, #1
 8005598:	d14a      	bne.n	8005630 <_printf_i+0x1f4>
 800559a:	f04f 30ff 	mov.w	r0, #4294967295
 800559e:	b004      	add	sp, #16
 80055a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	f043 0320 	orr.w	r3, r3, #32
 80055aa:	6023      	str	r3, [r4, #0]
 80055ac:	2778      	movs	r7, #120	@ 0x78
 80055ae:	4832      	ldr	r0, [pc, #200]	@ (8005678 <_printf_i+0x23c>)
 80055b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	6831      	ldr	r1, [r6, #0]
 80055b8:	061f      	lsls	r7, r3, #24
 80055ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80055be:	d402      	bmi.n	80055c6 <_printf_i+0x18a>
 80055c0:	065f      	lsls	r7, r3, #25
 80055c2:	bf48      	it	mi
 80055c4:	b2ad      	uxthmi	r5, r5
 80055c6:	6031      	str	r1, [r6, #0]
 80055c8:	07d9      	lsls	r1, r3, #31
 80055ca:	bf44      	itt	mi
 80055cc:	f043 0320 	orrmi.w	r3, r3, #32
 80055d0:	6023      	strmi	r3, [r4, #0]
 80055d2:	b11d      	cbz	r5, 80055dc <_printf_i+0x1a0>
 80055d4:	2310      	movs	r3, #16
 80055d6:	e7ab      	b.n	8005530 <_printf_i+0xf4>
 80055d8:	4826      	ldr	r0, [pc, #152]	@ (8005674 <_printf_i+0x238>)
 80055da:	e7e9      	b.n	80055b0 <_printf_i+0x174>
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	f023 0320 	bic.w	r3, r3, #32
 80055e2:	6023      	str	r3, [r4, #0]
 80055e4:	e7f6      	b.n	80055d4 <_printf_i+0x198>
 80055e6:	4616      	mov	r6, r2
 80055e8:	e7bd      	b.n	8005566 <_printf_i+0x12a>
 80055ea:	6833      	ldr	r3, [r6, #0]
 80055ec:	6825      	ldr	r5, [r4, #0]
 80055ee:	1d18      	adds	r0, r3, #4
 80055f0:	6961      	ldr	r1, [r4, #20]
 80055f2:	6030      	str	r0, [r6, #0]
 80055f4:	062e      	lsls	r6, r5, #24
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	d501      	bpl.n	80055fe <_printf_i+0x1c2>
 80055fa:	6019      	str	r1, [r3, #0]
 80055fc:	e002      	b.n	8005604 <_printf_i+0x1c8>
 80055fe:	0668      	lsls	r0, r5, #25
 8005600:	d5fb      	bpl.n	80055fa <_printf_i+0x1be>
 8005602:	8019      	strh	r1, [r3, #0]
 8005604:	2300      	movs	r3, #0
 8005606:	4616      	mov	r6, r2
 8005608:	6123      	str	r3, [r4, #16]
 800560a:	e7bc      	b.n	8005586 <_printf_i+0x14a>
 800560c:	6833      	ldr	r3, [r6, #0]
 800560e:	2100      	movs	r1, #0
 8005610:	1d1a      	adds	r2, r3, #4
 8005612:	6032      	str	r2, [r6, #0]
 8005614:	681e      	ldr	r6, [r3, #0]
 8005616:	6862      	ldr	r2, [r4, #4]
 8005618:	4630      	mov	r0, r6
 800561a:	f000 f96b 	bl	80058f4 <memchr>
 800561e:	b108      	cbz	r0, 8005624 <_printf_i+0x1e8>
 8005620:	1b80      	subs	r0, r0, r6
 8005622:	6060      	str	r0, [r4, #4]
 8005624:	6863      	ldr	r3, [r4, #4]
 8005626:	6123      	str	r3, [r4, #16]
 8005628:	2300      	movs	r3, #0
 800562a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800562e:	e7aa      	b.n	8005586 <_printf_i+0x14a>
 8005630:	4632      	mov	r2, r6
 8005632:	4649      	mov	r1, r9
 8005634:	4640      	mov	r0, r8
 8005636:	6923      	ldr	r3, [r4, #16]
 8005638:	47d0      	blx	sl
 800563a:	3001      	adds	r0, #1
 800563c:	d0ad      	beq.n	800559a <_printf_i+0x15e>
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	079b      	lsls	r3, r3, #30
 8005642:	d413      	bmi.n	800566c <_printf_i+0x230>
 8005644:	68e0      	ldr	r0, [r4, #12]
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	4298      	cmp	r0, r3
 800564a:	bfb8      	it	lt
 800564c:	4618      	movlt	r0, r3
 800564e:	e7a6      	b.n	800559e <_printf_i+0x162>
 8005650:	2301      	movs	r3, #1
 8005652:	4632      	mov	r2, r6
 8005654:	4649      	mov	r1, r9
 8005656:	4640      	mov	r0, r8
 8005658:	47d0      	blx	sl
 800565a:	3001      	adds	r0, #1
 800565c:	d09d      	beq.n	800559a <_printf_i+0x15e>
 800565e:	3501      	adds	r5, #1
 8005660:	68e3      	ldr	r3, [r4, #12]
 8005662:	9903      	ldr	r1, [sp, #12]
 8005664:	1a5b      	subs	r3, r3, r1
 8005666:	42ab      	cmp	r3, r5
 8005668:	dcf2      	bgt.n	8005650 <_printf_i+0x214>
 800566a:	e7eb      	b.n	8005644 <_printf_i+0x208>
 800566c:	2500      	movs	r5, #0
 800566e:	f104 0619 	add.w	r6, r4, #25
 8005672:	e7f5      	b.n	8005660 <_printf_i+0x224>
 8005674:	08005a65 	.word	0x08005a65
 8005678:	08005a76 	.word	0x08005a76

0800567c <__sflush_r>:
 800567c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	0716      	lsls	r6, r2, #28
 8005684:	4605      	mov	r5, r0
 8005686:	460c      	mov	r4, r1
 8005688:	d454      	bmi.n	8005734 <__sflush_r+0xb8>
 800568a:	684b      	ldr	r3, [r1, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	dc02      	bgt.n	8005696 <__sflush_r+0x1a>
 8005690:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	dd48      	ble.n	8005728 <__sflush_r+0xac>
 8005696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005698:	2e00      	cmp	r6, #0
 800569a:	d045      	beq.n	8005728 <__sflush_r+0xac>
 800569c:	2300      	movs	r3, #0
 800569e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80056a2:	682f      	ldr	r7, [r5, #0]
 80056a4:	6a21      	ldr	r1, [r4, #32]
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	d030      	beq.n	800570c <__sflush_r+0x90>
 80056aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	0759      	lsls	r1, r3, #29
 80056b0:	d505      	bpl.n	80056be <__sflush_r+0x42>
 80056b2:	6863      	ldr	r3, [r4, #4]
 80056b4:	1ad2      	subs	r2, r2, r3
 80056b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80056b8:	b10b      	cbz	r3, 80056be <__sflush_r+0x42>
 80056ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056bc:	1ad2      	subs	r2, r2, r3
 80056be:	2300      	movs	r3, #0
 80056c0:	4628      	mov	r0, r5
 80056c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056c4:	6a21      	ldr	r1, [r4, #32]
 80056c6:	47b0      	blx	r6
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	d106      	bne.n	80056dc <__sflush_r+0x60>
 80056ce:	6829      	ldr	r1, [r5, #0]
 80056d0:	291d      	cmp	r1, #29
 80056d2:	d82b      	bhi.n	800572c <__sflush_r+0xb0>
 80056d4:	4a28      	ldr	r2, [pc, #160]	@ (8005778 <__sflush_r+0xfc>)
 80056d6:	410a      	asrs	r2, r1
 80056d8:	07d6      	lsls	r6, r2, #31
 80056da:	d427      	bmi.n	800572c <__sflush_r+0xb0>
 80056dc:	2200      	movs	r2, #0
 80056de:	6062      	str	r2, [r4, #4]
 80056e0:	6922      	ldr	r2, [r4, #16]
 80056e2:	04d9      	lsls	r1, r3, #19
 80056e4:	6022      	str	r2, [r4, #0]
 80056e6:	d504      	bpl.n	80056f2 <__sflush_r+0x76>
 80056e8:	1c42      	adds	r2, r0, #1
 80056ea:	d101      	bne.n	80056f0 <__sflush_r+0x74>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	b903      	cbnz	r3, 80056f2 <__sflush_r+0x76>
 80056f0:	6560      	str	r0, [r4, #84]	@ 0x54
 80056f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056f4:	602f      	str	r7, [r5, #0]
 80056f6:	b1b9      	cbz	r1, 8005728 <__sflush_r+0xac>
 80056f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056fc:	4299      	cmp	r1, r3
 80056fe:	d002      	beq.n	8005706 <__sflush_r+0x8a>
 8005700:	4628      	mov	r0, r5
 8005702:	f7ff fbeb 	bl	8004edc <_free_r>
 8005706:	2300      	movs	r3, #0
 8005708:	6363      	str	r3, [r4, #52]	@ 0x34
 800570a:	e00d      	b.n	8005728 <__sflush_r+0xac>
 800570c:	2301      	movs	r3, #1
 800570e:	4628      	mov	r0, r5
 8005710:	47b0      	blx	r6
 8005712:	4602      	mov	r2, r0
 8005714:	1c50      	adds	r0, r2, #1
 8005716:	d1c9      	bne.n	80056ac <__sflush_r+0x30>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0c6      	beq.n	80056ac <__sflush_r+0x30>
 800571e:	2b1d      	cmp	r3, #29
 8005720:	d001      	beq.n	8005726 <__sflush_r+0xaa>
 8005722:	2b16      	cmp	r3, #22
 8005724:	d11d      	bne.n	8005762 <__sflush_r+0xe6>
 8005726:	602f      	str	r7, [r5, #0]
 8005728:	2000      	movs	r0, #0
 800572a:	e021      	b.n	8005770 <__sflush_r+0xf4>
 800572c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005730:	b21b      	sxth	r3, r3
 8005732:	e01a      	b.n	800576a <__sflush_r+0xee>
 8005734:	690f      	ldr	r7, [r1, #16]
 8005736:	2f00      	cmp	r7, #0
 8005738:	d0f6      	beq.n	8005728 <__sflush_r+0xac>
 800573a:	0793      	lsls	r3, r2, #30
 800573c:	bf18      	it	ne
 800573e:	2300      	movne	r3, #0
 8005740:	680e      	ldr	r6, [r1, #0]
 8005742:	bf08      	it	eq
 8005744:	694b      	ldreq	r3, [r1, #20]
 8005746:	1bf6      	subs	r6, r6, r7
 8005748:	600f      	str	r7, [r1, #0]
 800574a:	608b      	str	r3, [r1, #8]
 800574c:	2e00      	cmp	r6, #0
 800574e:	ddeb      	ble.n	8005728 <__sflush_r+0xac>
 8005750:	4633      	mov	r3, r6
 8005752:	463a      	mov	r2, r7
 8005754:	4628      	mov	r0, r5
 8005756:	6a21      	ldr	r1, [r4, #32]
 8005758:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800575c:	47e0      	blx	ip
 800575e:	2800      	cmp	r0, #0
 8005760:	dc07      	bgt.n	8005772 <__sflush_r+0xf6>
 8005762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800576a:	f04f 30ff 	mov.w	r0, #4294967295
 800576e:	81a3      	strh	r3, [r4, #12]
 8005770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005772:	4407      	add	r7, r0
 8005774:	1a36      	subs	r6, r6, r0
 8005776:	e7e9      	b.n	800574c <__sflush_r+0xd0>
 8005778:	dfbffffe 	.word	0xdfbffffe

0800577c <_fflush_r>:
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	690b      	ldr	r3, [r1, #16]
 8005780:	4605      	mov	r5, r0
 8005782:	460c      	mov	r4, r1
 8005784:	b913      	cbnz	r3, 800578c <_fflush_r+0x10>
 8005786:	2500      	movs	r5, #0
 8005788:	4628      	mov	r0, r5
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	b118      	cbz	r0, 8005796 <_fflush_r+0x1a>
 800578e:	6a03      	ldr	r3, [r0, #32]
 8005790:	b90b      	cbnz	r3, 8005796 <_fflush_r+0x1a>
 8005792:	f7ff f89f 	bl	80048d4 <__sinit>
 8005796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f3      	beq.n	8005786 <_fflush_r+0xa>
 800579e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80057a0:	07d0      	lsls	r0, r2, #31
 80057a2:	d404      	bmi.n	80057ae <_fflush_r+0x32>
 80057a4:	0599      	lsls	r1, r3, #22
 80057a6:	d402      	bmi.n	80057ae <_fflush_r+0x32>
 80057a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057aa:	f7ff fb94 	bl	8004ed6 <__retarget_lock_acquire_recursive>
 80057ae:	4628      	mov	r0, r5
 80057b0:	4621      	mov	r1, r4
 80057b2:	f7ff ff63 	bl	800567c <__sflush_r>
 80057b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057b8:	4605      	mov	r5, r0
 80057ba:	07da      	lsls	r2, r3, #31
 80057bc:	d4e4      	bmi.n	8005788 <_fflush_r+0xc>
 80057be:	89a3      	ldrh	r3, [r4, #12]
 80057c0:	059b      	lsls	r3, r3, #22
 80057c2:	d4e1      	bmi.n	8005788 <_fflush_r+0xc>
 80057c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057c6:	f7ff fb87 	bl	8004ed8 <__retarget_lock_release_recursive>
 80057ca:	e7dd      	b.n	8005788 <_fflush_r+0xc>

080057cc <__swhatbuf_r>:
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	460c      	mov	r4, r1
 80057d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d4:	4615      	mov	r5, r2
 80057d6:	2900      	cmp	r1, #0
 80057d8:	461e      	mov	r6, r3
 80057da:	b096      	sub	sp, #88	@ 0x58
 80057dc:	da0c      	bge.n	80057f8 <__swhatbuf_r+0x2c>
 80057de:	89a3      	ldrh	r3, [r4, #12]
 80057e0:	2100      	movs	r1, #0
 80057e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80057e6:	bf14      	ite	ne
 80057e8:	2340      	movne	r3, #64	@ 0x40
 80057ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80057ee:	2000      	movs	r0, #0
 80057f0:	6031      	str	r1, [r6, #0]
 80057f2:	602b      	str	r3, [r5, #0]
 80057f4:	b016      	add	sp, #88	@ 0x58
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	466a      	mov	r2, sp
 80057fa:	f000 f849 	bl	8005890 <_fstat_r>
 80057fe:	2800      	cmp	r0, #0
 8005800:	dbed      	blt.n	80057de <__swhatbuf_r+0x12>
 8005802:	9901      	ldr	r1, [sp, #4]
 8005804:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005808:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800580c:	4259      	negs	r1, r3
 800580e:	4159      	adcs	r1, r3
 8005810:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005814:	e7eb      	b.n	80057ee <__swhatbuf_r+0x22>

08005816 <__smakebuf_r>:
 8005816:	898b      	ldrh	r3, [r1, #12]
 8005818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800581a:	079d      	lsls	r5, r3, #30
 800581c:	4606      	mov	r6, r0
 800581e:	460c      	mov	r4, r1
 8005820:	d507      	bpl.n	8005832 <__smakebuf_r+0x1c>
 8005822:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005826:	6023      	str	r3, [r4, #0]
 8005828:	6123      	str	r3, [r4, #16]
 800582a:	2301      	movs	r3, #1
 800582c:	6163      	str	r3, [r4, #20]
 800582e:	b003      	add	sp, #12
 8005830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005832:	466a      	mov	r2, sp
 8005834:	ab01      	add	r3, sp, #4
 8005836:	f7ff ffc9 	bl	80057cc <__swhatbuf_r>
 800583a:	9f00      	ldr	r7, [sp, #0]
 800583c:	4605      	mov	r5, r0
 800583e:	4639      	mov	r1, r7
 8005840:	4630      	mov	r0, r6
 8005842:	f7ff fbbd 	bl	8004fc0 <_malloc_r>
 8005846:	b948      	cbnz	r0, 800585c <__smakebuf_r+0x46>
 8005848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800584c:	059a      	lsls	r2, r3, #22
 800584e:	d4ee      	bmi.n	800582e <__smakebuf_r+0x18>
 8005850:	f023 0303 	bic.w	r3, r3, #3
 8005854:	f043 0302 	orr.w	r3, r3, #2
 8005858:	81a3      	strh	r3, [r4, #12]
 800585a:	e7e2      	b.n	8005822 <__smakebuf_r+0xc>
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005866:	81a3      	strh	r3, [r4, #12]
 8005868:	9b01      	ldr	r3, [sp, #4]
 800586a:	6020      	str	r0, [r4, #0]
 800586c:	b15b      	cbz	r3, 8005886 <__smakebuf_r+0x70>
 800586e:	4630      	mov	r0, r6
 8005870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005874:	f000 f81e 	bl	80058b4 <_isatty_r>
 8005878:	b128      	cbz	r0, 8005886 <__smakebuf_r+0x70>
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	f023 0303 	bic.w	r3, r3, #3
 8005880:	f043 0301 	orr.w	r3, r3, #1
 8005884:	81a3      	strh	r3, [r4, #12]
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	431d      	orrs	r5, r3
 800588a:	81a5      	strh	r5, [r4, #12]
 800588c:	e7cf      	b.n	800582e <__smakebuf_r+0x18>
	...

08005890 <_fstat_r>:
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	2300      	movs	r3, #0
 8005894:	4d06      	ldr	r5, [pc, #24]	@ (80058b0 <_fstat_r+0x20>)
 8005896:	4604      	mov	r4, r0
 8005898:	4608      	mov	r0, r1
 800589a:	4611      	mov	r1, r2
 800589c:	602b      	str	r3, [r5, #0]
 800589e:	f7fb f8b9 	bl	8000a14 <_fstat>
 80058a2:	1c43      	adds	r3, r0, #1
 80058a4:	d102      	bne.n	80058ac <_fstat_r+0x1c>
 80058a6:	682b      	ldr	r3, [r5, #0]
 80058a8:	b103      	cbz	r3, 80058ac <_fstat_r+0x1c>
 80058aa:	6023      	str	r3, [r4, #0]
 80058ac:	bd38      	pop	{r3, r4, r5, pc}
 80058ae:	bf00      	nop
 80058b0:	2000129c 	.word	0x2000129c

080058b4 <_isatty_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	2300      	movs	r3, #0
 80058b8:	4d05      	ldr	r5, [pc, #20]	@ (80058d0 <_isatty_r+0x1c>)
 80058ba:	4604      	mov	r4, r0
 80058bc:	4608      	mov	r0, r1
 80058be:	602b      	str	r3, [r5, #0]
 80058c0:	f7fb f816 	bl	80008f0 <_isatty>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	d102      	bne.n	80058ce <_isatty_r+0x1a>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	b103      	cbz	r3, 80058ce <_isatty_r+0x1a>
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	bd38      	pop	{r3, r4, r5, pc}
 80058d0:	2000129c 	.word	0x2000129c

080058d4 <_sbrk_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	2300      	movs	r3, #0
 80058d8:	4d05      	ldr	r5, [pc, #20]	@ (80058f0 <_sbrk_r+0x1c>)
 80058da:	4604      	mov	r4, r0
 80058dc:	4608      	mov	r0, r1
 80058de:	602b      	str	r3, [r5, #0]
 80058e0:	f7fb fa32 	bl	8000d48 <_sbrk>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_sbrk_r+0x1a>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_sbrk_r+0x1a>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	2000129c 	.word	0x2000129c

080058f4 <memchr>:
 80058f4:	4603      	mov	r3, r0
 80058f6:	b510      	push	{r4, lr}
 80058f8:	b2c9      	uxtb	r1, r1
 80058fa:	4402      	add	r2, r0
 80058fc:	4293      	cmp	r3, r2
 80058fe:	4618      	mov	r0, r3
 8005900:	d101      	bne.n	8005906 <memchr+0x12>
 8005902:	2000      	movs	r0, #0
 8005904:	e003      	b.n	800590e <memchr+0x1a>
 8005906:	7804      	ldrb	r4, [r0, #0]
 8005908:	3301      	adds	r3, #1
 800590a:	428c      	cmp	r4, r1
 800590c:	d1f6      	bne.n	80058fc <memchr+0x8>
 800590e:	bd10      	pop	{r4, pc}

08005910 <_init>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	bf00      	nop
 8005914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005916:	bc08      	pop	{r3}
 8005918:	469e      	mov	lr, r3
 800591a:	4770      	bx	lr

0800591c <_fini>:
 800591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591e:	bf00      	nop
 8005920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005922:	bc08      	pop	{r3}
 8005924:	469e      	mov	lr, r3
 8005926:	4770      	bx	lr
